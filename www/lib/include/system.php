<? namespace System\Model{abstract class Attr{protected $data=array();protected $opts=array();protected static $attr_types=array('bool','int','int_set','varchar','blob','text','float','datetime','password','json','image','gps','list',);static protected $obj_attrs=array('image');static protected $merged_attrs=array();public function __construct(array $dataray=array()){$model=get_class($this);$this->update_attrs($dataray);if(isset($model::$attrs['pass'])){foreach($model::$attrs['pass']as $attr){$old_attr=$attr.'_old';$this->$old_attr=$this->$attr;}}if(method_exists($this,'construct')){$this->construct($dataray);}$this->changed=false;}public function __get($attr){if(!in_array($attr,array('data','opts'))){$model=get_class($this);$attr=='id'&&isset($model::$id_col)&&$attr=$model::$id_col;return $this->has_attr($attr)?$this->get_attr_value($attr):(isset($this->opts[$attr])?$this->opts[$attr]:null);}throw new \System\Error\Argument(sprintf('Trying to access internal private attribute "%s" for model "%s"',$attr,get_class($this)));}public function __set($attr,$value){if($this->has_attr($attr)){$null_error=false;if(is_null($value)){$def=self::get_attr(get_class($this),$attr);if(empty($def['is_null'])){if(any($def['default'])){$value=$def['default'];}}}$this->data[$attr]=self::convert_attr_val(get_class($this),$attr,$value);$this->changed=true;}else $this->opts[$attr]=$value;return $this;}public function get_data(){return $this->data;}public function get_opts(){return $this->opts;}public function update_attrs(array $update){foreach($update as $attr=>$val){$this->__set($attr,$val);}return $this;}public static function attr_exists($model,$attr){return array_key_exists($attr,$model::$attrs);}public function has_attr($attr){return self::attr_exists(get_class($this),$attr);}public function attr_required($attr){$model=get_class($this);return in_array($attr,$model::$required);}public static function get_model_attr_list($model){$attrs=array();foreach($model::$attrs as $attr=>$def){$attrs[]=$attr;}return $attr;}public static function get_model_attrs($model){return self::get_attrs($model::$attrs);}public static function get_attrs($attrs){$temp=array();foreach($attrs as $attr_type){$temp=array_merge($temp,(array) $attr_type);}return $temp;}public static function get_attr_def($model){return $model::$attrs;}public static function get_attr_type($model,$attr){foreach($model::$attrs as $type=>$attr_set){if(in_array($attr,$attr_set)){return $type;}}return false;}public static function get_attr($model,$attr){$attr_data=&$model::$attrs[$attr];if(in_array($attr_data[0],array('varchar','password'))){if(!isset($attr_data['length']))$attr_data['length']=255;}if($attr_data[0]==='text'){if(!isset($attr_data['length']))$attr_data['length']=65535;}return $attr_data;}public static function convert_attr_val($model,$attr,$val=null){$attr_data=self::get_attr($model,$attr);if(isset($attr_data['is_null'])&&$attr_data['is_null']&&is_null($val)){return $val=null;}switch($attr_data[0]){case 'int':{$val=intval($val);break;}case 'float':{$val=floatval($val);break;}case 'bool':{$val=is_null($val)?false:!!$val;break;}case 'password':case 'text':case 'varchar':{$val=mb_substr(strval($val),0,$attr_data['length']);break;}case 'datetime':{if(!isset($attr_data['is_null'])||!$attr_data['is_null']){if(is_null($val)){$val=new \DateTime();}if(!($val instanceof \DateTime)){$val=new \DateTime($val);}}break;}case 'image':{if(!($val instanceof \System\Image)){if(is_array($val)&&is_array($val['name'])){foreach($val as&$d){if(is_array($d)){$d=reset($d);}}}if(any($val)&&!is_array($val)||is_array($val)&&(empty($val['src'])||(any($val['src'])&&$val['src']!='actual'))){$val=str_replace("\\","",$val);if(is_array($val)){$val=new \System\Image($val);}elseif($j=\System\Json::decode($val,true)){$val=\System\Image::from_json($val);}elseif($val){$val=\System\Image::from_path($val);}else{$val=\System\Image::from_scratch();}}else{$val=\System\Image::from_scratch();}}break;}case 'json':{if(any($val)&&is_string($val)){$val=array_filter((array) \System\Json::decode($val));}break;}case 'int_set':{if(any($val)){if(is_array($val)){$val=array_map('intval',array_filter($val));}else{$val=array_map('intval',explode(',',$val));}}else $val=array();break;}case 'point':{if(any($val)&&!($val instanceof \System\Gps)){if(is_array($val)){$val=\System\Gps::from_array($val);}elseif(strpos($val,'POINT(')===0){$val=\System\Gps::from_sql($val);}else{$val=new \System\Gps();}}break;}case 'video_youtube':{if(any($val)&&!($val instanceof \System\Video\Youtube)){if(is_string($val)){($vid=\System\Video\Youtube::from_url($val))||($vid=\System\Video\Youtube::from_id($val));$val=$vid;}else throw new \System\Error\Format('Cannot create Youtube video object from "'.gettype($val).'".');}}case 'list':{if(!is_array($val)){$val=(array) $val;}}}return $val;}public function changed($status=null){if(!is_null($status)){$this->changed=!!$status;}return $this->changed;}public function get_attr_name($attr){return self::get_model_attr_name(get_class($this),$attr);}public function get_attr_desc($attr){return self::get_model_attr_desc(get_class($this),$attr);}public function get_model_name($plural=false){return self::get_model_model_name($model,$plural);}public static function get_model_attr_name($model,$attr){return l('attr_'.\System\Loader::get_link_from_class($model).'_'.$attr);}public static function get_model_attr_desc($model,$attr){return l('attr_'.\System\Loader::get_link_from_class($model).'_'.$attr.'_desc');}public function get_attr_value($attr){if(isset($this->data[$attr])){return $this->data[$attr];}else{$this->__set($attr,null);return $this->data[$attr];}}}} namespace System\Model{abstract class Callback extends Attr{const BEFORE_SAVE='before_save';const BEFORE_DELETE='before_delete';const AFTER_SAVE='after_save';const AFTER_DELETE='after_delete';private static $callbacks=array(self::BEFORE_SAVE=>array(),self::BEFORE_DELETE=>array(),self::AFTER_SAVE=>array(),self::AFTER_DELETE=>array(),);public function add_callback($trigger,Closure $lambda){if(array_key_exists($trigger,self::$callbacks)){$model=get_class($this);if(!isset(self::$callbacks[$trigger][$model])){self::$callbacks[$trigger][$model]=array();}self::$callbacks[$trigger][$model][]=$lambda;}return $this;}public function run_tasks($trigger,array $args=array()){$model=get_class($this);if(any(self::$callbacks[$trigger][$model])){foreach(self::$callbacks[$trigger][$model]as $task){$task($this,$args);}}}}} namespace System\Model{abstract class Database extends Callback{const REL_BELONGS_TO='belongs_to';const REL_HAS_ONE='has_one';const REL_HAS_MANY='has_many';private static $bad_chars=array(' ','_','--','.');private static $good_chars=array('-','-','-','','');private static $strictly_bad_chars=array('-');private static $strictly_good_chars=array('_');static protected $table;static protected $id_col;static protected $tables_generated=array();static protected $id_cols_generated=array();static protected $relation_types=array(self::REL_BELONGS_TO,self::REL_HAS_ONE,self::REL_HAS_MANY);static protected $belongs_to;static protected $has_one;static protected $has_many;static private $quick_conds=array("visible"=>true,"deleted"=>false,"used"=>true,);public static function get_table($model){if(isset($model::$table)){return $model::$table;}elseif(isset(self::$tables_generated[$model])){return self::$tables_generated[$model];}else{return self::$tables_generated[$model]=implode('_',array_map('strtolower',array_filter(explode('\\',$model))));}}public static function attr_exists($model,$attr){return $attr==self::get_id_col($model)||parent::attr_exists($model,$attr)||self::is_model_belongs_to_id($model,$attr);}public static function is_model_belongs_to_id($model,$attr){$is_true=false;$name=null;if(any($model::$belongs_to)){foreach($model::$belongs_to as $rel_name=>$rel){$rel_attr_name=self::get_attr_name_from_belongs_to_rel($rel_name,$rel);if($attr==$rel_attr_name){$is_true=true;$name=$rel_attr_name;}if($is_true)break;}}if($is_true){if(!isset($model::$attrs[$name])){$model::$attrs[$name]=array("int","is_unsigned"=>true,"is_index"=>true);}}return $is_true;}public static function get_attr_name_from_belongs_to_rel($rel_name,$rel){if(any($rel['foreign_key'])){return $rel['foreign_key'];}else{return any($rel['is_natural'])?self::get_id_col($rel['model']):"id_".$rel_name;}return false;}public static function get_id_col($model){if(isset($model::$id_col)){return $model::$id_col;}elseif(isset(self::$id_cols_generated[$model])){return self::$id_cols_generated[$model];}else{return self::$id_cols_generated[$model]='id_'.self::get_table($model);}}public static function create($model,array $attrs){$obj=new $model($attrs);return $obj->save();}public static function get_all($model,array $conds=array(),array $opts=array(),array $joins=array()){if(!$model||!class_exists($model))throw new \System\Error\Argument(sprintf('Model %s not found',$model));if(empty($opts['order-by'])&&self::attr_exists($model,'order')){$opts['order-by']="`t0`.`order` ASC";}$helper=new \System\Query(array("table"=>self::get_table($model),"cols"=>self::get_model_attr_list($model),"opts"=>$opts,"conds"=>$conds,"model"=>$model,));if(isset($model::$belongs_to)){if(!is_array(\System\Cache::fetch('basicmodel-merge-attrs-'.$model,$attrs_to_merge))){$attrs_to_merge=array();foreach($model::$belongs_to as $k=>$b){if(isset($b['merge-model'])&&$b['merge-model']&&$jmodel=$b['model']){if(!empty($b['cols'])){$attr_def=array();foreach($b['cols']as $col){$t=self::get_attr_type($jmodel,$col);if(!isset($attr_def[$t])){$attr_def[$t]=array();}$attr_def[$t][]=$col;}}else{$attr_def=$jmodel::$attrs;}$attrs_to_merge[]=array(self::get_table($jmodel),"USING(".(self::get_id_col($jmodel)).")",'extension_'.$k,$attr_def);}}\System\Cache::store('basicmodel-merge-attrs-'.$model,$attrs_to_merge);}if(!isset(self::$merged_attrs[$model])){self::$merged_attrs[$model]=array();foreach($attrs_to_merge as $jattr){self::$merged_attrs[$model]=array_merge_recursive(self::$merged_attrs[$model],$jattr[3]);}}foreach($attrs_to_merge as $jattr){$helper->join($jattr[0],$jattr[1],$jattr[2]);$helper->add_cols($jattr[3],$jattr[2]);}}if(any($joins)){foreach($joins as $join){def($join[3],'');$join[0]?$helper->left_join($join[1],$join[2],$join[3]):$helper->join($join[1],$join[2],$join[3]);}}return $helper;}public static function find($model,$ids=NULL,$force_list=false){if(is_array($ids)||($ex=strpos($ids,','))){any($ex)&&$ids=explode(',',$ids);$conds=array(self::get_id_col($model)." IN ('".implode('\',\'',$ids)."')");return self::get_all($model,$conds)->fetch();}else{$col=self::get_id_col($model);if(!is_numeric($ids)){if(self::attr_exists($model,'seoname')){$col='seoname';}else{$ids=intval(substr($ids,strlen($ids)-strpos(strrev($ids),'-')));}}$conds=array($col=>$ids);$result=self::get_first($model,$conds)->fetch();return $force_list?array($result):$result;}}public static function get_first($model,array $conds=array(),array $opts=array()){$opts['limit']=1;$opts['first']=true;return self::get_all($model,$conds,$opts);}public static function count_all($model,array $conds=array(),array $opts=array()){$helper=self::get_all($model,$conds,$opts);return $helper->count();}public static function attr_is_rel($model,$attr){return(isset($model::$has_many)&&is_array($model::$has_many)&&array_key_exists($attr,$model::$has_many))||(isset($model::$has_one)&&is_array($model::$has_one)&&array_key_exists($attr,$model::$has_one))||(isset($model::$belongs_to)&&is_array($model::$belongs_to)&&array_key_exists($attr,$model::$belongs_to));}public static function get_rel_type($model,$attr){$type=false;if(self::attr_is_rel($model,$attr)){if(is_array($model::$has_many)&&array_key_exists($attr,$model::$has_many))$type='has-many';elseif(is_array($model::$has_one)&&array_key_exists($attr,$model::$has_one))$type='has-one';elseif(is_array($model::$belongs_to)&&array_key_exists($attr,$model::$belongs_to))$type='belongs-to';}return $type;}public function __set($name,$value){$model=get_class($this);if(self::attr_is_rel($model,$name)){$type=self::get_rel_type($model,$name);if($type!='has-many'){$this->$name=$value;return $this;}}if($name=='id'||$name==self::get_id_col(get_class($this))){$this->data[self::get_id_col(get_class($this))]=intval($value);}return parent::__set($name,$value);}public function __get($attr){$model=get_class($this);if(self::attr_is_rel($model,$attr)){return $this->get_rel($model,$attr);}else{if($attr=='author'&&isset($model::$attrs['int'])&&in_array('id_author',$model::$attrs['int'])){$model::$belongs_to['author']=array("model"=>'\System\User',"local-key"=>'id_author');return self::__get($attr);}if($attr=='id'||$attr==self::get_id_col(get_class($this))){return def($this->data[self::get_id_col(get_class($this))],0);}return parent::__get($attr);}}public function get_rel($model,$rel){$type=self::get_rel_type($model,$rel);if(empty($this->opts[$rel.'-fetched'])){if($type=='has-many'){$join_alias='t0';$rel_attrs=$model::$has_many[$rel];$helper=get_all($rel_attrs['model'],array(),array());if(any($rel_attrs['is_bilinear'])){$join_alias='t_'.$rel;$table_name=self::get_bilinear_table_name($model,$rel_attrs);$helper->join($table_name,"USING(".self::get_id_col($rel_attrs['model']).")",$join_alias);}self::attr_exists($rel_attrs['model'],'order')&&$helper->add_opts(array("order-by"=>"`t0`.".'`order` ASC'));$idc=any($rel_attrs['foreign_name'])?$rel_attrs['foreign_name']:self::get_id_col($model);$helper->where(array($idc=>$this->id),$join_alias);$helper->assoc_with($rel_attrs['model']);$this->id?$helper->cancel_ignore():$helper->ignore_query(array());return $helper;}elseif($type=='has-one'){$rel_attrs=$model::$has_one[$rel];if(any($rel_attrs['foreign_key'])){$conds=array($rel_attrs['foreign_key']=>$this->id);}else{$idc=any($rel_attrs['foreign_name'])?'id_'.$rel_attrs['foreign_name']:self::get_id_col($model);$conds=array($idc=>$this->id);}if($rel_attrs['conds']){$conds=array_merge($rel_attrs['conds'],$conds);}$this->$rel=get_first($rel_attrs['model'],$conds)->fetch();$this->opts[$rel.'-fetched']=true;}elseif($type=='belongs-to'){$rel_attrs=$model::$belongs_to[$rel];$idf=any($rel_attrs['foreign_key'])?$rel_attrs['foreign_key']:self::get_id_col($rel_attrs['model']);$idl=any($rel_attrs['is_natural'])?self::get_id_col($rel_attrs['model']):('id_'.$rel);$conds=array($idf=>$this->$idl);if(any($rel_attrs['conds'])){$conds=array_merge($rel_attrs['conds'],$conds);}$this->$rel=get_first($rel_attrs['model'],$conds)->fetch();$this->opts[$rel.'-fetched']=true;}}return $this->$rel;}public static function get_bilinear_table_name($model,array $rel_attrs){$name=array();if(any($rel_attrs['is_master'])){$name['master']=\System\Model\Database::get_table($model);$name['slave']=\System\Model\Database::get_table($rel_attrs['model']);}else{$name['master']=\System\Model\Database::get_table($rel_attrs['model']);$name['slave']=\System\Model\Database::get_table($model);}return implode('_has_',$name);}public function get_seoname(){return $this->id?self::gen_seoname($this->name).'-'.$this->id:null;}public function update_check(){$model=get_class($this);$e=false;if(isset($model::$required)){foreach($model::$required as $attr){if(!$this->data[$attr]){$e=true;}}}return!$e;}public function save(){$this->run_tasks(\System\Model\Callback::BEFORE_SAVE);$model=get_class($this);if($this->update_check()){if(isset($model::$attrs['pass'])){foreach($model::$attrs['pass']as $attr){$old_attr=$attr.'_old';if(any($this->__get($old_attr))&&$this->$attr!=$this->$old_attr){$this->$attr=hash_passwd($this->$attr);}}}if($this->has_attr($at='id_user_author')||$this->has_attr($at='id_author')){!$this->$at&&($this->$at=intval(user()->id));}$nochange=array();foreach(self::$obj_attrs as $attr){if(isset($model::$attrs[$attr])){foreach($model::$attrs['image']as $name){if(is_object($this->$name)){if($this->$name->allow_save()){$this->$name->save();}elseif($this->$name->is_to_be_deleted()){$this->data[$name]=null;}else $nochange[]=$name;}else $nochange[]=$name;}}}$data=$this->get_data();foreach($nochange as $attr_name){unset($data[$attr_name]);}self::prepare_data($model,$data);if($this->id&&!$this->is_new_object){\System\Database::simple_update(self::get_table($model),self::get_id_col($model),$this->id,$data);}else{$id=\System\Database::simple_insert(self::get_table($model),$data);if($id){return $this->update_attrs(array(self::get_id_col($model)=>$id));}else throw new \System\Error\Database('Could not save model.');}}$this->run_tasks(\System\Model\Callback::AFTER_SAVE);return $this;}protected static function prepare_data($model,array&$data){foreach($model::$attrs as $attr=>$attr_def){if(empty($data[$attr])&&empty($attr_def['is_null'])&&any($attr_def['default'])){$data[$attr]=$attr_def['default'];}if($attr_def[0]==='json'&&isset($data[$attr])){$data[$attr]=json_encode($data[$attr]);}if($attr_def[0]==='int_set'&&isset($data[$attr])){$data[$attr]=implode(',',$data[$attr]);}}}public function drop(){$model=get_class($this);return \System\Query::simple_delete(self::get_table($model),array(self::get_id_col($model)=>$this->id));}public static function get_quick_conds($model){if(is_object($model)){$model=get_class($model);}$conds=array();foreach(self::$quick_conds as $attr=>$val){self::attr_exists($model,$attr)&&$conds[$attr]=$val;}return $conds;}public function is_new(){return!!$this->id;}public function reload(){$model=get_class($this);if($this->id){$this->update_attrs(get_first($model,array(self::get_id_col($model)=>$this->id))->assoc_with_no_model()->fetch());}return $this;}public static function gen_seoname($str,$strict=false){$str=strtolower(strip_tags(iconv('UTF-8','US-ASCII//TRANSLIT',str_replace(self::$bad_chars,self::$good_chars,$str))));return $strict?str_replace(self::$strictly_bad_chars,self::$strictly_good_chars,$str):$str;}public static function get_seoid($str){return (int) end(explode('-',$str));}public static function get_all_children(){$all_classes=get_declared_classes();$child_classes=array();foreach($all_classes as $class){if(is_subclass_of('\\'.$class,get_called_class())){$ref=new \ReflectionClass($class);if(!$ref->isAbstract()){$child_classes[]=$class;}}}return $child_classes;}public static function get_model_relations($model){$relations=array();foreach(self::$relation_types as $type){if(isset($model::$$type)){foreach($model::$$type as $rel_name=>$rel_def){$rel_def['type']=$type;$relations[$rel_name]=$rel_def;}}}return $relations;}public static function get_rel_def($model,$rel){if(isset($model::$has_many)&&isset($model::$has_many[$rel])){!isset($model::$has_many[$rel]['name'])&&$model::$has_many[$rel]['name']=$rel;return $model::$has_many[$rel];}elseif(isset($model::$has_one)&&isset($model::$has_one[$rel])){!isset($model::$has_one[$rel]['name'])&&$model::$has_one[$rel]['name']=$rel;return $model::$has_one[$rel];}elseif(isset($model::$belongs_to)&&isset($model::$belongs_to[$rel])){!isset($model::$belongs_to[$rel]['name'])&&$model::$belongs_to[$rel]['name']=$rel;return $model::$belongs_to[$rel];}else throw new \System\Error\Database("Relation '".$rel."' does not exist.");}public static function get_model_attr_list($model,$sql_format=true){$attrs=array(self::get_id_col($model));foreach($model::$attrs as $attr=>$def){if(empty($def['is_fake'])){if($sql_format&&$def[0]==='point'){$attrs[$attr]='AsWKT('.$attr.')';}else{if($attr!=self::get_id_col($model)){$attrs[]=$attr;}}}}if(any($model::$belongs_to)){foreach($model::$belongs_to as $rel_name=>$rel){$name=self::get_attr_name_from_belongs_to_rel($rel_name,$rel);if(empty($model::$attrs[$name])){$model::$attrs[$name]=array("int","is_unsigned"=>true,"is_index"=>true);$attrs[]=$name;}}}!in_array('created_at',$attrs)&&$attrs[]='created_at';!in_array('updated_at',$attrs)&&$attrs[]='updated_at';return $attrs;}private function relation_save($model,$model_id,$rel_name,array $ids_save,array $ids_delete){if(isset($model::$has_many[$rel_name])){$def=$model::$has_many[$rel_name];if(isset($def['is_bilinear'])){$table_name=self::get_bilinear_table_name($model,$def);if(any($def['is_master'])){$id_col=self::get_id_col($model);$foreign_key=self::get_id_col($def['model']);}else{$id_col=self::get_id_col($def['model']);$foreign_key=self::get_id_col($model);}$ids_save=array_filter($ids_save);$ids_delete=array_filter($ids_delete);if(any($ids_delete)){$q1=new \System\Query(array("table"=>$table_name));$q1->where(array($id_col=>$model_id),$table_name)->where_in($foreign_key,$ids_delete,$table_name)->delete();}if(any($ids_save)){$q2=new \System\Query(array("table"=>$table_name,"cols"=>array($id_col,$foreign_key)));foreach($ids_save as $id){$q2->add_insert_data(array($foreign_key=>$id,$id_col=>$model_id));}$q2->insert();}}else throw new \System\Error\Database("Relation must be bilinear!");}}public function assign_rel($rel_name,array $ids_new){$model=get_class($this);if(isset($model::$has_many[$rel_name])){$def=$model::$has_many[$rel_name];$items_current=collect_ids($this->$rel_name->fetch());self::relation_save($model,$this->id,$rel_name,array_diff($ids_new,$items_current),array_diff($items_current,$ids_new));}return $this;}public function has_attr($attr){return self::attr_exists(get_class($this),$attr);}public function __construct(array $update=array()){$model=get_class($this);if(!array_key_exists($idc=self::get_id_col($model),$model::$attrs)){$model::$attrs[$idc]=array("int","is_unsigned"=>true,"is_index"=>true);}if(!$this->has_attr('created_at')){$model::$attrs['created_at']=array('datetime',"default"=>'NOW()');}if(!$this->has_attr('updated_at')){$model::$attrs['updated_at']=array('datetime');}return parent::__construct($update);}public static function get_attr($model,$attr){if($attr==='id'){$attr=self::get_id_col($model);}return parent::get_attr($model,$attr);}public function get_name($pattern=null){if(is_null($pattern)){return $this->has_attr('name')?$this->name:$this->id;}else{return soprintf($pattern,$this);}}public static function get_location_attrs($model){$attrs=array();if(isset($model::$belongs_to)){foreach($model::$belongs_to as $attr=>$def){if($def['model']==='System\\Location'||$def['model']==='\\System\\Location'){$attrs[]=$attr;}}}return $attrs;}public static function get_model_attr_options($model,$attr){if(self::attr_exists($model,$attr)){if(isset($model::$attrs[$attr]['options'])){return $model::$attrs[$attr]['options'];}else return false;}else throw new \System\Error\Model(sprintf('Attr %s does not exist.',$attr));}public static function get_rel_bound_to($model,$rel){$def=self::get_rel_def($model,$rel);if(isset($def['model']::$belongs_to)){$match=array();foreach($def['model']::$belongs_to as $rel_name=>$rel_def){if($rel_def['model']==$model){$match[]=$rel_name;}}if(any($match)){if(count($match)===1){return $match[0];}else throw new \System\Error\Model(sprintf('Model %s has more belongs_to relations that match',$def['model']));}else return false;}else throw new \System\Error\Model(sprintf('Model "%s" has no belongs_to relations.',$def['model']));}public static function get_rel_bound_to_def($model,$rel){$type=self::get_rel_type($model,$rel);if($target=self::get_rel_bound_to($model,$rel)){$def=self::get_rel_def($model,$rel);return self::get_rel_def($def['model'],$target);}else throw new \System\Error\Model(sprintf('Relation bound to "%s::%s::%s" was not found.',$model,$type,$rel));}}} namespace System\Model{abstract class Color extends Database{public function get_color(){return array($this->red,$this->green,$this->blue,$this->alpha);}}} namespace System\Form{abstract class Element extends \System\Model\Attr{protected $form;public function use_form(\System\Form&$f){$this->form=&$f;}public function get_form(){return $this->form;}}} namespace System\Form{class Input extends \System\Form\Element{protected static $attrs=array("id"=>array("varchar"),"name"=>array("varchar"),"type"=>array("varchar"),"label"=>array("varchar"),"kind"=>array("varchar"),"content"=>array("text"),"info"=>array("varchar"),"placeholder"=>array('varchar'),"maxlen"=>array('int'),"step"=>array('float'),"min"=>array('int'),"max"=>array('int'),"required"=>array('bool'),"checked"=>array('bool'),"autocomplete"=>array('bool'),"value"=>array('mixed'),"options"=>array('array'),"model"=>array("varchar"),"conds"=>array("array"),"display"=>array("array"),"filter"=>array("array"),"has"=>array("array"),"thumb_size"=>array("varchar"),"disallow_upload"=>array("bool"),"allow_url"=>array("bool"),);protected static $required=array('name','kind',);protected static $kinds=array('input','textarea','select','button','search_tool');protected static $kinds_content_value=array('textarea');protected static $kinds_no_label=array('button');protected static $types=array('textarea','select','text','number','date','datetime','file','range','url','email','hidden','button','submit','password',);const ACTION_KEEP=0;const ACTION_UPLOAD=1;const ACTION_URL=2;const ACTION_NONE=3;const ACTION_NEW=4;const ACTION_EDIT=5;const IMAGE_INPUT_SIZE_DEFAULT='100x100';protected static $input_opts=array("image"=>array(self::ACTION_KEEP=>"form_image_input_keep",self::ACTION_NONE=>"form_image_input_none",self::ACTION_UPLOAD=>"form_image_input_upload",self::ACTION_URL=>"form_image_input_url",),"location"=>array(self::ACTION_NEW=>"form_location_input_new",self::ACTION_EDIT=>"form_location_input_edit",self::ACTION_NONE=>"form_location_input_none",),);protected function construct(){!$this->type&&self::get_default_type();!$this->kind&&self::get_default_kind();$this->kind=in_array($this->type,self::$kinds)?$this->type:self::get_default_kind();!$this->id&&$this->id='field_'.$this->name;$this->type=='submit'&&$this->kind='button';if(!$this->name){throw new \System\Error\Form('You must enter input name!',$this->type);}}public static function is_allowed_type($type){return in_array($type,self::$types);}public static function is_allowed_kind($kind){return in_array($kinds,self::$kinds);}public static function get_default_type(){return self::$types[0];}public static function get_default_kind(){return self::$kinds[0];}public function is_value_content(){return in_array($this->kind,self::$kinds_content_value);}public function has_label(){return!in_array($this->kind,self::$kinds_no_label);}public static function get_input_opts($type){if(isset(self::$input_opts[$type])){$opts=array();foreach(self::$input_opts[$type]as $label=>$opt){$opts[$label]=l($opt);}return $opts;}else throw new \System\Error\Form("There are no options for input '".$type."'");}}} namespace System\Form{class Text extends \System\Form\Element{protected static $attrs=array("id"=>array("varchar"),"class"=>array("varchar"),"label"=>array("varchar"),"content"=>array("varchar"),);}} namespace System\Form{abstract class Helper{public static function error($msg){return '<span class="form-error">'.$msg.'</span>';}private static function is_label_on_right($el){return!$el->multiple&&in_array($el->type,array('checkbox','radio'));}public static function render_input(\System\Form\Input $el,$output=true){$el->content=$el->is_value_content()?$el->value:$el->content;$label_on_right=self::is_label_on_right($el);$data=$el->get_data();$data['output']=false;$data['close']=true;$data['name']=$el->get_form()->get_prefix().$data['name'];if($el->kind=='select'){$data['content']=self::get_select_opts_html($el);unset($data['options']);}if($el->kind=='button'){$data['content']=$el->label;}$label=$el->has_label()?\Stag::label(array("class"=>array('input-label','input-label-'.($label_on_right?'right':'left')),"content"=>$el->label.($label_on_right?'':':'),"for"=>$el->id,)):'';if($el->multiple&&in_array($el->type,array('checkbox','radio'))){$input=self::get_multi_input_html($el);}elseif($el->type==='search_tool'){content_for('scripts','pwf/form/search_tool');content_for('styles','pwf/form/search_tool');$input=self::get_search_tool_html($el);}elseif($el->type==='image'){$input=self::get_image_input_html($el);}elseif($el->type==='location'){content_for('scripts','pwf/form/autocompleter');content_for('scripts','pwf/form/location_picker');content_for('styles','pwf/form/autocompleter');$input=self::get_location_input_html($el);}elseif($el->type==='gps'){content_for('scripts','pwf/form/jquery.gmap');content_for('scripts','pwf/form/gps');$input=self::get_gps_input_html($el);}else{if(in_array($el->type,array('datetime','date','time'))){content_for('scripts','pwf/form/datetime_picker');if($el->value instanceof \DateTime){$tz=new \DateTimeZone('UTC');$el->value->modify('+'.$el->value->getOffset().' seconds');$el->value->setTimezone($tz);$data['value']=format_date($el->value,'html5-full');}}$html_element=$el->kind;if($el->type==='password'||$el->type==='textarea'){unset($data['value']);}if($el->type==='checkbox'&&!$el->value){$data['value']=true;}$input=\Tag::div(array("content"=>\Tag::$html_element($data),"class"=>array('input-container'),"output"=>false));}$info='';if($el->info){$info=\Tag::span(array("class"=>'input-info',"content"=>$el->info,"output"=>false,));}$errors='';$error_list=$el->get_form()->get_errors($el->name);if(!empty($error_list)){$error_list_attrs=array("content"=>array(),"class"=>'errors',"output"=>false,);foreach($error_list as $e){$error_list_attrs['content'][]=\Tag::li(array("content"=>$e,"output"=>false));}$errors=\Tag::ul($error_list_attrs);}$label_and_input=$label_on_right?$input.$label:$label.$input;if($output){echo $label_and_input.$info.$errors;}else return $label_and_input.$info.$errors;}public static function get_image_input_html(\System\Form\Input $el){$inputs=array();if($el->value&&$el->value instanceof \System\Image){list($w,$h)=explode('x',$el->thumb_size);$inputs[]=\Tag::a(array("href"=>$el->value->get_path(),"class"=>'new',"output"=>false,"content"=>\Tag::img(array("src"=>$el->value->thumb($w,$h),"alt"=>'',"output"=>false,))));}$to=array("output"=>false,"class"=>'inputs im-options',"content"=>array());self::render_input_tools_into($to['content'],$el->tools);$inputs[]=\Tag::ul($to);return \Tag::div(array("class"=>array('input-container','input-image'),"output"=>false,"content"=>$inputs,));}public static function get_location_input_html(\System\Form\Input $el){$inputs=array();$to=array("output"=>false,"class"=>'inputs loc-options',"content"=>array());self::render_input_tools_into($to['content'],$el->tools);$inputs[]=\Tag::ul($to);return \Tag::div(array("class"=>array('input-container','input-location'),"output"=>false,"content"=>$inputs,));}public static function get_gps_input_html(\System\Form\Input $el){$inputs=array();$to=array("output"=>false,"class"=>'inputs gps-options',"content"=>array());self::render_input_tools_into($to['content'],$el->tools);$inputs[]=\Tag::ul($to);return \Tag::div(array("class"=>array('input-container','input-gps'),"output"=>false,"content"=>$inputs,));}private static function render_input_tools_into(&$target,$tools){foreach($tools as $tool){$target[]=\Tag::li(array("class"=>'input',"output"=>false,"content"=>self::render_input($tool,false),));}}public static function get_search_tool_html(\System\Form\Input $el){return \Tag::div(array("class"=>array('input-container'),"output"=>false,"content"=>\Tag::div(array("class"=>array('search_tool','search_tool_'.$el->name),"output"=>false,"content"=>\Tag::span(array("class"=>array('data','hidden'),"output"=>false,"style"=>'display:none',"content"=>json_encode(array("name"=>$el->get_form()->get_prefix().$el->name,"model"=>$el->model,"conds"=>$el->conds,"display"=>$el->display,"filter"=>$el->filter,"has"=>$el->has,"placeholder"=>$el->placeholder,)),)),)),));}public static function get_select_opts_html(\System\Form\Input $el){$opts=array();if(!$el->required){$opts[]=\Tag::option(array("content"=>' - - - ',"value"=>'',"output"=>false,"selected"=>!$el->value,));}foreach($el->options as $id=>$opt){if(is_object($opt)){if($opt instanceof \System\Model\Attr){$label=$opt->get_name();$id=$opt->id;}else throw new \System\Error\Form('Form options set passed as object must inherit System\Model\Attr');}else{$label=$opt;}$opts[]=\Tag::option(array("content"=>$label,"value"=>$id,"close"=>true,"output"=>false,"selected"=>$el->value==$id,));}return implode('',$opts);}public static function get_multi_input_html(\System\Form\Input $el){$input=array();$opts=array();$iname=$el->type==='radio'?$el->get_form()->get_prefix().$el->name:$el->get_form()->get_prefix().$el->name.'[]';foreach($el->options as $id=>$opt){if(is_object($opt)){if($opt instanceof \System\Model\Attr){$id=$opt->id;$lbl=$opt->name;}else throw new \System\Error\Form('Form options set passed as object must inherit System\Model\Attr');}else{$lbl=$opt;}$opts[]=\Tag::li(array("output"=>false,"content"=>array(\Tag::input(array("output"=>false,"name"=>$iname,"id"=>$el->get_form()->get_prefix().$el->name.'_'.$id,"value"=>$id,"type"=>$el->type,"checked"=>is_array($el->value)&&in_array($id,$el->value)||$el->value==$id,)),\Tag::label(array("output"=>false,"content"=>$lbl,"for"=>$el->get_form()->get_prefix().$el->name.'_'.$id,)),)));}return \Tag::ul(array("class"=>'options',"output"=>false,"content"=>$opts,));}public static function render_label(\System\Form\Label $el){\Tag::label($el->get_data());}public static function render_element(\System\Form\Element $el){switch(get_class($el)){case 'System\Form\Container':{switch($el->type){case \System\Form\Container::TYPE_INPUTS:case \System\Form\Container::TYPE_BUTTONS:{\Tag::fieldset(array("class"=>$el->type.'_container'));if($el->label){\Tag::div(array("class"=>'group_label',"content"=>$el->label));}\Tag::ul($el->get_data());foreach($el->get_elements()as $name=>$object){\Tag::li(array("class"=>self::get_object_class($object)));self::render_element($object);\Tag::close('li');}\Tag::close('ul');\Tag::close('fieldset');break;}case \System\Form\Container::TYPE_TAB:{\Tag::div(array("class"=>array('tab',$el->name)));\Tag::div(array("class"=>'tab_label',"content"=>$el->label));\Tag::div(array("class"=>'tab_content'));foreach($el->get_elements()as $el){self::render_element($el);}\Tag::close('div');\Tag::close('div');break;}case \System\Form\Container::TYPE_TAB_GROUP:{content_for('styles','pwf/form/tabs');content_for('scripts','pwf/form/tab_manager');\Tag::div(array("class"=>array('tab_group',$el->name)));foreach($el->get_elements()as $el){self::render_element($el);}\Tag::close('div');break;}}break;}case 'System\Form\Input':{self::render_input($el);break;}case 'System\Form\Label':{self::render_label($el);break;}case 'System\Form\Text':{self::render_label(new Label(array("content"=>$el->label)));\Tag::div(array("class"=>array('input-container'),"content"=>$el->content));break;}}}public static function get_object_class(\System\Form\Element $el){$base_class='element';$class=array();if($el instanceof \System\Form\Input){$base_class=$el->kind;$class[]='input-'.$el->id;$class[]='input-'.(self::is_label_on_right($el)?'left':'right');}elseif($el instanceof \System\Form\Label){$base_class='label';}elseif($el instanceof \System\Form\Text){$base_class='text';}$class[]='form-'.$base_class;return $class;}}} namespace System\Form{class Label extends \System\Form\Element{protected static $attrs=array("id"=>array("varchar"),"class"=>array("varchar"),"for"=>array("varchar"),"content"=>array("varchar"),);}} namespace System\Form{class Container extends \System\Form\Element{const TYPE_INPUTS='inputs';const TYPE_BUTTONS='buttons';const TYPE_TAB_GROUP='tab_group';const TYPE_TAB='tab';protected static $attrs=array("id"=>array('varchar'),"title"=>array('varchar'),"name"=>array('varchar'),"label"=>array('varchar'),"type"=>array('varchar'),"class"=>array('array'),);protected static $types=array(self::TYPE_INPUTS,self::TYPE_BUTTONS,self::TYPE_TAB,);protected static $type_models=array(self::TYPE_INPUTS=>array('System\\Form\\Input','System\\Form\\Label','System\\Form\\Text'),self::TYPE_BUTTONS=>array('System\\Form\\Input'),self::TYPE_TAB_GROUP=>array('System\\Form\\Container'),self::TYPE_TAB=>array('System\\Form\\Container'),);private $elements=array();protected function construct(array $dataray){$this->use_form($this->opts['form']);if(!$this->type){throw new \System\Error\Form('You must set form container type');}if(!$this->class){$this->class=array();}$this->class=array_merge($this->class,array($this->type));!$this->name&&$this->generate_name();}public function add_element(\System\Form\Element $el){$el->form=$this->form;if(in_array(get_class($el),$this->get_expected_class())){$this->elements[$el->name]=$el;}else throw new \System\Error\Form(sprintf('Form container %s cannot accomodate element of type %s',$this->type,get_class($el)));return $el;}private function get_expected_class(){return self::$type_models[$this->type];}private function generate_name(){$this->name=implode(\System\Form::SEPARATOR_ID,array($this->type,$this->form->get_count($this->type)));}public function get_elements(){return $this->elements;}}} namespace System{class Page extends Model\Attr{private static $path=array();private static $input=array();private static $current;protected static $attrs=array("title"=>array('varchar'),"page"=>array('varchar'),"path"=>array('varchar'),"seoname"=>array('varchar'),"modules"=>array('list'),"template"=>array('list'),"variable"=>array('list'),"post"=>array('varchar'),"keywords"=>array('varchar'),"desc"=>array('text'),"robots"=>array('varchar'),"copyright"=>array('varchar'),"author"=>array('varchar'),);public static function init(){self::parse_path();}public function __construct(array $dataray){parent::__construct($dataray);if(strpos($this->path,'/cron')===0){$this->template=array(null);}}public static function get_current(){if(empty(self::$current)){self::$current=self::fetch_page();}return self::$current;}public static function set_current(self $page){return self::$current=$page;}private static function parse_path(){self::$path=array();foreach(array_filter(explode('/',substr($_SERVER['REQUEST_URI'],0,strpos($_SERVER['REQUEST_URI'],'?')?strpos($_SERVER['REQUEST_URI'],'?'):strlen($_SERVER['REQUEST_URI']))))as $p){self::$path[]=$p;}}public static function fetch_page($search_path=null,$add_modules=true){$iter=&\System\Settings::get('pages');if(any($iter)){$path=is_null($search_path)?self::$path:array_filter(explode('/',$search_path));$pd=self::browse_tree($iter,$path);if($pd){$pd['path']='/'.implode('/',$path).(count($path)>0?'/':'');$page=new self($pd);if($add_modules){$page->add_modules();}return $page;}}return false;}public static function browse_tree(&$tree,array $path,$return_anchor=true){$params=array();$found=true;$variable=array();$p=$path;$iter=&$tree;self::use_param("template",$iter,$params);while(!empty($p)){$page=array_shift($p);$found=false;if(isset($iter[$page])&&is_array($iter[$page])){$iter=&$iter[$page];$seoname=$page;$found=is_array($iter['#']);}elseif(isset($iter["*"])&&is_array($iter["*"])){$iter=&$iter["*"];$found=is_array($iter['#']);$variable[]=$page;}else{$found=false;break;}if($found){if(any($iter["#"]['title']))$params['title']=def($title,'');$title=def($iter['#']['title'],'');self::use_param("template",$iter,$params);self::use_param("seoname",$iter,$params);self::use_param("title",$iter,$params);}}$iter['#']=array_merge($params,$iter['#']);$iter['#']['variable']=$variable;if($found){if($return_anchor){return $iter["#"];}else{return $iter;}}else return $found;}public function get_meta(){$dataray=array();$meta=cfg('output','meta_tags');foreach((array) $meta as $name){if(!empty($this->data[$name]))$dataray[$name]=$this->data[$name];}return $dataray;}public function add_modules(){foreach($this->modules as $id=>$mod){$mod[1]['module_id']=$id;Flow::add($mod[0],isset($mod[1])?$mod[1]:array(),isset($mod[2])?$mod[2]:array());}return $this;}function update_modules(array $modules){$tree=&Settings::get('pages');$page=&self::browse_tree($tree,$this->page_path);$iter=&$page[0];$iter['modules']=$modules;return Settings::save('pages');}public static function get_path(){if(self::$current){return self::get_current()->path;}else{return '/'.implode('/',self::$path).(count(self::$path)>0?'/':'');}}public static function get_path_list(){return self::$path;}public static function get_path_variables(){if(self::get_current()){return self::get_current()->variable;}else return array();}private static function use_param($name,array&$node,array&$default){if(isset($node["#"][$name])){$default[$name]=$node["#"][$name];}else{$node["#"][$name]=isset($default[$name])?$default[$name]:null;}}public function is_readable(){if(!user()->is_root()&&!empty($this->opts['groups'])){foreach(user()->get_group_ids()as $id){if(in_array($id,$this->opts['groups']))return true;}return false;}return true;}}} namespace System{class Loader{const DIR_CLASS='/lib/class';private static $loaded=false;public static function load_all(){if(!self::$loaded){$files=\System\Directory::find_all_files(ROOT.self::DIR_CLASS);foreach($files as $file){require_once $file;}$loaded=true;}}public static function get_class_file_name($class_name,$with_suffix=false){return str_replace("\_",'/',substr(strtolower(preg_replace("/([A-Z])/","_$1",$class_name)),1)).($with_suffix?".php":'');}public static function get_link_from_model($model){return str_replace('::','_',strtolower($model));}public static function get_link_from_class($model){return str_replace('\\','_',strtolower(preg_replace('/^\\\\/','',$model)));}public static function get_class_from_model($model){return ucfirsts($model,'::','\\');}public static function get_class_trans($class_name,$plural=false){return l('model_'.self::get_link_from_class($class_name).($plural?'_plural':''));}}} namespace System\Cache\Driver{class Runtime implements \System\Cache\Ifce{private $storage=array();public function store($path,$value,$ttl){return $this->storage[$path]=$value;}public function fetch($path,&$var){return $var=$this->get($path);}public function get($path){return isset($this->storage[$path])?$this->storage[$path]:null;}public function release($path){unset($this->storage[$path]);}public function flush(){$this->storage=array();}}} namespace System\Cache\Driver{class Apc implements \System\Cache\Ifce{public function store($path,$value,$ttl){$res=apc_add($path,$value,$ttl);return $res?$value:NULL;}public function fetch($path,&$var){$res=false;$var=apc_fetch($path,$res);return $res?$var:($var=NULL);}public function get($path){$res=false;$var=apc_fetch($path,$res);return isset($res)?$var:NULL;}public function release($path){return apc_delete($path);}public function flush(){return apc_clear_cache('user');}}} namespace System\Cache{interface Ifce{public function store($path,$value,$ttl);public function fetch($path,&$var);public function get($path);public function release($path);public function flush();}} namespace System{abstract class Input{const EXEC_DIR="/lib/exec";static $input;static $exec_status=array();static function init(){foreach($_FILES as $var=>$cont){if(isset($cont['name'])&&is_array($cont['name'])){foreach($cont as $attr=>$value){foreach($value as $file=>$file_attr){if($a=is_array($file_attr)){$_FILES[$var][$file][$attr]=$file_attr['file'];}else{$_FILES[$var][$attr]=$file_attr;}}if($a)unset($_FILES[$var][$attr]);}}else{break;}}if(!isset($_GET))$_GET=array();if(!isset($_POST))$_POST=array();self::$input=array_merge_recursive((array) $_GET,(array) $_POST,(array) $_FILES);self::$input['request']=$_SERVER['REQUEST_URI'];self::$input['path']=explode('?',$_SERVER['REQUEST_URI'],2);self::$input['path']=self::$input['path'][0];self::fix_input(self::$input);unset($_GET,$_POST);}static function get(){if(!func_num_args())return self::$input;$path=func_get_args();if(is_array(func_get_arg(0))){$args=array_shift($path);$path=array_merge($args,$path);}$last=end($path);if($last===true)$raw=array_pop($path);else $raw=false;$iter=&self::$input;foreach($path as $arg){if(isset($iter)&&is_array($iter))$iter=&$iter[$arg];else $iter=array();}return $raw?$iter:self::secure($iter);}static function secure($str){$bad=array("'","`","\"");$good=array("&#39;","&#96;","&quot;");return $str=str_replace($bad,$good,$str);}static function get_by_prefix($prefix){$data=array();foreach(self::$input as $k=>&$v){if(strpos($k,$prefix)===0)$data[substr($k,strlen($prefix))]=&$v;}return $data;}static function add(array $path,$what){$iter=&self::$input;foreach($path as $arg){if(!is_array($iter)&&($i+=1)<count($path)&&!isset($iter))$iter=array();$iter=&$iter[$arg];}$iter[]=$what;}static function exec(){if(any(self::$input['exec'])){self::rebool(self::get('bools'));foreach(self::$input['exec']as $e){$file=ROOT.self::EXEC_DIR.'/'.str_replace('..','',$e).'.php';self::$exec_status[$e]=file_exists($file)?!!include($file):false;}}return self::exec_check();}static function exec_check(){foreach(self::$exec_status as $stat){if($stat!==true){return false;}}return true;}static function rebool($what){$vars=explode(':',$what);foreach($vars as $var){$path=explode('[',str_replace(']','',$var));$v=&self::get($path,true);$v=!!$v;}}static function rejson(array $path){$set=&self::get($path,true);foreach($set as&$var){if(preg_match("/^json\:/",$var)){$var=\System\Json::decode(substr($var,5));}}}private static function fix_input(array&$data){if(get_magic_quotes_gpc()){foreach($data as&$row){if(is_array($row)){self::fix_input($row);}else{$row=stripcslashes($row);}}}}}} namespace System{abstract class Status{const DIR_LOGS='/var/log';private static $log_files=array();public static function report($type,$msg){if(!isset(self::$log_files[$type])||!is_resource(self::$log_files[$type])){try{\System\Directory::check(ROOT.self::DIR_LOGS);self::$log_files[$type]=@fopen(ROOT.self::DIR_LOGS.'/'.$type.'.log','a+');}catch(\System\Error $e){self::error($e,false);}}if(is_resource(self::$log_files[$type])){try{$report=@date('[Y-m-d H:i:s]');}catch(\Exception $e){$report=time();}!self::on_cli()&&$report.=' '.$_SERVER['SERVER_NAME'].NL;self::append_msg_info($msg,$report);if(self::on_cli()){$report.="> Run from console".NL;}else{$report.="> Request: ".$_SERVER['REQUEST_METHOD'].' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_URI']."'".NL;}$report.=NL;fwrite(self::$log_files[$type],$report);}}private static function append_msg_info($msg,&$report){foreach((array) $msg as $line){if($line){if(is_array($line)){if(isset($line[0])){self::append_msg_info($line,$report);}else{$report.="> ".json_encode($line).NL;}}else{$report.="> ".$line.NL;}}}}public static function catch_exception(\Exception $e,$ignore_next=false){while(ob_get_level()>0){ob_end_clean();}try{$errors=cfg('output','errors');$cfg_ok=true;}catch(\System\Error $exc){$errors=array();$cfg_ok=false;}if(!($e instanceof \System\Error)){$e=\System\Error::from_exception($e);}if(array_key_exists($e->get_name(),$errors)){$error_page=$errors[$e->get_name()];}else{$error_page=array("title"=>'l_error',"template"=>array('pwf/errors/layout'),"partial"=>'system/error/bug',);}if(!self::on_cli()){header($e->get_http_status());}try{$page=new \System\Page($error_page);\System\Output::set_opts(array("title"=>$page->title,"template"=>$page->template,"page"=>$page->seoname,));if(is_null(\System\Output::get_format())){try{$format_default=cfg('output','format_default');}catch(\System\Error $exc){$format_default='html';}\System\Output::set_format($format_default);}\System\Output::add_template(array("name"=>$error_page['partial'],"locals"=>array("desc"=>$e,)),\System\Template::DEFAULT_SLOT);\System\Output::out();self::report('error',$e);}catch(\Exception $exc){if($cfg_ok&&!$ignore_next){self::catch_exception($exc,true);}}exit(1);}public static function catch_error($number,$string,$file=null,$line=null,$context=array()){if(error_reporting()){self::catch_exception(new \System\Error\Code($string.' in "'.$file.':'.$line.'"'));}}public static function on_cli(){return php_sapi_name()=='cli';}}} namespace System{class Migration extends Model\Database{const BASEDIR='/etc/database/migrations.d';static protected $attrs=array("seoname"=>array('varchar'),"name"=>array('varchar'),"desc"=>array('varchar'),"md5_sum"=>array('varchar'),"status"=>array('varchar'),"date"=>array('datetime'),);static function get_new(){try{$old_items=get_all("System\Migration")->fetch();}catch(\System\Error $e){$old_items=array();}$old=array();foreach($old_items as&$m){$old[]=$m->date->format('sql').'-'.$m->seoname;}$items=self::checkout_folder($old);if(any($items)){$sums=collect(array('attr','md5_sum'),$items,true);try{$old=get_all("\System\Migration",array("t0.md5_sum IN ('".implode("','",$sums)."')"))->fetch();}catch(\System\Error $e){$old=array();}}foreach($old as $mig){foreach($items as $key=>$nmig){if($mig->get_checksum()==$nmig->get_checksum()){if($mig->status=='ok'){unset($items[$key]);}else{$items[$key]=$mig;}}}}uasort($items,array('self','sort'));return $items;}public static function checkout_folder(array $old=array()){$dir=opendir(ROOT.self::BASEDIR);$items=array();while($file=readdir($dir)){if(preg_match("/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[a-zA-Z\_\-]*\.php$/",$file)){$fname=explode('-',$file);$date=new \Datetime(intval($fname[0]).'-'.intval($fname[1]).'-'.intval($fname[2]));$name=\System\File::remove_postfix($fname[3]);if(!in_array(format_date($date,"sql-date").'-'.$name,$old)){$temp=&$items[];$temp=new self(array("file"=>$file,"date"=>$date,"seoname"=>$name,"status"=>'new',));$temp->get_meta();$temp->get_checksum();}}}usort($items,array("self","sort"));return $items;}static function run_all(&$items=null){if(!$items){$items=self::get_new();}foreach($items as&$m){if($m->run()->status!='ok'){return false;}}return true;}public function&run(){$this->sql("START TRANSACTION");include($p=ROOT.self::BASEDIR.'/'.$this->get_filename());$this->sql("COMMIT");$this->get_checksum();$this->status=empty($this->errors)?'ok':'failed';$this->save();return $this;}private function get_checksum(){if(!$this->md5_sum){$this->md5_sum=md5(\System\File::read($p=ROOT.self::BASEDIR.'/'.$this->get_filename()));}return $this->md5_sum;}private function sql($query){try{return Database::query($query);}catch(\System\Error $e){$this->status='failed';$this->errors[]=$e->getMessage();}}public function get_filename(){return format_date($this->date,"sql-date").'-'.$this->seoname.'.php';}public function get_meta(){if(file_exists($p=ROOT.self::BASEDIR.'/'.$this->get_filename())){$c=file($p);foreach($c as $line){if(strpos($line,'#[')===0){$this->name=self::cut_meta($line);if(strpos(next($c),'#[')===0){$this->desc=self::cut_meta($line);}break;}}}}static function cut_meta($line){return substr($line,2,strlen($line)-4);}private static function sort(self $a,self $b){if(($ta=$a->date->getTimestamp())==($tb=$b->date->getTimestamp())){return 0;}return($ta<$tb)?-1:1;}}} namespace System{abstract class Minifier{public static function process($type,$content){return self::conversion_available($type)?self::minify($type,$content):$content;}public static function conversion_available($type){return class_exists(self::get_class_name($type));}private static function get_class_name($type){return '\\System\\Minifier\\'.ucfirst($type);}public static function minify($type,$content){$tool=self::get_class_name($type);return $tool::minify($content,array());}}} namespace System{class User extends Model\Database{static protected $required=array('login');static protected $attrs=array("login"=>array('varchar',"is_unique"=>true),"nick"=>array('varchar'),"first_name"=>array('varchar'),"last_name"=>array('varchar'),"password"=>array('password',"default"=>''),"avatar"=>array('image'),"last_login"=>array('datetime',"default"=>0),"com_email"=>array('bool',"default"=>true),"com_sms"=>array('bool',"default"=>false),);static protected $has_many=array("groups"=>array("model"=>'\System\User\Group',"is_bilinear"=>true,"is_master"=>true),"contacts"=>array("model"=>'\System\User\Contact'));static private $current_user;private $rights;public static function get_active(){if(self::$current_user instanceof self){return self::$current_user;}elseif(any($_SESSION['yacms-user-id'])){self::$current_user=find("\System\User",$_SESSION['yacms-user-id']);}if(!(self::$current_user instanceof self)){self::$current_user=self::create_guest();}self::$current_user->get_rights();return self::$current_user;}private static function create_guest(){return new self(array("user_id"=>0,"nick"=>_('Host'),"anonym_key"=>session_id()));}public static function logged_in(){if(!self::$current_user){self::get_active();}return@!!self::$current_user->id;}public static function login(self $user,$password){return $user->password==hash_passwd($password)?self::create_session($user):false;}private static function create_session(self $user){self::$current_user=$user;$user->last_login=new \DateTime();$user->save();$_SESSION['yacms-user-id']=$user->id;return true;}public static function logout(){unset($_SESSION['yacms-user-id']);return true;}public function get_name($pattern=null){return $pattern?soprintf($pattern,$this):$this->first_name.' '.$this->last_name;}public function get_rights(){if(is_null($this->rights)){$conds=array("public"=>true);$ids=collect_ids($this->groups->fetch());if(any($ids)){$conds[]="id_system_user_group IN (".implode(',',$ids).")";}$this->rights=get_all("\System\User\Perm")->where($conds,"t0",true)->reset_cols()->add_cols(array("trigger","type","id_system_user_perm"),"t0")->assoc_with('')->fetch('trigger','id_system_user_perm');}return $this->rights;}public function has_right($to){if(empty($this->rights)){$this->get_rights();}return $this->login=='root'||array_key_exists($to,$this->rights);}public static function has_right_to($what){return self::get_active()->has_right($what);}public function is_root(){return $this->login=='root';}public function get_mailer_types(){return array('email');}public function delete(){return $this->is_root()?$this:parent::delete();}public function get_seoname(){$this->name=$this->get_name();return parent::get_seoname();}function get_group_ids(){return collect_ids($this->groups->fetch());}function get_setup(){if(!$this->setup){$this->setup=User\Setup::get_for_user($this->id);}return $this->setup;}public static function get_flags(){$flags=array();$flags[]=self::logged_in()?'user':'guest';return implode(' ',$flags);}public static function gen_passwd($len=12){return implode('-',str_split(substr(md5(rand(1,4096*4096)),0,$len),4));}}} namespace System{class Location extends \System\Model\Database{protected static $attrs=array("name"=>array("varchar","is_unique"=>true),"addr"=>array("varchar"),"gps"=>array("point"),"desc"=>array("text","default"=>''),"site"=>array("url","default"=>''),);protected static $belongs_to=array("user"=>array("model"=>'\System\User'),);public function map($w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return 'http://maps.googleapis.com/maps/api/staticmap?sensor=false&amp;zoom=14&amp;size='.$w.'x'.$h.'&amp;maptype='.$type.'&amp;markers='.$this->gps->gps();}public function map_link(){return 'http://maps.google.com/maps?q='.$this->gps->gps();}public function map_html($w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return \Tag::a(array("output"=>false,"class"=>'location_map',"href"=>$this->map_link(),"content"=>$this->to_html()));}public function to_html($w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return $this->gps->to_html($w,$h,$type);}}} namespace System\Template{abstract class Tag{private static $html_attrs=array('*'=>array('class','id','onclick','onfocus','title'),'#inputs'=>array('onchange','onkeyup','name','value'),'#source'=>array('src'),'#links'=>array('href'),'#sizeable'=>array('width','height'),'iframe'=>array('frameborder','allowfullscreen'),'meta'=>array('name','content','http-equiv'),'form'=>array('method','action','enctype'),'textarea'=>array('required','rows','cols','!value'),'input'=>array('type','min','max','maxlength','step','required','size','disabled','checked','results','placeholder','autocomplete'),'select'=>array('size','multiple','required'),'option'=>array('selected','value'),'button'=>array('type'),'html'=>array('xmlns'),'label'=>array('for'),);private static $noclose_tags=array('input','img','meta');private static $bool_attrs=array('required','selected','checked');private static $attr_separators=array('content'=>'','style'=>';','class'=>' ',);private static $html_schema=array('#inputs'=>array('select','input','textarea','button','option'),'#source'=>array('img','iframe','script'),'#links'=>array('a','link'),'#sizeable'=>array('iframe','img','video'),);public static function __callStatic($name,$args){$attrs=&$args[0];return self::tag($name,(array) $attrs);}public static function tag($name,array $attrs=array()){$o='<'.$name.self::html_attrs($name,(array) $attrs).'>';if($c=isset($attrs['content'])){$o.=is_array($attrs['content'])?implode('',$attrs['content']):$attrs['content'];}if((($c&&!isset($attrs['close']))||(isset($attrs['close'])&&$attrs['close']))&&!in_array($name,self::$noclose_tags)){$o.='</'.$name.'>';}if(!isset($attrs['output'])||$attrs['output'])echo $o;return $o;}public static function close($name,$output=false){$o='</'.$name.'>';if($o)echo $o;return $o;}private static function get_tag_class($tag){foreach(self::$html_schema as $cname=>$objects){if(in_array($tag,$objects)){return self::$html_attrs[$cname];}}return array();}public static function html_attrs($tag,array $attrs=array()){$real_attrs=array();foreach(self::$bool_attrs as $attr){if(any($attrs[$attr])){$attrs[$attr]=$attr;}}foreach($attrs as $name=>$attr){if(is_array($attr)){$separator=isset(self::$attr_separators[$name])?self::$attr_separators[$name]:'';$attr=implode($separator,$attr);}$is_valid=(!is_null($attr)&&strlen($attr))||$name=='value';$available_for_tag=isset(self::$html_attrs[$tag])&&(self::$html_attrs[$tag]=='*'||in_array($name,self::$html_attrs[$tag]));$available_for_all_tags=in_array($name,self::$html_attrs['*']);$available_for_tag_class=in_array($name,self::get_tag_class($tag));if($is_valid&&($available_for_all_tags||$available_for_tag||$available_for_tag_class)){$real_attrs[]=$name.'="'.$attr.'"';}}return(count($real_attrs)?' ':'').implode(' ',$real_attrs);}public static function doctype(){$o='<!DOCTYPE html>';echo $o;return $o;}}} namespace System\Database\Driver{class Mysqli implements DriverInterface{const ERROR_ACCESS_DENIED=1045;const ERROR_DUPLICATE_ENTRY=1062;const ERROR_DATA_TRUNCATED=1265;private $connection;private $autoFree=TRUE;private $buffered;private $config=array();private $db_selected=false;public function __construct(){if(!extension_loaded('mysqli'))throw new \System\Error\Database("PHP extension 'mysqli' is not loaded.");}public function connect(array&$config){$this->config=$config;if(isset($config['resource'])){$this->connection=$config['resource'];}else{if(!isset($config['charset']))$config['charset']='utf8';if(!isset($config['username']))$config['username']=ini_get('mysql.default_user');if(!isset($config['password']))$config['password']=ini_get('mysql.default_password');if(!isset($config['host'])){$host=ini_get('mysql.default_host');if($host){$config['host']=$host;$config['port']=ini_get('mysql.default_port');}else{if(!isset($config['socket']))$config['socket']=ini_get('mysql.default_socket');$config['host']=NULL;}}$host=empty($config['socket'])?$config['host'].(empty($config['port'])?'':':'.$config['port']):$host=':'.$config['socket'];$this->connection=empty($config['persistent'])?@mysqli_connect($host,$config['username'],$config['password']):@mysqli_pconnect($host,$config['username'],$config['password']);$this->select_db($config['database']);}if(!$this->is_connected()){throw new \System\Error\Database('Could not connect to database "'.$config['database'].'" for following reasons.');}if(isset($config['charset'])){$ok=FALSE;if(function_exists('mysql_set_charset')){$ok=@mysqli_set_charset($config['charset'],$this->connection);}!$ok&&$this->query("SET NAMES '$config[charset]'");}if(isset($config['sqlmode'])){$this->query("SET sql_mode='$config[sqlmode]'");}$this->query("SET time_zone='".date('P')."'");$this->buffered=empty($config['unbuffered']);}private function select_db($name){if($this->connection->select_db($name)){$this->db_selected=true;}else throw new \System\Error\Database('Could select database "'.$name.'". Does it exist?');}public function disconnect(){mysqli_close($this->connection);}public function query($sql){$res=$this->connection->query($sql);if($this->connection->errno){throw new \System\Error\Database(mysqli_error($this->connection),mysqli_errno($this->connection),$sql);}return new \System\Database\Result($res);}public function count($sql){$result=$this->query($sql);return \System\Query::first_val($result->fetch());}public function get_info(){$res=array();preg_match_all('#(.+?): +(\d+) *#',mysqli_info($this->connection),$matches,PREG_SET_ORDER);if(!preg_last_error()){foreach($matches as $m){$res[$m[1]]=(int) $m[2];}}return $res;}public function get_affected_rows(){return mysqli_affected_rows($this->connection);}public function get_insert_id(){return mysqli_insert_id($this->connection);}public function begin($savepoint=NULL){return $this->query($savepoint?"SAVEPOINT $savepoint":'START TRANSACTION');}public function commit($savepoint=NULL){return $this->query($savepoint?"RELEASE SAVEPOINT $savepoint":'COMMIT');}public function rollback($savepoint=NULL){return $this->query($savepoint?"ROLLBACK TO SAVEPOINT $savepoint":'ROLLBACK');}public function get_resource(){return is_resource($this->connection)?$this->connection:NULL;}public function escape($value,$type){switch($type){case \System\Database::TYPE_TEXT:if(!is_resource($this->connection)){throw new \System\Error\Database('Lost connection to server.');}return "'".mysql_real_escape_string($value,$this->connection)."'";case \System\Database::TYPE_BINARY:if(!is_resource($this->connection)){throw new \System\Error\Database('Lost connection to server.');}return "_binary'".mysql_real_escape_string($value,$this->connection)."'";case \System\Database::TYPE_IDENTIFIER:return '`'.str_replace('`','``',$value).'`';default:throw new \System\Error\Argument('Unsupported type: '.$type);}}public function escape_string($value){if($this->is_connected())return $this->connection->real_escape_string($value);throw new \System\Error\Database('Lost connection to server.');}public function escape_like($value,$pos){$value=addcslashes(str_replace('\\','\\\\',$value),"\x00\n\r\\'%_");return($pos<=0?"'%":"'").$value.($pos>=0?"%'":"'");}public function __destruct(){$this->autoFree&&$this->get_result_resource()&&$this->free();}public function get_result_resource(){$this->autoFree=FALSE;return@$this->resultSet->type===NULL?NULL:$this->resultSet;}public function get_row_count(){if(!$this->buffered){throw new \System\Error\Development('Row count is not available for unbuffered queries.');}return mysqli_num_rows($this->resultSet);}public function fetch($assoc=MYSQL_ASSOC){return mysqli_fetch_array($this->resultSet,$assoc?MYSQL_ASSOC:MYSQL_NUM);}public function seek($row){if(!$this->buffered){throw new \System\Error\Development('Cannot seek an unbuffered result set.');}return mysqli_data_seek($this->resultSet,$row);}public function free(){mysqli_free_result($this->resultSet);$this->resultSet=NULL;}public function get_result_columns(){$count=mysqli_num_fields($this->resultSet);$columns=array();for($i=0;$i<$count;$i++){$row=(array) mysqli_fetch_field($this->resultSet,$i);$columns[]=array('name'=>$row['name'],'table'=>$row['table'],'fullname'=>$row['table']?$row['table'].'.'.$row['name']:$row['name'],'nativetype'=>strtoupper($row['type']),'vendor'=>$row,);}return $columns;}public function create_database(){if($this->is_connected()){$this->query("CREATE DATABASE ".$this->config['database']);}else throw new \System\Error\Database(sprintf("Not connected to any server. Cannot create database %s",$this->config['database']));}public function is_connected(){return is_object($this->connection);}public function has_database(){return $this->db_selected;}public function is_ready(){return $this->is_connected()&&$this->has_database();}}} namespace System\Database\Driver{interface DriverInterface{public function connect(array&$config);public function disconnect();public function get_info();public function get_affected_rows();public function get_insert_id();public function begin();public function commit();public function rollback();public function get_resource();public function escape($value,$type);public function escape_like($value,$pos);public function get_row_count();public function fetch();}} namespace System\Database{class Result{private $res;private $free=true;private $first=false;public function __construct($resource){$this->res=is_object($resource)&&get_class($resource)=='mysqli_result'?$resource:null;}public function fetch(){$result=array();if($this->res!==null){$result=$this->res->fetch_assoc();}$this->free&&$this->res->free();return $result;}public function fetch_assoc($key=null,$value=null){$result=array();if($this->res!==null){while($data=$this->res->fetch_assoc()){$d=is_null($value)?$data:$data[$value];if(is_null($key)){$result[]=$d;}else{$result[$data[$key]]=$d;}if($this->first)break;}}$this->first&&$result=$result[0];$this->free&&$this->res->free();return $result;}public function fetch_model($model,$key=null){if(!is_string($model))throw new \System\Error\Argument('Model name must be a string',$model);$result=array();if($this->res!==null){while($data=$this->res->fetch_assoc()){if(is_null($key)){$result[]=new $model($data);}else{$result[$data[$key]]=new $model($data);}if($this->first)break;}}$this->first&&$result=$result[0];$this->free&&$this->res->free();return $result;}public function&nofree(){$this->free=false;return $this;}public function&first(){$this->first=true;return $this;}}} namespace System{class Setup{private static $step='name';public static function init(){\System\Router::update_rewrite();\System\Output::set_template('pwf/setup');}public static function run(){if(method_exists('System\Setup',self::$step)){$method=self::$step;return self::$method();}}public static function set_step($step_name){return self::$step=$step_name;}public static function name(){$f=new \System\Form(array("heading"=>'Purple Web Framework setup',"desc"=>'This is your first run of pwf. Setup helps to fill basic configuration needed to run PWF. Fill in the required information and press save. You can edit settings in directory /etc/conf.d/{environment}. Default environment is "dev".',));$f->label('Basic site information');$f->input_text('name','Site name',true);$f->group_end();$f->label('Database information');$f->input(array("name"=>'database_ident',"label"=>l('Identificator'),"required"=>true,"value"=>'pwf',"type"=>'text',"info"=>l('System identificator for this database'),));$f->input(array("type"=>'select',"name"=>'database_driver',"label"=>l('Database driver'),"required"=>true,"info"=>l('Type of database. You will most usually use MySQL here.'),"options"=>array("MySQLi"=>'mysqli',"PostgreSQL"=>'postgre',),));$f->input(array("name"=>'database_host',"label"=>l('Host name'),"required"=>true,"value"=>'localhost',"type"=>'text',"info"=>l('Public hostname or IP address of machine where your database will be located'),));$f->input(array("name"=>'database_name',"label"=>l('Database name'),"required"=>true,"value"=>'pwf',"type"=>'text',"info"=>l('How will you name your database'),));$f->input(array("name"=>'database_user',"label"=>l('User name'),"required"=>true,"value"=>'username',"type"=>'text',"info"=>l('User name used to access database'),));$f->input(array("name"=>'database_pass',"label"=>l('Password'),"required"=>true,"value"=>'password',"type"=>'text',"info"=>l('Password used to access database'),));$f->input(array("name"=>'database_lazy',"label"=>l('Lazy connect'),"checked"=>true,"type"=>'checkbox',"info"=>l('The database driver will not connect until a query is sent'),));$f->input(array("name"=>'database_persistent',"label"=>l('Persistent connection'),"type"=>'checkbox',"info"=>l('The database driver will open a persistent connection'),));$f->submit('Save configuration');if($f->passed()){$d=$f->get_data();$settings=array("database"=>array("ident"=>$d['database_ident'],"driver"=>$d['database_driver'],"database"=>$d['database_name'],"host"=>$d['database_host'],"username"=>$d['database_user'],"password"=>$d['database_pass'],"lazy"=>$d['database_lazy'],"persistent"=>$d['database_persistent'],),"seo"=>array("title"=>$d['name'],),);try{Database::connect($settings['database'],$settings['database']['ident']);}catch(\System\Error\Database $e){}if(!Database::is_ready($settings['database']['ident'])){try{$instance=Database::get_db($d['database_ident']);$instance->create_database();Database::connect($settings['database'],$settings['database']['ident']);}catch(\System\Error $e){v($e);exit;}}if(Database::is_ready($settings['database']['ident'])){self::save($settings);$output=shell_exec("bin/db init");}else{$f->report_error('database_name','Could not connect to database');$f->out();}}else{$f->out();}}private static function save(array $data){foreach(array('driver','database','host','username','password','lazy')as $key){cfgs(array('database','list',$data['database']['ident'],$key),$data['database'][$key]);}cfgs(array('database','list',$data['database']['ident'],'charset'),'utf8');cfgs(array('database','list',$data['database']['ident'],'is_yawf_home'),true);cfgs(array('database','default'),$data['database']['ident']);cfgs(array('database','connect'),array($data['database']['ident']));cfgs(array('default','title'),$data['seo']['title']);\System\Settings::save('database');\System\Settings::save('default');self::lock();self::finish();}private static function no_pages(){echo '<h1>'.l('There are no routes').'</h1>';echo '<p>'.l('Setup has detected that there are no pages. Please define some pages using godmode utility or manually in file "/etc/conf.d/pages.json".').'</p>';echo '<p>'.l('It is recommended to checkout santa package manager first to download some addons. Also - did you create database yet?').'</p>';}protected static function lock(){\System\File::put(ROOT.\System\Settings::DIR_CONF_ALL.'/install.lock',time());}protected static function finish(){\Tag::h1(array("content"=>l('Finished!')));\Tag::div(array("content"=>array(\Tag::p(array("content"=>sprintf(l('Your system should be ready to work. Check out your \'%s\' directory for other settings.'),ROOT.\System\Settings::DIR_CONF_DIST),"output"=>false,)),\Tag::p(array("output"=>false,"content"=>sprintf(l('Your next step could be installing modules via \'santa\' located in \'%s\''),ROOT.\Santa\Package::PATH_BIN),)),)));}}} namespace System{class Http{const NO_RESPONSE=0;const OK=200;const MOVED_PERMANENTLY=301;const FOUND=302;const SEE_OTHER=303;const TEMPORARY_REDIRECT=307;const FORBIDDEN=403;const PAGE_NOT_FOUND=404;const INTERNAL_SERVER_ERROR=500;private static $headers=array(self::OK=>"HTTP/1.1 200 OK",self::MOVED_PERMANENTLY=>"HTTP/1.1 301 Moved Permanently",self::FOUND=>"HTTP/1.1 302 Found",self::SEE_OTHER=>"HTTP/1.1 303 See Other",self::TEMPORARY_REDIRECT=>"HTTP/1.1 307 Temporary Redirect",self::FORBIDDEN=>"HTTP/1.1 403 Forbidden",self::PAGE_NOT_FOUND=>"HTTP/1.1 404 Page Not Found",self::INTERNAL_SERVER_ERROR=>"HTTP/1.1 500 Internal Server Error",);public static function get_header($num){if(isset(self::$headers[$num])){return self::$headers[$num];}else throw new \System\Error\Argument(sprintf('Requested http header "%s" does not exist.',$num));}public static function redirect($url,$code=self::FOUND){if(!\System\Status::on_cli()){self::save_referer();session_write_close();header(\System\Http::get_header($code));header("Location: ".$url);}else throw new \System\Error\Format(stprintf('Cannot redirect to "%s" while on console.',$r['url']));exit(0);}public static function save_referer(){$_SESSION['referer']=$_SERVER['REQUEST_URI'];}}} namespace System{class Text extends \System\Model\Database{static $attrs=array("name"=>array('varchar'),"text"=>array('text'),"visible"=>array('bool'),);}} namespace System\Minifier{class Styles{public static function minify($css,$options=array()){$obj=new self($options);return $obj->_process($css);}protected $_options=null;protected $_inHack=false;private function __construct($options){$this->_options=$options;}protected function _process($css){$css=str_replace("\r\n","\n",$css);$css=preg_replace('@>/\\*\\s*\\*/@','>/*keep*/',$css);$css=preg_replace('@/\\*\\s*\\*/\\s*:@','/*keep*/:',$css);$css=preg_replace('@:\\s*/\\*\\s*\\*/@',':/*keep*/',$css);$css=preg_replace_callback('@\\s*/\\*([\\s\\S]*?)\\*/\\s*@',array($this,'_commentCB'),$css);$css=preg_replace('/\\s*{\\s*/','{',$css);$css=preg_replace('/;?\\s*}\\s*/','}',$css);$css=preg_replace('/\\s*;\\s*/',';',$css);$css=preg_replace('/url\\(\\s*([^\\)]+?)\\s*\\)/x','url($1)',$css);$css=preg_replace('/\\s*([{;])\\s*([\\*_]?[\\w\\-]+)\\s*:\\s*(\\b|[#\'"-])/x','$1$2:$3',$css);$css=preg_replace_callback('/(?:\\s*[^~>+,\\s]+\\s*[,>+~])+\\s*[^~>+,\\s]+{/x',array($this,'_selectorsCB'),$css);$css=preg_replace('/([^=])#([a-f\\d])\\2([a-f\\d])\\3([a-f\\d])\\4([\\s;\\}])/i','$1#$2$3$4$5',$css);$css=preg_replace_callback('/font-family:([^;}]+)([;}])/',array($this,'_fontFamilyCB'),$css);$css=preg_replace('/@import\\s+url/','@import url',$css);$css=preg_replace('/[ \\t]*\\n+\\s*/',"\n",$css);$css=preg_replace('/([\\w#\\.\\*]+)\\s+([\\w#\\.\\*]+){/',"$1\n$2{",$css);$css=preg_replace('/((?:padding|margin|border|outline):\\d+(?:px|em)?)\\s+/x',"$1\n",$css);$css=preg_replace('/:first-l(etter|ine)\\{/',':first-l$1 {',$css);$css=str_replace("\n",' ',$css);return trim($css);}protected function _selectorsCB($m){return preg_replace('/\\s*([,>+~])\\s*/','$1',$m[0]);}protected function _commentCB($m){$hasSurroundingWs=(trim($m[0])!==$m[1]);$m=$m[1];if($m==='keep')return '/**/';if($m==='" "'){return '/*" "*/';}if(preg_match('@";\\}\\s*\\}/\\*\\s+@',$m)){return '/*";}}/* */';}if($this->_inHack){if(preg_match('@^/\\s*(\\S[\\s\\S]+?)\\s*/\\*@x',$m,$n)){$this->_inHack=false;return"/*/{$n[1]}/**/";}}if(substr($m,-1)==='\\'){$this->_inHack=true;return '/*\\*/';}if($m!==''&&$m[0]==='/'){$this->_inHack=true;return '/*/*/';}if($this->_inHack){$this->_inHack=false;return '/**/';}return $hasSurroundingWs?' ':'';}protected function _fontFamilyCB($m){$pieces=preg_split('/(\'[^\']+\'|"[^"]+")/',$m[1],null,PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);$out='font-family:';while(null!==($piece=array_shift($pieces))){if($piece[0]!=='"'&&$piece[0]!=="'"){$piece=preg_replace('/\\s+/',' ',$piece);$piece=preg_replace('/\\s?,\\s?/',',',$piece);}$out.=$piece;}return $out.$m[2];}}} namespace System\Minifier{class Scripts{protected $input;protected $index=0;protected $a='';protected $b='';protected $c;protected $options;static protected $defaultOptions=array('flaggedComments'=>false);static protected $jshrink;static public function minify($js,$options=array()){try{ob_start();$currentOptions=array_merge(self::$defaultOptions,$options);if(!isset(self::$jshrink))self::$jshrink=new self();self::$jshrink->breakdownScript($js,$currentOptions);$content=ob_get_clean();return $content;}catch(Exception $e){if(isset(self::$jshrink))self::$jshrink->clean();ob_end_clean();throw $e;}}protected function breakdownScript($js,$currentOptions){$this->clean();$this->options=$currentOptions;$js=str_replace("\r\n","\n",$js);$this->input=str_replace("\r","\n",$js);$this->a=$this->getReal();while(strlen($this->a)>1){echo $this->a;$this->a=$this->getReal();}$this->b=$this->getReal();while($this->a!==false&&!is_null($this->a)&&$this->a!==''){if(strlen($this->b)>1){echo $this->a.$this->b;$this->a=$this->getReal();$this->b=$this->getReal();continue;}switch($this->a){case "\n":if(strpos('(-+{[@',$this->b)!==false){echo $this->a;$this->saveString();break;}if($this->b===' ')break;case ' ':if(self::isAlphaNumeric($this->b))echo $this->a;$this->saveString();break;default:switch($this->b){case "\n":if(strpos('}])+-"\'',$this->a)!==false){echo $this->a;$this->saveString();break;}else{if(self::isAlphaNumeric($this->a)){echo $this->a;$this->saveString();}}break;case ' ':if(!self::isAlphaNumeric($this->a))break;default:if($this->a=='/'&&($this->b=='\''||$this->b=='"')){$this->saveRegex();continue;}echo $this->a;$this->saveString();break;}}$this->b=$this->getReal();if(($this->b=='/'&&strpos('(,=:[!&|?',$this->a)!==false))$this->saveRegex();}$this->clean();}protected function getChar(){if(isset($this->c)){$char=$this->c;unset($this->c);}else{$tchar=substr($this->input,$this->index,1);if(isset($tchar)&&$tchar!==false){$char=$tchar;$this->index++;}else{return false;}}if($char!=="\n"&&ord($char)<32)return ' ';return $char;}protected function getReal(){$startIndex=$this->index;$char=$this->getChar();if($char=='/'){$this->c=$this->getChar();if($this->c=='/'){$thirdCommentString=substr($this->input,$this->index,1);$char=$this->getNext("\n");if($thirdCommentString=='@'){$endPoint=($this->index)-$startIndex;unset($this->c);$char="\n".substr($this->input,$startIndex,$endPoint);}else{$char=$this->getChar();$char=$this->getChar();}}elseif($this->c=='*'){$this->getChar();$thirdCommentString=$this->getChar();if($thirdCommentString=='@'){$this->index=$this->index-2;return '/';}elseif($this->getNext('*/')){$this->getChar();$this->getChar();$char=$this->getChar();if($this->options['flaggedComments']&&$thirdCommentString=='!'){$endPoint=($this->index-1)-$startIndex;echo "\n".substr($this->input,$startIndex,$endPoint)."\n";}}else{$char=false;}if($char===false)throw new \System\Error\Format('Stray comment. '.$this->index);if(isset($this->c))unset($this->c);}}return $char;}protected function getNext($string){$pos=strpos($this->input,$string,$this->index);if($pos===false)return false;$this->index=$pos;return substr($this->input,$this->index,1);}protected function saveString(){$this->a=$this->b;if($this->a=="'"||$this->a=='"'){$stringType=$this->a;while(1){echo $this->a;$this->a=$this->getChar();switch($this->a){case $stringType:break 2;case "\n":throw new \System\Error\Format('Unclosed string. '.$this->index);break;case '\\':echo $this->a;$this->a=$this->getChar();}}}}protected function saveRegex(){echo $this->a.$this->b;while(($this->a=$this->getChar())!==false){if($this->a=='/')break;if($this->a=='\\'){echo $this->a;$this->a=$this->getChar();}if($this->a=="\n")throw new \System\Error\Format('Stray regex pattern. '.$this->index);echo $this->a;}$this->b=$this->getReal();}protected function clean(){unset($this->input);$this->index=0;$this->a=$this->b='';unset($this->c);unset($this->options);}static protected function isAlphaNumeric($char){return preg_match('/^[\w\$]$/',$char)===1||$char=='/';}}} namespace System{class Locales{const DIR='/etc/locales';const DIR_MESSAGES='/messages.d';const DIR_MODULES='/modules.d';const ENCODING='UTF-8';const LANG_DEFAULT='en_US';const KEY_MESSAGES='messages';private static $lang;private static $messages=array();private static $files=array();public static function init(){mb_language('uni');mb_internal_encoding(self::ENCODING);date_default_timezone_set(cfg('locales','timezone'));self::set_locale();}public static function get_loaded_files(){return self::$files;}private static function set_locale(){$lang=self::get_lang();$lang_parts=explode('_',$lang);if(isset($lang_parts[1])){$lang_parts[1]=strtoupper($lang_parts[1]);}$lang=implode('_',$lang_parts);setlocale(LC_ALL,self::get_lang().'.'.self::ENCODING);}public static function get($str,$force_lang=NULL){$lang=$force_lang?$force_lang:self::get_lang();$src=&self::$messages[$lang];if(strpos($str,':')){list($module,$str)=explode(':',$str,2);self::load($module,$lang);$src=&self::$messages[$lang][$module];}return isset($src[$str])?$src[$str]:$str;}public static function get_all_messages($lang=null){return self::$messages[is_null($lang)?self::get_lang():$lang];}public static function translate($str,$force_lang=NULL){$lang=is_null($force_lang)?self::get_lang():$force_lang;self::load_messages($lang);return isset(self::$messages[$lang][self::KEY_MESSAGES][$str])?self::$messages[$lang][self::KEY_MESSAGES][$str]:$str;}public static function translate_and_replace($str,array $data){unset($data[0]);return vsprintf(self::translate($str),$data);}private static function load($module,$force_lang=NULL){if($module===self::KEY_MESSAGES){throw new \System\Error\Argument(sprintf('Locales module must not be named %s',$module));}$lang=$force_lang?$force_lang:self::get_lang();if(!isset(self::$messages[$lang][$module])){if(!file_exists($f=($p=ROOT.self::DIR.'/'.$lang.self::DIR_MODULES.'/'.$module).'.json')){$f=$p.'.core.json';}self::$messages[$lang][$module]=\System\Json::read($f);self::$files[$lang][]=str_replace(ROOT,'',$f);if(empty(self::$messages[$lang][$module])){Status::report('error',sprintf('Locales module %s/%s is empty or broken',$lang,$module));}}}static function get_lang(){if(self::$lang){return self::$lang;}else{if(Input::get('lang')){return self::set_lang(Input::get('lang'));}elseif(any($_SESSION['lang'])){return $_SESSION['lang'];}else{try{return cfg("locales",'default_lang');}catch(\System\Error $e){return self::LANG_DEFAULT;}}}}static function set_lang($lang){$_SESSION['lang']=self::$lang=$lang;return self::$lang;}public static function translate_date($date,$hard=false){static $find,$replace_std,$replace_hard;if(!isset($find)){$find=array_merge(Locales::get('date:days',self::LANG_DEFAULT),Locales::get('date:days-short',self::LANG_DEFAULT),Locales::get('date:months',self::LANG_DEFAULT),Locales::get('date:months-short',self::LANG_DEFAULT));$replace_std=array_merge(Locales::get('date:days'),Locales::get('date:days-short'),Locales::get('date:months'),Locales::get('date:months-short'));$replace_hard=array_merge(Locales::get('date:days'),Locales::get('date:days-short'),Locales::get('date:months-date'),Locales::get('date:months-short'));}if($hard){$replace=&$replace_std;}else{$replace=&$replace_hard;}$date=str_replace($find,$replace,strtolower($date));return $date;}private static function load_messages($lang){($d=!isset(self::$messages[$lang][self::KEY_MESSAGES]))&&\System\Json::read_dist(ROOT.self::DIR.'/'.$lang.self::DIR_MESSAGES,self::$messages[$lang][self::KEY_MESSAGES],false,self::$files[$lang]);}public static function strlen_binary($str){$strlen_var=strlen($str);$d=0;for($c=0;$c<$strlen_var;++$c){$ord_var_c=ord($str{$d});switch(true){case(($ord_var_c>=0x20)&&($ord_var_c<=0x7F)):$d++;break;case(($ord_var_c&0xE0)==0xC0):$d+=2;break;case(($ord_var_c&0xF0)==0xE0):$d+=3;break;case(($ord_var_c&0xF8)==0xF0):$d+=4;break;case(($ord_var_c&0xFC)==0xF8):$d+=5;break;case(($ord_var_c&0xFE)==0xFC):$d+=6;break;default:$d++;}}return $d;}}} namespace System{class Template{const TEMPLATES_DIR='/lib/template';const PARTIALS_DIR='/lib/template/partial';const DIR_ICONS='/share/icons';const DEFAULT_SLOT='zzTop';const DEFAULT_ICON_THEME='default';const CASE_UPPER=MB_CASE_UPPER;const CASE_LOWER=MB_CASE_LOWER;private static $default_time_format='D, d M Y G:i:s e';private static $heading_level=1;private static $heading_section_level=1;private static $styles=array(array("name"=>'default',"type"=>'text/css'),);private static $units=array("information"=>array("B","kiB","MiB","GiB","TiB","PiB"),);public static function icon($icon,$size='32',array $attrs=array()){@list($width,$height)=explode('x',$size,2);!$height&&$height=$width;$icon=($icon instanceof Image)?$icon->thumb(intval($width),intval($height),!empty($attrs['crop'])):self::DIR_ICONS.'/'.$size.'/'.$icon;return '<span class="icon isize-'.$size.'" '.\Tag::html_attrs('span',$attrs).'style="background-image:url('.$icon.'); width:'.$width.'px; height:'.$height.'px"></span>';}public static function get_filename($name,$format=null,$lang=null){$format=='xhtml'&&$format='html';return $name.($lang?'.'.$lang.'.':'').($format?'.'.$format:'').'.php';}public static function partial($name,array $locals=array()){$temp=self::get_name($name);foreach((array) $locals as $k=>$v){$k=str_replace('-','_',$k);$$k=$v;}if(file_exists($temp)){include($temp);}else throw new \System\Error\File(sprintf('Partial "%s" not found.',$name));}public static function insert($name,$locals=array(),$slot=self::DEFAULT_SLOT){Output::add_template(array("name"=>$name,"locals"=>$locals),$slot);}public static function get_name($name){$base=ROOT.self::PARTIALS_DIR.'/';$f='';file_exists($f=$base.self::get_filename($name,Output::get_format(),\System\Locales::get_lang()))||file_exists($f=$base.self::get_filename($name,Output::get_format()))||file_exists($f=$base.self::get_filename($name))||$f='';return $f;}public static function meta_out(){Output::content_for("meta",array("name"=>'generator',"content"=>Output::introduce()));Output::content_for("meta",array("name"=>'generated-at',"content"=>self::format_date(null,'std')));Output::content_for("meta",array("http-equiv"=>'content-type',"content"=>Output::get_format(true).'; charset=utf-8'));$meta=Output::get_content_from("meta");foreach($meta as $name=>$value){if($name&&$value){Output::content_for("head",'<meta'.\Tag::html_attrs('meta',$value).' />');}}}public static function scripts_out(){$cont=Output::get_content_from("scripts");if(!is_null($cont)){Output::content_for("head",'<script type="text/javascript" src="/share/scripts/'.$cont.'"></script>');}}public static function styles_out(){$cont=Output::get_content_from("styles");if(!is_null($cont)){Output::content_for("head",'<link type="text/css" rel="stylesheet" href="/share/styles/'.$cont.'" />');}}public static function title_out(){Output::content_for("head",'<title>'.Output::get_title().'</title>');}public static function head_out(){self::meta_out();self::title_out();self::scripts_out();self::styles_out();}public static function link_for($label,$url,$object=array()){if(!is_array($object)){$object=array("no-tag"=>!!$object);}!isset($object['no-tag'])&&$object['no-tag']=false;!isset($object['strict'])&&$object['strict']=false;!isset($object['no-activation'])&&$object['no-activation']=false;!isset($object['class'])&&$object['class']='';$path=Page::get_path();clear_this_url($url);clear_this_url($path);$object['class']=explode(' ',$object['class']);$is_root=$url=='/'&&$path=='/';$is_selected=$url&&!$object['no-activation']&&(($object['strict']&&($url==$path||$url==$path.'/'))||(!$object['strict']&&strpos($path,$url)===0));if($is_root||($url!='/'&&$is_selected)){$object['class'][]='link-selected';}$object['class']=implode(' ',$object['class']);return(($object['no-tag']&&$path==$url)?'<span class="link'.($object['class']?' '.$object['class']:NULL).'">':'<a href="'.$url.'"'.\Tag::html_attrs('a',$object).'>').$label.(($object['no-tag']&&$path==$url)?'</span>':'</a>');}public static function icon_for($icon,$size=32,$url,$label=NULL,$object=array()){def($object['label'],'');def($object['label_left'],false);$object['title']=$label;return self::link_for(($object['label_left']&&$object['label']?self::label_text($object['label']):'').self::icon($icon,$size).(!$object['label_left']&&$object['label']?self::label_text($object['label']):''),$url,$object);}public static function label_for($icon,$size=32,$label,$url,$object=array()){$object['label']=$label;return \System\Template::icon_for($icon,$size,$url,$label,$object);}public static function label_right_for($icon,$size=32,$label,$url,$object=array()){$object['label']=$label;$object['label_left']=true;return \System\Template::icon_for($icon,$size,$url,$label,$object);}public static function label_text($label){return '<span class="lt">'.$label.'</span>';}public static function heading($label,$save_level=true,$level=NULL){if($level===NULL){$level=self::$heading_level+1;}if($save_level){self::set_heading_level($level);if($level==1){self::$heading_section_level=2;}}$tag=($level>6)?'strong':'h'.$level;$attrs=array("id"=>\System\Model\Database::gen_seoname($label));return self::tag($tag,$label,$attrs);}public static function tag($tag,$content='',array $attrs=array()){return '<'.$tag.' '.\Tag::html_attrs($tag,$attrs).'>'.$content.'</'.$tag.'>';}public static function section_heading($label,$level=NULL){if($level===NULL){$level=self::$heading_section_level==1?self::$heading_section_level++:self::$heading_section_level;}self::set_heading_level($level);return heading($label,true,$level);}public static function get_heading_level(){return self::$heading_level;}public static function set_heading_level($lvl){return self::$heading_level=intval($lvl);}public static function set_heading_section_level($lvl){return self::$heading_section_level=intval($lvl);}public static function format_date($date,$format='std'){if(is_null($date)){$date=new \DateTime();}if($date instanceof \DateTime){$d=$date->format(\System\Locales::get('date:'.$format));return strpos($format,'html5')===0?$d:\System\Locales::translate_date($d);}elseif(is_numeric($date)){$d=date(\System\Locales::get('date:'.$format),$date);return strpos($format,'html5')===0?$d:\System\Locales::translate_date($d);}else{return $date;}}public static function get_css_color($color){if($color instanceof ColorModel){$c=$color->get_color();}elseif(is_array($color)){$c=$color;}else{throw new \System\Error\Argument("Argument 0 must be instance of System\Model\Color or set of color composition");}return is_null($c[3])?'rgb('.$c[0].','.$c[1].','.$c[2].')':'rgba('.$c[0].','.$c[1].','.$c[2].','.str_replace(",",".",floatval($c[3])).')';}public static function get_color_container($color){if($color instanceof ColorModel){$c=$color->get_color();}elseif(is_array($color)){$c=$color;}else{throw new \System\Error\Argument("Argument 0 must be instance of System\Model\Color or set of color composition");}return '<span class="color-container" style="background-color:'.self::get_css_color($c).'"></span>';}static function convert_value($type,$value){switch($type){case 'information':$step=1024;break;default:$step=1000;break;}for($i=0;$value>=1024;$i++){$value/=1024;}return round($value,2)." ".self::$units[$type][$i];}static function get_icon_theme(){$theme=cfg('icons','theme');return $theme?$theme:self::DEFAULT_ICON_THEME;}public static function to_html($value){if(is_object($value)&&method_exists($value,'to_html')){return $value->to_html();}if($value instanceof \DateTime){return format_date($value,'human');}if($value instanceof \System\Image){return \Tag::img(array("src"=>$value->thumb(100,100),"alt"=>'',"output"=>false,));}if(gettype($value)=='boolean'){$value=$value?'yes':'no';return \Tag::span(array("output"=>false,"content"=>l($value),"class"=>$value,));}if(gettype($value)=='float'){return number_format($value,5);}return $value;}}} namespace System{class Gps{const GMAP_TYPE_ROADMAP='roadmap';const GMAP_TYPE_SATELLITE='satellite';const GMAP_TYPE_HYBRID='hybrid';const GMAP_TYPE_TERRAIN='terrain';const MAP_WIDTH_DEFAULT=200;const MAP_HEIGHT_DEFAULT=200;private $data=array("lat"=>null,"lng"=>null);public function lat($val=null){!is_null($val)&&$this->data['lat']=floatval($val);return $this->data['lat'];}public function lng($val=null){!is_null($val)&&$this->data['lng']=floatval($val);return $this->data['lng'];}public function latf(){return $this->format($this->lat());}public function lngf(){return $this->format($this->lng());}private function format($num){return number_format($num,20,'.','');}public function gps(){return $this->latf().','.$this->lngf();}public function to_json(){return json_encode($this->get_data());}public function to_sql(){$data=array($this->lat(),$this->lng());return 'GeomFromText(\'POINT('.\System\Database::escape($data[0]).' '.\System\Database::escape($data[1]).')\')';}public function get_data(){return $this->data;}public static function from_latlng($lat,$lng){return self::from_array(array("lat"=>$lat,"lng"=>$lng));}public static function from_json($str){return self::from_array(json_decode($str,true));}public static function from_sql($str){$str=substr($str,strlen('POINT('));$str=substr($str,0,strlen($str)-1);$str=explode(' ',$str);return self::from_array(array("lat"=>$str[0],"lng"=>$str[1]));}public static function from_array(array $data){$item=new self();$item->lat($data['lat']);$item->lng($data['lng']);return $item;}public function map($w=self::MAP_WIDTH_DEFAULT,$h=self::MAP_HEIGHT_DEFAULT,$type=self::GMAP_TYPE_ROADMAP){return 'http://maps.googleapis.com/maps/api/staticmap?sensor=false&amp;size='.$w.'x'.$h.'&amp;maptype='.$type.'&amp;markers='.$this->gps();}public function map_link(){return 'http://maps.google.com/maps?q='.$this->gps();}public function to_html($w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return \Stag::img(array("src"=>$this->map($w,$h,$type),"alt"=>''));}}} namespace System{class Json{private static $errors=array(JSON_ERROR_DEPTH=>'The maximum JSON stack depth has been exceeded',JSON_ERROR_STATE_MISMATCH=>'Invalid or malformed JSON string',JSON_ERROR_CTRL_CHAR=>'JSON control character error, possibly incorrectly encoded',JSON_ERROR_SYNTAX=>'Syntax error in JSON string',JSON_ERROR_UTF8=>'Malformed UTF-8 characters in JSON string, possibly incorrectly encoded',);public static function decode($str,$silent=false){$json=json_decode($str,true);if(!$silent&&($err=json_last_error())!==JSON_ERROR_NONE&&cfg('dev','debug')){throw new \System\Error\Format(self::get_error($err),$str);}return $json;}public static function read($path,$silent=false){return self::decode(\System\File::read($path,$silent));}public static function read_dist($dir_dist,&$temp=array(),$assoc_keys=false,&$files=array()){if(\System\Directory::check($dir_dist,false)){!$assoc_keys&&($temp=array());$dir=opendir($dir_dist);while($f=readdir($dir)){if(strpos($f,".")!==0&&strpos($f,".json")){list($mod)=explode(".",$f);$json=(array) self::decode(\System\File::read($dir_dist.'/'.$f));$files[]=str_replace(ROOT,'',$dir_dist.'/'.$f);if($assoc_keys){$temp[$mod]=$json;}else $temp=array_merge_recursive($temp,$json);}}closedir($dir);return $temp;}else throw new \System\Error\File(sprintf('Directory "%s" either does not exist or is not accessible.',$dir_dist));}private static function get_error($id){return isset(self::$errors[$id])?self::$errors[$id]:'Unknown JSON error.';}public static function json_humanize($json){$result='';$pos=0;$strLen=strlen($json);$prevChar='';$outOfQuotes=true;for($i=0;$i<=$strLen;$i++){$char=substr($json,$i,1);if($char=='"'&&$prevChar!='\\'){$outOfQuotes=!$outOfQuotes;}elseif(($char=='}'||$char==']')&&$outOfQuotes){$result.="\n";$pos--;for($j=0;$j<$pos;$j++)$result.="\t";}$result.=$char;if(($char==','||$char=='{'||$char=='[')&&$outOfQuotes){$result.="\n";if($char=='{'||$char=='[')$pos++;for($j=0;$j<$pos;$j++)$result.="\t";}$prevChar=$char;}return $result;}}} namespace System\User{class Info extends \System\Model\Database{static protected $attrs=array("id_system_user"=>array('int',"is_unsigned"=>true),"id_info_type"=>array('int',"is_unsigned"=>true),"content"=>array('varchar'),"visible"=>array('bool'),"deleted"=>array('bool'),);static protected $belongs_to=array("user"=>array("model"=>'\System\User'),);const TYPE_ABOUT=1;}} namespace System\User{class Setup extends \System\Model\Database{protected static $attrs=array("id_user"=>array('int',"is_unsigned"=>true),"value"=>array('varchar'),);protected static $belongs_to=array("owner"=>array("model"=>'\System\User'),"var"=>array("model"=>'\System\User\Setup\Variable',"cols"=>array('name'),"merge-model"=>true),);public static function save_all($uid,array $data){\Core\System\Query::simple_delete(self::$table,array("id_user"=>intval($uid)));if(empty($data)){return true;}$helper=new \Core\System\Query(array("table"=>self::$table,"cols"=>self::$attrs,));$date=new \DateTime();foreach($data as $vid=>$d){foreach((array) $d as $v){$helper->add_insert_data(array("id_user"=>intval($uid),"id_user_setup_var"=>intval($vid),"value"=>$v,"created_at"=>&$date,"updated_at"=>&$date));}}return!!$helper->insert();}public static function get_for_user($uid){$setup=array();$helper=get_all("\Core\User\Setup",array("id_user"=>intval($uid)),array());$helper->reset_cols();$helper->assoc_with_no_model();$helper->add_cols(array('id_user_setup_var','value'),"t0");$res=$helper->fetch();foreach($res as $set){if(!isset($setup[$set['id_user_setup_var']])){$setup[$set['id_user_setup_var']]=array();}$setup[$set['id_user_setup_var']][]=$set['value'];}return $setup;}}} namespace System\User{class Contact extends \System\Model\Database{const STD_EMAIL=1;const STD_MOBILE=2;const STD_WEBSITE=3;const STD_PHONE=4;const IM_XMPP_JABBER=5;const IM_XMPP_GTALK=6;const IM_AIM=7;const IM_ICQ=8;const IM_MSN=9;const IM_YAHOO=10;const SOCIAL_FACEBOOK=11;const SOCIAL_TWITTER=12;const SOCIAL_GOOGLE_PLUS=13;protected static $attrs=array("type"=>array('int',"is_unsigned"=>true,"options"=>array(self::STD_EMAIL=>'contact_type_email',self::STD_MOBILE=>'contact_type_mobile',self::STD_WEBSITE=>'contact_type_website',self::STD_PHONE=>'contact_type_phone',self::IM_XMPP_JABBER=>'contact_type_xmpp_jabber',self::IM_XMPP_GTALK=>'contact_type_xmpp_gtalk',self::IM_AIM=>'contact_type_aim',self::IM_ICQ=>'contact_type_icq',self::IM_MSN=>'contact_type_msn',self::IM_YAHOO=>'contact_type_yahoo',self::SOCIAL_FACEBOOK=>'contact_type_facebook',self::SOCIAL_TWITTER=>'contact_type_twitter',self::SOCIAL_GOOGLE_PLUS=>'contact_type_google_plus',)),"name"=>array('varchar'),"ident"=>array('varchar'),"visible"=>array('bool'),"public"=>array('bool'),);protected static $belongs_to=array("user"=>array("model"=>'\System\User',"is_natural"=>true),);private static $internal_types=array('email'=>self::STD_EMAIL,'mobile'=>self::STD_MOBILE,);}} namespace System\User{class Perm extends \System\Model\Database{static protected $attrs=array("id_system_user_group"=>array('int',"is_unsigned"=>true),"id_author"=>array('int',"is_unsigned"=>true),"type"=>array('varchar'),"trigger"=>array('varchar'),"public"=>array('bool'),);static protected $belongs_to=array("group"=>array("model"=>'\System\User\Group'),);}} namespace System\User{class Group extends \System\Model\Database{static protected $attrs=array("name"=>array('varchar'),);static protected $has_many=array("users"=>array("model"=>'\System\User',"is_bilinear"=>true),"rights"=>array("model"=>'\System\User\Perm'),);public function count_users(){return $this->users->count();}}} namespace System\User\Setup{class Category extends \System\Model\Database{protected static $attrs=array("order"=>array('int'),"name"=>array('varchar'),);protected static $has_many=array("vars"=>array("model"=>'\System\User\Setup\Variable'));}} namespace System\User\Setup{class Variable extends \System\Model\Database{protected static $attrs=array("name"=>array('varchar'),"type"=>array('varchar'),"options"=>array('json'),"use_select"=>array('bool'),"use_multi"=>array('bool'),);protected static $belongs_to=array("category"=>array("model"=>'\System\User\Setup\Category'),);private static $allowed_types=array();public static function get_allowed_types(){return self::$allowed_types;}public static function autoinit(){self::$allowed_types=array("bool"=>_('Zaškrtávací políčko'),"int"=>_('Číslo'),"string"=>_('Řetězec'),"set"=>_('Sada možností'),"enum"=>_('Výběr z možností'),);}}} namespace System{abstract class Cli{private static $width=60;private static $height=40;private static $term_colors=array('gray'=>"[1;30m",'light_red'=>"[1;31m",'light_green'=>"[1;32m",'yellow'=>"[1;33m",'light_blue'=>"[1;34m",'magenta'=>"[1;35m",'light_cyan'=>"[1;36m",'white'=>"[1;37m",'normal'=>"[0m",'black'=>"[0;30m",'red'=>"[0;31m",'green'=>"[0;32m",'brown'=>"[0;33m",'blue'=>"[0;34m",'cyan'=>"[0;36m",'bold'=>"[1m",'underscore'=>"[4m",'reverse'=>"[7m",);public static function term_color($text,$color="NORMAL"){$text=self::term_remove_color($text);$out=self::$term_colors[$color];$out==""&&$out="[0m";return chr(27).$out.$text.chr(27)."[0m";}public static function init(){self::checkout_console_size();}public static function term_remove_color($text){$text=preg_replace('/'.chr(27).'\[[0-9];[0-9]*\m?/','',$text);$text=preg_replace('/'.chr(27).'\[0\m/','',$text);return $text;}public static function checkout_console_size(){preg_match_all("/rows.([0-9]+);.columns.([0-9]+);/",strtolower(exec('stty -a |grep columns')),$output);if(sizeof($output)==3){self::$width=$output[2][0];self::$height=$output[1][0];}}public static function get_width(){return self::$width;}public static function get_height(){return self::$height;}public static function try_shell($cmd,&$output=null,&$exit_status=null){if(!($banned=preg_match('/(^|[,\ ])exec([,\ ]|$)/',ini_get('disable_functions')))){exec($cmd,$output,$exit_status);}return!$banned;}}} namespace System\Error{class NotFound extends \System\Error{const HTTP_STATUS=404;}} namespace System\Error{class Code extends \System\Error{}} namespace System\Error{class AccessDenied extends \System\Error{}} namespace System\Error{class Format extends \System\Error{}} namespace System\Error{class Model extends \System\Error{}} namespace System\Error{class Permissions extends \System\Error{}} namespace System\Error{class Connection extends \System\Error{}} namespace System\Error{class Offcom extends \System\Error{}} namespace System\Error{class Development extends \System\Error{}} namespace System\Error{class Config extends \System\Error{}} namespace System\Error{class Form extends \System\Error{}} namespace System\Error{class Wtf extends \System\Error{}} namespace System\Error{class File extends \System\Error{}} namespace System\Error{class Database extends \System\Error{function __construct(){$d=func_get_args();if(strpos(strtolower($d[0]),'duplicate')!==false||(isset($d[1])&&strpos(strtolower($d[1]),'duplicate')!==false)){$e='Cannot insert data because of duplicate unique key!';}elseif(strpos(strtolower($d[0]),'syntax')!==false){$e='Cannot run query because of syntax error.';}else{$e='Unhandled error';}parent::__construct('stack',$e,$d);}}} namespace System\Error{class Argument extends \System\Error{}} namespace System\Video{class Youtube{const URL_HOST='youtube.com';const URL_WATCH='watch?v={id}';const URL_EMBED='embed/{id}';const URL_PARSE='/^watch.*v\=([0-9a-zA-Z\-]+)/';const ID_PARSE='/^[0-9a-zA-Z\-]+$/';private $id;private function __construct($id){$this->id=$id;}public static function from_url($url){if(($s=strpos($url,self::URL_HOST))!==false){$url=substr($url,$s+strlen(self::URL_HOST)+1);$matches=array();if(preg_match(self::URL_PARSE,$url,$matches)&&isset($matches[1])){return self::from_id($matches[1]);}}return false;}public static function from_id($id){if(preg_match(self::ID_PARSE,$id)){return new self($id);}return false;}public function get_data(){return array("id"=>$this->id);}public function get_url(){return 'http://'.self::URL_HOST.'/'.stprintf(self::URL_WATCH,$this->get_data());}public function get_embed_url(){return 'http://'.self::URL_HOST.'/'.stprintf(self::URL_EMBED,$this->get_data());}public function embed(){return \Tag::iframe(array("class"=>'video video_yt',"src"=>$this->get_embed_url(),"frameborder"=>0,"allowfullscreen"=>true,"output"=>false,"close"=>true,));}public function to_sql(){return $this->id;}}} namespace System{class Init{public static function full(){self::bind_error_handlers();Input::init();Flow::init();Settings::init();Locales::init();Cache::init();Database::init();Output::init();}public static function basic(){self::bind_error_handlers();Input::init();Flow::init();Settings::init();Locales::init();}public static function low_level_devel(){if(file_exists(ROOT.'/lib/include/devel.php')){include ROOT.'/lib/include/devel.php';}}public static function session(){session_start();}public static function cli(){global $argv;$last=end($argv);$_SERVER['REQUEST_URI']=$last=='index.php'?'/':$last;php_sapi_name()!='cli'&&give_up("This program can be run only via PHP CLI !!");!class_exists("CLIOptions")&&give_up("Missing class 'CLIOptions' !!");!class_exists("CLICommands")&&give_up("Missing class 'CLICommands'!!");require_once ROOT."/lib/include/functions.cli.php";\CLIOptions::init();\CLIOptions::parse_options();require_once ROOT."/etc/init.d/core.php";Output::set_format('cli');$cmd=\CLIOptions::get('command');\CLICommands::$cmd();}public static function bind_error_handlers(){set_exception_handler(array("System\Status","catch_exception"));set_error_handler(array("System\Status","catch_error"));ini_set('log_errors',true);ini_set('display_errors',true);ini_set('html_errors',false);}}} namespace System{abstract class DataBus{static private $data=array();static private $modules=array();public static function get_data(){$sources=func_get_args();if(is_array($sources[0])){$sources=$sources[0];}$ret=array();foreach($sources as $s){if(isset(self::$data[$s])){$ret=array_merge($ret,(array) self::$data[$s]);}}return $ret;}public static function save_data(\System\Module&$module,&$data){self::$data[$module->get_id()]=&$data;}}} namespace System{abstract class Resource{const TYPE_SCRIPTS='scripts';const TYPE_STYLES='styles';const SYMBOL_NOESS='noess';const DIR_TMP='/var/cache';const SCRIPTS_DIR='/share/scripts';const SCRIPTS_STRING_NOT_FOUND='v("Jaffascript module not found: %s");';const STYLES_DIR='/share/styles';const STYLES_STRING_NOT_FOUND='/* Style module not found: %s */';const KEY_SUM='sum';const KEY_TYPE='type';const KEY_FOUND='found';const KEY_MISSING='missing';const KEY_DIR_FILES='modules';const KEY_DIR_CONTENT='content';const KEY_STRING_NOT_FOUND='not_found_string';const KEY_POSTFIXES='postfixes';const MAX_AGE=86400;private static $serial=null;private static $types=array(self::TYPE_SCRIPTS=>array(self::KEY_DIR_FILES=>self::SCRIPTS_DIR,self::KEY_STRING_NOT_FOUND=>self::SCRIPTS_STRING_NOT_FOUND,self::KEY_DIR_CONTENT=>'text/javascript',self::KEY_POSTFIXES=>array('js'),),self::TYPE_STYLES=>array(self::KEY_DIR_FILES=>self::STYLES_DIR,self::KEY_STRING_NOT_FOUND=>self::STYLES_STRING_NOT_FOUND,self::KEY_DIR_CONTENT=>'text/css',self::KEY_POSTFIXES=>array('css'),),);public static function request(){$info=self::get_type_info(\System\Input::get('type'));$modules=self::get_module_list($info['type'],\System\Input::get('modules'));if(any($modules)){$files=self::file_list($info[self::KEY_TYPE],$modules);$content=self::get_content($info,$files);self::send_header($info['type'],strlen($content));echo $content;}else throw new \System\Error\NotFound();}private static function get_content(array $info,array $files){try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if(!$debug&&file_exists($f=self::get_cache_path($info,$files[self::KEY_SUM]))){$content=\System\File::read($f);}else{ob_start();foreach($files[self::KEY_FOUND]as $file){include $file;}foreach($files[self::KEY_MISSING]as $file){echo sprintf($info[self::KEY_STRING_NOT_FOUND],$file);}$content=\System\Minifier::process($info['type'],ob_get_clean());\System\File::put(self::get_cache_path($info,$files[self::KEY_SUM]),$content);}return $content;}public static function file_list($type,array $modules=array()){$info=self::get_type_info($type);$found=array();$missing=array();if(is_dir(ROOT.$info[self::KEY_DIR_FILES])){foreach($modules as $module){if($module!==self::SYMBOL_NOESS){$mod_found=false;foreach($info[self::KEY_POSTFIXES]as $postfix){if(file_exists($p=ROOT.$info[self::KEY_DIR_FILES]."/".$module.'.'.$postfix)){$found[]=$p;$mod_found=true;break;}}if(!$mod_found){$missing[]=$module;}}}}return array(self::KEY_FOUND=>$found,self::KEY_MISSING=>$missing,self::KEY_SUM=>self::get_module_sum_from_list($modules),);}private static function get_cache_name(array $info,$sum){return $info['type'].'/'.$sum.(any($info[self::KEY_POSTFIXES])?'.'.($info[self::KEY_POSTFIXES][0]):'');}private static function get_cache_path(array $info,$sum){return ROOT.self::DIR_TMP.'/'.self::get_cache_name($info,$sum);}private static function get_module_sum_from_list(array $modules){return self::get_module_sum(implode(':',$modules));}private static function get_module_sum($str){return md5($str);}public static function get_module_list($type,$name){if(strpos($name,':')===0){$content=array_filter(explode(':',$name));self::resource_list_save($type,$content);$name=self::get_resource_list_name($content);redirect_now('/share/'.$type.'/'.self::get_resource_list_wget_name($type,$name),\System\Http::MOVED_PERMANENTLY);}else{if($list=\System\File::read($p=self::get_resource_list_path($type,self::strip_serial($name)),true)){return explode("\n",$list);}else return array();}}public static function get_type_info($type){if(array_key_exists($type,self::$types)){$info=self::$types[$type];$info[self::KEY_TYPE]=$type;return $info;}else throw new \System\Error\Argument('Resource of type "'.$type.'" does not exist.');}public static function send_header($type,$length){$info=self::get_type_info($type);header("HTTP/1.1 200 OK");header('Content-Type: '.$info['content']);header('Content-Length: '.$length);try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if(!$debug){header("Pragma: public,max-age=".self::MAX_AGE);header('Cache-Control: public');header('Expires: '.date(\DateTime::RFC1123,time()+self::MAX_AGE+rand(0,60)));header('Age: 0');}}public static function filter_output_content($type,&$content){if(is_array($content)){if(any($content)){self::resource_list_save($type,$content);$name=self::get_resource_list_name($content);$content=self::get_resource_list_wget_name($type,$name);}else $content=null;}}private static function resource_list_save($type,&$content){$content=array_unique($content);$name=self::get_resource_list_name($content);$file=self::get_resource_list_path($type,$name);if(!file_exists($file)){\System\File::put($file,implode(NL,$content));}}public static function get_resource_list_wget_name($type,$name){$postfix=self::get_type_postfix($type);return $name.'.'.self::get_serial().($postfix?'.'.$postfix:'');}private static function get_type_postfix($type){if(isset(self::$types[$type][self::KEY_POSTFIXES])){return first(self::$types[$type][self::KEY_POSTFIXES]);}else return false;}public static function get_resource_list_name(array $content){return md5(implode(':',$content));}public static function get_resource_list_path($type,$name){return ROOT.self::DIR_TMP.'/'.$type.'/'.$name.'.list';}public static function get_serial(){if(is_null(self::$serial)){try{$debug=cfg('dev','debug')&&cfg('dev','disable-serial');}catch(\System\Error $e){$debug=true;}if($debug){self::$serial=rand(0,PHP_INT_MAX);}else{self::$serial=cfg('cache','resource','serial');}}return self::$serial;}public static function strip_serial($name){return first(explode('.',$name));}}} namespace System{class Archive{const HEADER_BZ2="compress.bzip2://";const HEADER_GZ="compress.gzip://";static $types=array("raw","tar","tar.bz2","tar.gz","bz2","gz");static $msg_title="Práce s archivem dat";private $dirs=array();private $files=array();private $extract_path;private $path;private $data;private $type;private $fp;private $opts=array();function __construct($path){$this->type='raw';$this->path=$path;}public function get_path(){return $this->extract_path;}public static function from($type,$path,$tar=false){$method='read_'.$type;$tmp=new self($path);$tmp->$method($tar);return $tmp;}public function get_extract_path(){return $this->extract_path;}public function set_path($path){if($this->is_temp()){unlink($this->path);}$this->path=$path;}public function is_temp($really=NULL){if($really===NULL){return isset($this->opts['temp'])&&$this->opts['temp'];}else{$this->opts['temp']=!!$really;return $this;}}public function read_bz2($tar=false){if($tar)$this->type='tar';$this->data[$this->type]=file_get_contents(self::HEADER_BZ2.$this->path);if($this->data[$this->type]===false){throw new \System\Error\Format(sprintf(l('Cannot read bz2 archive "%s"'),$this->path));}return $this;}public function read_gz($tar=false){if($tar)$this->type='tar';$this->data[$this->type]=\System\File::read(self::HEADER_GZ.$this->path);return $this;}public function extract($path_prefix=NULL){if(!$path_prefix){$path_prefix=$this->path.'_files';}if($this->type!='raw'){if(in_array($this->type,self::$types)){$d=$this->decompress(true);}else throw new \System\Error\Format(sprintf('Unknown archive format "%s", could not save archive.',$this->type));if($d){$this->extract_path=clear_url($path_prefix);if($path_prefix&&!is_dir($path_prefix))mkdir($path_prefix,0777,true);foreach($this->dirs as $dir)if(!is_dir($path_prefix.'/'.$dir))mkdir($path_prefix.'/'.$dir);foreach($this->files as $file){if(file_exists($path_prefix.'/'.$file['name'])){$a=unlink($path_prefix.'/'.$file['name']);}$fp=fopen($path_prefix.'/'.$file['name'],"wb");fwrite($fp,$file['content']);fclose($fp);}}}return $this;}public function decompress(){if(in_array($this->type,self::$types)){if($this->type=='tar'){$this->set_path(ROOT.File::TMP_DIR.'/'.strtoupper(gen_random_string(10)).'.tar');$this->is_temp(true);\System\File::put($this->path,$this->data['tar']);$files=array();$dirs=array();while($block=$this->tar_read_block()){if(!$this->read_tar_header($block,$header)){throw new \System\Error\Format('Tar headers seem to be brokend. Could not unpack tarball.');break;}if($header['typeflag']=='L'&&!$this->read_tar_long_header($header)){throw new \System\Error\Format('Tar headers seem to be brokend. Could not unpack tarball.');break;}if(!$header['filename']){continue;}if($header['typeflag']==5){$dirs[]=$header['filename'];}elseif($header['typeflag']=='g'){$tarinfo=array_merge($header,(array) $this->tar_read_block());}elseif($header['typeflag']==2){}else{$file=array("name"=>$header['filename'],"content"=>'');$n=floor($header['size']/512);for($i=0;$i<$n;$i++)$file['content'].=$this->tar_read_block();if(($header['size']%512)!=0)$file['content'].=substr($this->tar_read_block(),0,$header['size']%512);$files[]=$file;}}$this->dirs=$dirs;$this->files=$files;return true;}else{throw new \System\Error\Format(sprintf('Could not unpack archive, format "%s" is not supported.',$this->type));return false;}}else{throw new \System\Error\Format(sprintf('Could not save archive, format "%s" is not supported.',$this->type));return false;}}private function open_file_pointer(){switch($this->type){case 'gz':$this->fp=gzopen($this->path,'r+');break;case 'bz2':$this->fp=bzopen($this->path,'r+');break;default:$this->fp=fopen($this->path,'r+');break;}}private function tar_read_block(){if(!is_resource($this->fp))$this->open_file_pointer();if(is_resource($this->fp)){if($this->type=='gz')$block=@gzread($this->fp,512);elseif($this->type=='bz2')$block=@bzread($this->fp,512);else $block=@fread($this->fp,512);}return $block;}private function read_tar_header($bin_data,&$header){static $x;if(!strlen($bin_data)||strlen($bin_data)!=512){$header['filename']='';return false;}if(!is_array($header))$header=array();$v_checksum=0;for($i=0;$i<148;$i++)$v_checksum+=ord(substr($bin_data,$i,1));for($i=148;$i<156;$i++)$v_checksum+=ord(' ');for($i=156;$i<512;$i++)$v_checksum+=ord(substr($bin_data,$i,1));$v_data=unpack("a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/"."a8checksum/a1typeflag/a100link/a6magic/a2version/"."a32uname/a32gname/a8devmajor/a8devminor",$bin_data);$header['checksum']=OctDec(trim($v_data['checksum']));if($header['checksum']!=$v_checksum&&strpos($header['filename'],"/\=/")){$header['filename']='';if(($v_checksum==256)&&($header['checksum']==0))return true;return false;}$header['filename']=$v_data['filename'];$header['mode']=OctDec(trim($v_data['mode']));$header['uid']=OctDec(trim($v_data['uid']));$header['gid']=OctDec(trim($v_data['gid']));$header['size']=OctDec(trim($v_data['size']));$header['mtime']=OctDec(trim($v_data['mtime']));if(($header['typeflag']=$v_data['typeflag'])=="5")$header['size']=0;$header['link']=trim($v_data['link']);return true;}private function read_tar_long_header(&$header){$v_filename='';$n=floor($v_header['size']/512);for($i=0;$i<$n;$i++){$v_content=$this->_readBlock();$v_filename.=$v_content;}if(($v_header['size']%512)!=0){$v_content=$this->_readBlock();$v_filename.=trim($v_content);}$v_binary_data=$this->tar_read_block();if($this->read_tar_header($v_binary_data,$v_header)){return false;}$v_filename=trim($v_filename);$v_header['filename']=$v_filename;return true;}}} namespace System{class Message{private $id,$status,$title,$message;private $links=array();private $autohide=false;public function __construct(){list($this->status,$this->title,$this->message,$this->autohide,$this->links,$no_queue)=func_get_args();if(is_array($this->message)){$this->message=ucfirst(strtolower(implode(', ',$this->message))).'.';}$this->id=spl_object_hash($this);if(!$no_queue){self::enqueue($this);}}public static function&get_all(){return $_SESSION['messages'];}public function __destruct(){self::dequeue($this);}public function get_id(){return $this->id;}public function get_status(){return $this->status;}public function get_title(){return $this->title;}public function get_message(){return $this->message;}public function get_links(){return $this->links;}public function autohides(){return!!$this->autohide;}public function get_retval(){if($this->status=='success')return true;if($this->status=='error')return false;if($this->status=='info')return null;}public function dequeue($obj=null){if($obj instanceof self)unset($_SESSION['messages'][$this->id]);elseif($obj)unset($_SESSION['messages'][$this->id]);}public static function dequeue_all(){foreach((array) $_SESSION['messages']as $msg){$msg->__destruct();}}public static function enqueue(self $msg){$_SESSION['messages'][$msg->get_id()]=$msg;}}} namespace System{class Output{const DIR_TEMPLATE="/lib/template";const DIR_PARTIAL="/lib/template/partial";const DEFAULT_TEMPLATE="pwf/default";const DEFAULT_OUT="html";const PREFIX_AJAX="ajax-api";private static $format;private static $template=array();private static $title=array();private static $objects=array();private static $templates=array();private static $meta=array();private static $def_template_used=false;private static $content=array("headers"=>array(),"meta"=>array(),"scripts"=>array(),"styles"=>array(),"output"=>array());private static $resource_filter=array('scripts','styles');public static function init(){self::set_title(cfg('default','title'));}public static function set_title(){self::$title=array();foreach(func_get_args()as $title){try{$title=l($title);}catch(\System\Error $e){}self::$title[]=$title;}}public static function get_title($last=false){return $last?end(self::$title):implode(' :: ',array_reverse(array_filter(self::$title)));}public static function set_template($temp){self::$template=(array) $temp;}public static function set_format($format){if(!\System\Status::on_cli()){return self::$format=$format;}self::$format=$format;}public static function set_opts(array $opts){if(isset($opts['template']))self::set_template($opts['template']);if(isset($opts['format']))self::set_format($opts['format']);if(isset($opts['title']))self::set_title($opts['title']);}public static function get_format($mime=false){php_sapi_name()=='cli'&&self::set_format('txt');if($mime){try{return cfg('output','format',self::$format);}catch(\System\Error $e){return 'unknown mime type';}}else{return self::$format;}}public static function add_template($template,$slot){if(!isset(self::$templates[$slot])){self::$templates[$slot]=array();}def($template['locals'],array());self::$templates[$slot][]=$template;}public static function slot($name=\System\Template::DEFAULT_SLOT){try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if($debug){echo '<!--Slot: "'.$name.'"-->';}if(isset(self::$templates[$name])&&is_array(self::$templates[$name])){while($template=array_shift(self::$templates[$name])){if(!empty($template['locals']['heading-level'])){Template::set_heading_level($template['locals']['heading-level']);Template::set_heading_section_level($template['locals']['heading-level']);}Template::partial($template['name'],$template['locals']);}}}public static function introduce(){try{return cfg('own','short_name')." ".cfg('own','version');}catch(\System\Error $e){return 'pwf unknown version';}}public static function get_template($type='layout',$name=null,$force=false){$base=ROOT;$temp=null;switch($type){case 'layout':$base.=self::DIR_TEMPLATE.'/';break;case 'partial':$base.=self::DIR_PARTIAL.'/';break;}file_exists($temp=$base.Template::get_filename($name,self::$format,\System\Locales::get_lang()))||file_exists($temp=$base.Template::get_filename($name,self::$format))||file_exists($temp=$base.Template::get_filename($name))||$temp='';$f=false;if(empty($temp)&&$type!='page'&&$type!='partial'&&!$force){if(!self::$def_template_used&&(file_exists($p=$base.Template::get_filename(self::DEFAULT_TEMPLATE,self::DEFAULT_OUT))||$p=$base.Template::get_filename(self::DEFAULT_TEMPLATE))){$temp=$p;self::$def_template_used=true;$f=true;}}elseif(!$temp){$temp=self::get_template('page');}return $temp;}public static function yield(){foreach(self::$template as $name){if(file_exists($f=self::get_template('layout',$name))){include($f);}else{throw new \System\Error\File(sprintf('Template "%s" not found.',$name));}}}public static function out(){try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if($debug){self::add_template(array("name"=>'system/status'),Template::DEFAULT_SLOT);content_for('styles','pwf/elementary');content_for('styles','pwf/devbar');content_for('scripts','lib/jquery');content_for('scripts','pwf');content_for('scripts','pwf/storage');content_for('scripts','pwf/devbar');}ksort(self::$templates);$name=array_shift(self::$template);self::$content['output']=array();ob_start();is_null($name)?self::slot():include(self::get_template('layout',$name));self::content_for('output',ob_get_clean());if(!\System\Status::on_cli()){self::send_headers();}Template::head_out();foreach(self::$content['output']as $row){echo $row;}}public static function send_headers(){$format=self::get_format(true);header("Content-Type: $format;charset=utf-8");header("Content-Encoding: gz");foreach(self::$content["headers"]as $name=>$content){header(ucfirst($name).": ".$content);}}public static function content_for($place,$content,$overwrite=false){if(!isset(self::$content[$place])||$overwrite){self::$content[$place]=$content;}else{is_array(self::$content[$place])&&self::$content[$place][]=$content;is_integer(self::$content[$place])&&self::$content[$place]+=$content;is_string(self::$content[$place])&&self::$content[$place].=$content;}}public static function&get_content_from($place){if(is_array(self::$content[$place])&&in_array($place,self::$resource_filter)){\System\Resource::filter_output_content($place,self::$content[$place]);}return self::$content[$place];}public static function content_from($place){self::content_for('output',ob_get_clean());self::$content['output'][]=&self::$content[$place];ob_start();}}} namespace System\Offcom{abstract class Request{public static function get($url){if(function_exists('curl_init')){$ch=curl_init();curl_setopt($ch,CURLOPT_URL,$url);curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);curl_setopt($ch,CURLOPT_USERAGENT,\System\Output::introduce());curl_setopt($ch,CURLOPT_HEADER,1);$content=curl_exec($ch);$content=explode("\r\n\r\n",$content,2);$dataray=array("status"=>curl_getinfo($ch,CURLINFO_HTTP_CODE));curl_close($ch);if($dataray['status']===\System\Http::NO_RESPONSE)throw new \System\Error\Connection(sprintf('Remote server was not found for URL "%s".',$url));if($dataray['status']===\System\Http::FORBIDDEN)throw new \System\Error\Offcom(sprintf('Access to URL "%s" was denied',$url));if($dataray['status']===\System\Http::PAGE_NOT_FOUND)throw new \System\Error\Offcom(sprintf('Requested URL "%s" was not found',$url));isset($content[0])&&$dataray['headers']=$content[0];isset($content[1])&&$dataray['content']=$content[1];return new Response($dataray);}else throw new \System\Error\Internal('Please allow CURL extension for System\Offcom\Request class');}static function json($url){return \System\Json::decode(self::get($url),true);}}} namespace System\Offcom{class Mail extends \System\Model\Attr{const STATUS_SENT=1;const STATUS_READY=2;const STATUS_SENDING=3;const STATUS_FAILED=4;protected static $attrs=array("subject"=>array('varchar',"required"=>true),"message"=>array('text',"required"=>true),"rcpt"=>array('array',"required"=>true),"headers"=>array('array'),"from"=>array('string',"is_null"=>false),"reply_to"=>array('string',"is_null"=>false),"status"=>array('int',"is_unsigned"=>true),);protected static $default_headers=array("Content-Type"=>'text/plain; charset=utf-8',);public static function create($subject,$message,array $rcpt,$from=null){foreach($rcpt as&$r){$r=trim($r);}return new self(array("subject"=>$subject,"message"=>$message,"rcpt"=>$rcpt,"from"=>$from,"status"=>self::STATUS_READY,));}public static function post($subject,$message,array $rcpt,$from=null){$msg=self::create($subject,$message,$rcpt,$from);return $msg->send();}public static function get_default_headers(){if(!isset(self::$default_headers['X-Mailer'])){self::$default_headers["X-Mailer"]=\System\Output::introduce();}return self::$default_headers;}public function get_sender(){return is_null($this->from)?cfg('offcom','default','email_sender'):$this->from;}private function validate(){foreach($this->rcpt as $member){if(!self::isAddrValid($member)){throw new \System\Error\Format(sprintf('Recipient ".$member." is not formatted according to RFC 2822.',$member));}}if(self::isAddrValid($this->get_sender())){throw new \System\Error\Format(sprintf('Sender "%s" is not formatted according to RFC 2822.',$this->get_sender()));}return true;}private function get_encoded_subject(){return '=?UTF-8?B?'.base64_encode($this->subject).'?=';}public function send(){$this->validate();$body=array();$headers_str=array();$rcpt=implode(', ',$this->rcpt);$headers=$this->get_default_headers();$headers['From']=$this->get_sender();$headers['Subject']=$this->get_encoded_subject();if($this->reply_to){if(self::isAddrValid($this->reply_to)){$headers['Reply-To']=$this->reply_to;}else throw new \System\Error\Format(sprintf('Reply-To "%s" is not formatted according to RFC 2822.',$this->get_sender()));}foreach($headers as $header=>$value){$headers_str[]=ucfirsts($header).": ".$value;}$body[]=implode("\n",$headers_str)."\n";$body[]=strip_tags($this->message);$body=implode("\n",$body);$this->status=self::STATUS_SENDING;if(mail($rcpt,$this->get_encoded_subject(),'',$body)){$this->status=self::STATUS_SENT;}else $this->status=self::STATUS_FAILED;return $this->status;}private static function isAddrValid($email,$strict=false){$regex=$strict?'/^([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})$/i':'/^([*+!.&#$|\'\\%\/0-9a-z^_`{}=?~:-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})$/i';return preg_match($regex,trim($email),$matches);}}} namespace System\Offcom{class Response extends \System\Model\Attr{protected static $attrs=array("content"=>array('blob'),"headers"=>array('text'),"status"=>array('int'),);public function ok(){return $this->status>=200&&$this->status<=300;}}} namespace System\Offcom{class SMS{}} namespace System{class Form extends \System\Model\Attr{const SEPARATOR_ID='_';const SEPARATOR_INPUT_METHOD='input_';const TEMPLATE_DEFAULT='system/form';const LABEL_SUBMIT_DEFAULT='send';protected static $attrs=array("id"=>array('varchar'),"method"=>array('varchar'),"action"=>array('varchar'),"enctype"=>array('varchar'),"heading"=>array('varchar'),"desc"=>array('varchar'),"anchor"=>array('varchar'),"bool"=>array('no_prefix'),"class"=>array('array'),);private static $methods_allowed=array('get','post','put','delete');protected $data_default=array();protected $data_commited=array();protected $data_hidden=array();private $objects=array();private $rendering=array("group"=>false,"tab_group"=>false,"tab"=>false,);private $prefix='';protected $checkboxes=array();protected $counts=array('inputs'=>1,"tab_group"=>0,'tab'=>0,);protected $errors=array();private static $inputs_datetime=array("datetime","date","time");private static $inputs_button=array("button","submit");protected function construct(){content_for('styles','pwf/form');!$this->method&&$this->method='post';!$this->action&&$this->action=\System\Input::get('path');!$this->id&&$this->id=self::get_generic_id();!$this->anchor&&$this->anchor=\System\Model\Database::gen_seoname($this->id,true);!$this->enctype&&$this->enctype='multipart/form-data';if(is_array($this->default)){$this->data_default=$this->default;}$this->class=array_merge((array) $this->class,array('yaform'));$this->take_data_from_input();$this->hidden('submited',true);$this->data_default['submited']=false;}public function __call($name,$args){if(strpos($name,self::SEPARATOR_INPUT_METHOD)===0){$type=substr($name,strlen(self::SEPARATOR_INPUT_METHOD));if(!isset($args[0])){throw new \System\Error\Argument(sprintf('You must enter input name as first argument for System\\Form::%s method',$name));}$this->input(array("type"=>$type,"name"=>$args[0],"label"=>def($args[1],''),"required"=>def($args[2],false),"info"=>def($args[3],''),));}else throw new \System\Error\Wtf(sprintf('There is no form method "%s".',$name));}protected function take_data_from_input(){$this->data_commited=\System\Input::get_by_prefix($this->get_prefix());if(isset($this->data_commited['data_hidden'])){$this->data_hidden=json_decode(htmlspecialchars_decode($this->data_commited['data_hidden']),true);$tmp=array();foreach($this->data_hidden as $key=>$val){$tmp[$key]=$val;}foreach($this->data_commited as $key=>$val){$tmp[$key]=$val;}$this->data_commited=$tmp;unset($this->data_commited['data_hidden']);}$this->submited=isset($this->data_commited['submited'])?!!$this->data_commited['submited']:false;}protected function get_input_value($attrs){$value=null;if(isset($attrs['value'])){$value=$this->data_default[$attrs['name']]=$attrs['value'];}else if(isset($this->data_default[$attrs['name']])){$value=$this->data_default[$attrs['name']];}if($this->submited){if(isset($this->data_commited[$attrs['name']])){$value=$this->data_commited[$attrs['name']];}else{unset($attrs['value']);}}return $value;}protected function get_input_value_by_name($name,$default=false){$value=null;if(($default||!$this->submited)&&isset($this->data_default[$name])){$value=$this->data_default[$name];}if(!$default&&$this->submited&&isset($this->data_commited[$name])){$value=$this->data_commited[$name];}return $value;}protected function get_generic_id(){return implode(self::SEPARATOR_ID,array('form',substr(md5($this->action),0,8)));}protected function&add_object(\System\Form\Element $element){$obj=&$this->objects[];$obj=$element;return $obj;}public function group_start($type,$name='',$label=''){$el=new \System\Form\Container(array("name"=>$name?$name:'',"label"=>$label,"form"=>&$this,"type"=>$type,));if($this->rendering['tab']instanceof \System\Form\Container){$this->rendering['group']=$this->rendering['tab']->add_element($el);}else{$this->objects[$el->name]=$el;$this->rendering['group']=$this->objects[$el->name];}return $this->rendering['group'];}public function group_end(){$this->rendering['group']=false;}public function check_rendering_group($type){if($this->rendering['group']===false||$this->rendering['group']->type!=$type){$this->group_start($type,count($this->objects));}return $this->rendering['group'];}public function gen_obj_name($type){return implode(self::SEPARATOR_ID,array($this->id,$this->inputs_count));}public function passed(){return $this->submited;}public function get_count($type){if(!isset($this->counts[$type])){$this->counts[$type]=0;}return $this->counts[$type];}public function hidden($name,$value){$this->data_hidden[$name]=$value;}public function tab_group_check(){if(!($this->rendering[\System\Form\Container::TYPE_TAB_GROUP]instanceof \System\Form\Container)){$this->tab_group_start();}return $this;}public function tab_group_start(){$el=$this->add_object(new \System\Form\Container(array("type"=>\System\Form\Container::TYPE_TAB_GROUP,"form"=>$this,)));$this->rendering[$el->type]=$el;$this->counts[$el->type]++;return $this;}public function tab_group_end(){$this->rendering[\System\Form\Container::TYPE_TAB]=false;$this->rendering[\System\Form\Container::TYPE_TAB_GROUP]=false;return $this;}public function tab($label,$name=null){$this->group_end();$this->tab_end();$this->tab_group_check();$el=new \System\Form\Container(array("type"=>\System\Form\Container::TYPE_TAB,"name"=>$name,"label"=>$label,"form"=>$this,));$this->counts[$el->type]++;if(($this->rendering[\System\Form\Container::TYPE_TAB_GROUP]instanceof \System\Form\Container)&&$this->rendering[\System\Form\Container::TYPE_TAB_GROUP]->type==\System\Form\Container::TYPE_TAB_GROUP){$this->rendering[$el->type]=$this->rendering[\System\Form\Container::TYPE_TAB_GROUP]->add_element($el);}else throw new \System\Error\Form('You must put tab into tab group.');return $this;}public function tab_end(){$this->rendering['tab']=false;return $this;}public function input(array $attrs){if(in_array($attrs['type'],self::$inputs_button)){$this->check_rendering_group('buttons');}else{$this->check_rendering_group('inputs');}$attrs['form']=&$this;$attrs['value']=$this->get_input_value($attrs);if($attrs['type']=='checkbox'){$this->checkboxes[]=$attrs['name'];if(!isset($this->data_commited[$attrs['name']])){$this->data_commited[$attrs['name']]=null;}}if(in_array($attrs['type'],array('checkbox','radio'))){if($this->submited){$attrs['checked']=!!$this->data_commited[$attrs['name']];}else{$attrs['checked']=isset($this->data_default[$attrs['name']])&&$this->data_default[$attrs['name']];}}if($attrs['type']==='image'){!isset($attrs['thumb_size'])&&($attrs['thumb_size']=\System\Form\Input::IMAGE_INPUT_SIZE_DEFAULT);$attrs['tools']=$this->get_image_input_tools($attrs);$attrs['value']=$this->get_image_input_value($attrs);}if($attrs['type']==='location'){$attrs['tools']=$this->get_location_input_tools($attrs);$attrs['value']=$this->get_location_input_value($attrs);}if($attrs['type']==='gps'){$attrs['tools']=$this->get_gps_input_tools($attrs);$attrs['value']=$this->get_gps_input_value($attrs);}if(in_array($attrs['type'],self::$inputs_datetime)){$attrs['value']=$this->get_datetime_input_value($attrs);}return $this->rendering['group']->add_element(new \System\Form\Input($attrs));}private function get_image_input_tools(array $attrs){$opts=\System\Form\Input::get_input_opts('image');$action=\System\Form\Input::ACTION_KEEP;if(!$attrs['value']){unset($opts[\System\Form\Input::ACTION_KEEP]);$action=\System\Form\Input::ACTION_UPLOAD;}if(any($attrs['required'])){unset($opts[\System\Form\Input::ACTION_NONE]);}if(empty($attrs['allow_url']))unset($opts[\System\Form\Input::ACTION_URL]);if(any($attrs['disallow_upload']))unset($opts[\System\Form\Input::ACTION_UPLOAD]);$input_action_attrs=array("name"=>$attrs['name'].'_action',"type"=>'radio',"label"=>l('form_image_input_action'),"options"=>$opts,"multiple"=>true,"value"=>$action,);$input_file_attrs=array("name"=>$attrs['name'].'_file',"type"=>'file',"label"=>l('form_image_input_file'),);$input_url_attrs=array("name"=>$attrs['name'].'_url',"type"=>'url',"label"=>l('form_image_input_url'),);$input_action_attrs['value']=$this->get_input_value($input_action_attrs);$input_file_attrs['value']=$this->get_input_value($input_file_attrs);$input_url_attrs['value']=$this->get_input_value($input_url_attrs);$input_action=new \System\Form\Input($input_action_attrs);$input_file=new \System\Form\Input($input_file_attrs);$input_url=new \System\Form\Input($input_url_attrs);$input_action->use_form($this);$input_file->use_form($this);$input_url->use_form($this);$inputs=array();if(!(count($opts)===1&&any($opts[\System\Form\Input::ACTION_UPLOAD]))){$inputs[]=$input_action;}if(empty($attrs['disallow_upload'])){$inputs[]=$input_file;}if(any($attrs['allow_url'])){$inputs[]=$input_url;}return $inputs;}private function get_location_input_tools(array $attrs){$opts=\System\Form\Input::get_input_opts('location');$action=\System\Form\Input::ACTION_NEW;if($attrs['value']){unset($opts[\System\Form\Input::ACTION_NEW]);$action=\System\Form\Input::ACTION_EDIT;}else{unset($opts[\System\Form\Input::ACTION_EDIT]);$action=\System\Form\Input::ACTION_NEW;}if(any($attrs['required'])){unset($opts[\System\Form\Input::ACTION_NONE]);}$input_action_attrs=array("name"=>$attrs['name'].'_action',"type"=>'radio',"label"=>l('form_location_input_action'),"options"=>$opts,"multiple"=>true,"value"=>$action,);$input_name_attrs=array("name"=>$attrs['name'].'_name',"type"=>'text',"label"=>l('form_location_input_name'),);$input_addr_attrs=array("name"=>$attrs['name'].'_addr',"type"=>'text',"label"=>l('form_location_input_addr'),);$input_site_attrs=array("name"=>$attrs['name'].'_site',"type"=>'url',"label"=>l('form_location_input_site'),);$input_gps_attrs=array("name"=>$attrs['name'].'_gps',"type"=>'gps',"label"=>l('form_location_input_gps'),);$value=$this->get_input_value($attrs);if($value instanceof \System\Location){$input_name_attrs['value']=$value->name;$input_addr_attrs['value']=$value->addr;$input_site_attrs['value']=$value->site;$input_gps_attrs['value']=$value->gps;}$input_gps_attrs['tools']=$this->get_gps_input_tools($input_gps_attrs);$input_action_attrs['value']=$this->get_input_value($input_action_attrs);$input_name_attrs['value']=$this->get_input_value($input_name_attrs);$input_addr_attrs['value']=$this->get_input_value($input_addr_attrs);$input_site_attrs['value']=$this->get_input_value($input_site_attrs);$input_gps_attrs['value']=$this->get_gps_input_value($input_gps_attrs);$input_action=new \System\Form\Input($input_action_attrs);$input_name=new \System\Form\Input($input_name_attrs);$input_addr=new \System\Form\Input($input_addr_attrs);$input_site=new \System\Form\Input($input_site_attrs);$input_gps=new \System\Form\Input($input_gps_attrs);$input_action->use_form($this);$input_name->use_form($this);$input_addr->use_form($this);$input_site->use_form($this);$input_gps->use_form($this);$inputs=array();if(count($opts)!==1){$inputs[]=$input_action;}$inputs[]=$input_name;$inputs[]=$input_addr;$inputs[]=$input_site;$inputs[]=$input_gps;return $inputs;}private function get_gps_input_tools(array $attrs){$input_lat_attrs=array("name"=>$attrs['name'].'_lat',"type"=>'text',"label"=>l('form_gps_input_lat'),"required"=>!empty($attrs['required']),);$input_lng_attrs=array("name"=>$attrs['name'].'_lng',"type"=>'text',"label"=>l('form_gps_input_lng'),"required"=>!empty($attrs['required']),);$value=$this->get_input_value($attrs);if($value instanceof \System\Gps){$input_lat_attrs['value']=$value->latf();$input_lng_attrs['value']=$value->lngf();}$input_lat_attrs['value']=number_format($this->get_input_value($input_lat_attrs),20);$input_lng_attrs['value']=number_format($this->get_input_value($input_lng_attrs),20);$input_lat=new \System\Form\Input($input_lat_attrs);$input_lng=new \System\Form\Input($input_lng_attrs);$input_lat->use_form($this);$input_lng->use_form($this);return array($input_lat,$input_lng);}private function get_location_input_value(array $attrs){$value=$this->get_input_value($attrs);if($this->submited){$name_action=$attrs['name'].'_action';$name_name=$attrs['name'].'_name';$name_addr=$attrs['name'].'_addr';$name_gps=$attrs['name'].'_gps';$name_site=$attrs['name'].'_site';$action=$this->get_input_value_by_name($name_action);$name=$this->get_input_value_by_name($name_name);$addr=$this->get_input_value_by_name($name_addr);$gps=$this->get_input_value_by_name($name_gps);$site=$this->get_input_value_by_name($name_site);if(is_null($action)){$action=$this->data_default[$name_action];}if($action==\System\Form\Input::ACTION_NONE){$value=null;}if($action==\System\Form\Input::ACTION_NEW||\System\Form\Input::ACTION_EDIT){$value=get_first('\System\Location')->where(array("name"=>$name))->fetch();if(!$value){$value=new \System\Location(array("name"=>$name,"addr"=>$addr,"gps"=>$gps,"site"=>$site,));}}unset($this->data_commited[$name_name],$this->data_commited[$name_addr],$this->data_commited[$name_gps],$this->data_commited[$name_site]);$this->data_commited[$attrs['name']]=$value;}return $value;}private function get_gps_input_value(array $attrs){$value=$this->get_input_value($attrs);if($this->submited){$name_lat=$attrs['name'].'_lat';$name_lng=$attrs['name'].'_lng';$this->data_commited[$attrs['name']]=$value=\System\Gps::from_array(array("lat"=>$this->get_input_value_by_name($name_lat),"lng"=>$this->get_input_value_by_name($name_lng),));unset($this->data_commited[$name_lat],$this->data_commited[$name_lng]);}return $value;}private function get_image_input_value(array $attrs){$value=$this->get_input_value($attrs);if($this->submited){$name_action=$attrs['name'].'_action';$name_file=$attrs['name'].'_file';$name_url=$attrs['name'].'_url';$action=$this->get_input_value_by_name($name_action);$file=$this->get_input_value_by_name($name_file);$url=$this->get_input_value_by_name($name_url);if($action==\System\Form\Input::ACTION_KEEP){$value=$this->get_input_value_by_name($attrs['name'],true);}if($action==\System\Form\Input::ACTION_UPLOAD||is_null($action)){$value=$file;$value=\System\Image::from_path($value['tmp_name']);$value->tmp=true;}if($action==\System\Form\Input::ACTION_URL||(is_null($value)&&is_null($action))){$f=\System\File::fetch($url);$value=\System\Image::from_path($f->tmp_name);$value->tmp=true;}if($value instanceof \System\Image&&$value->tmp){if($value->is_image()){$value->cache();}else{$value=null;$this->report_error($name_file,l('form_input_image_is_not_image'));}}if($action==\System\Form\Input::ACTION_NONE){$value=null;}if($this->submited){unset($this->data_commited[$attrs['name'].'_file']);}$this->data_commited[$attrs['name']]=$value;}return $value;}private function get_datetime_input_value(array $attrs){$value=$this->get_input_value($attrs);if(!is_object($value)&&$value){$value=new \DateTime($value);}if($this->submited){$this->data_commited[$attrs['name']]=$value;}return $value;}public function label($text,\System\Form\Input&$for=null){$this->check_rendering_group('inputs');$attrs['form']=&$this;return $this->rendering['group']->add_element(new Form\Label(array("content"=>$text,"input"=>$for)));}public function text($label,$text){$this->check_rendering_group('inputs');$attrs['form']=&$this;return $this->rendering['group']->add_element(new Form\Text(array("name"=>crc32($label),"label"=>$label,"content"=>$text)));}public function submit($label=self::LABEL_SUBMIT_DEFAULT){return $this->input(array("name"=>'button_submited',"value"=>true,"type"=>'submit',"label"=>$label,));}public function out(\System\Module $obj=NULL,array $locals=array()){$this->group_end();$this->tab_group_end();return $obj instanceof \System\Module?$obj->template(self::get_default_template(),(array) $locals+array("f"=>$this)):\System\Template::partial(self::get_default_template(),array("f"=>$this));}public static function get_default_template(){return self::TEMPLATE_DEFAULT;}public function get_hidden_data(){return $this->data_hidden;}public function get_prefix(){!$this->prefix&&!$this->no_prefix&&$this->setup_prefix();return $this->prefix;}protected function setup_prefix(){$this->prefix=$this->id.'_';}public function get_objects(){return $this->objects;}public function report_error($input_name,$msg){if(!isset($this->errors[$input_name])){$this->errors[$input_name]=array();}$this->errors[$input_name][]=$msg;}public function get_attr_data(){return parent::get_data();}public function get_data(){if($this->submited){$data=$this->data_commited;}else{$data=&$this->data_default;}return $data;}public function get_errors($name=''){if($name){if(isset($this->errors[$name])){$error_list=&$this->errors[$name];}else $error_list=array();}else{$error_list=&$this->errors;}return $error_list;}public static function create_delete_checker(array $data){$f=new self($data);foreach($data['info']as $i=>$text){$f->text($i,$text);}$f->submit(isset($data['submit'])?$data['submit']:l('delete'));return $f;}public static function get_field_type($attr_type){if(in_array($attr_type,array('date','datetime','time','image','location'))){$type=$attr_type;}elseif($attr_type==='point'){$type='gps';}elseif($attr_type==='bool'){$type='checkbox';}elseif($attr_type==='text'){$type='textarea';}else{$type='text';}return $type;}}} namespace System{class Query{const NO_TABLE="]-nt-[";private $tables=array();private $cols=array();private $joins=array();private $join_tables=array();private $opts=array();private $conds=array();private $limits=array();private $insert_data=array();private $parsed;private static $queries=0;private $assoc_with_model;private $return_first=false;public function __construct(array $opts=array()){def($opts['opts'],array());if(any($opts['table']))$this->add_tables($opts['table'],(empty($opts['table_alias'])?null:$opts['table_alias']));if(any($opts['cols']))$this->add_cols($opts['cols']);if(any($opts['join']))$this->add_joins($opts['join']);if(any($opts['conds']))$this->where($opts['conds']);if(any($opts['opts']))$this->add_opts($opts['opts']);if(any($opts['model']))$this->assoc_with_model=$opts['model'];if(any($opts['opts']['first']))$this->return_first=!!$opts['opts']['first'];}public function assoc_with($model){$this->assoc_with_model=$model;return $this;}private function add_objects($objects,&$where,$alias=null){if(is_array($objects)){foreach($objects as $alias=>$object){if(is_numeric($alias))$where[]=$object;else $where[$alias]=$object;}}else{$placeholder=&$where[(is_numeric($alias)?null:$alias)];is_array($placeholder)?($placeholder=array_merge($placeholder,$objects)):($placeholder=$objects);}return count($objects);}public function add_tables($objects,$alias=null){if(is_array($objects)){foreach($objects as $alias=>$table){$this->add_objects($objects,$this->tables,$alias);}}else{if(!$alias){$alias='t'.count($this->tables);}$this->add_objects($objects,$this->tables,$alias);}}public function add_cols($objects,$table=null){if(is_null($table)){$table=first_key($this->tables);}elseif($table===false){$table=self::NO_TABLE;}if(is_array($objects)&&is_array(reset($objects))){foreach($objects as $obj){$this->add_cols($obj,$table);}}else $this->add_objects($objects,$this->cols[$table]);return $this;}public function reset_cols(){$this->cols=array();return $this;}public function add_joins(array $objects){$this->add_objects($objects,$this->joins);}private function resolve_table_alias($table_alias){$ta='';if($table_alias){$ta="`".$table_alias."`.";}elseif($table_alias!==false){$k=array_keys($this->tables);if(any($k)){$table_alias=reset($k);$ta="`".$table_alias."`.";}}return $ta;}public function where(array $conds,$table_alias=null,$or=false){if(any($conds)){if($or){$temp=array();}else{$temp=&$this->conds;}$ta=$this->resolve_table_alias($table_alias);if(!empty($conds)){foreach($conds as $col=>$condition){if(is_array($condition)){$this->where($condition,$table_alias,!$or);continue;}if(is_object($condition)){throw new \System\Error\Argument("Query condition cannot be an object!");}elseif(is_numeric($col)&&!is_array($condition)){if(strval($condition)){$temp[]="$condition";}}else{$temp[]=$ta."`$col` = '$condition'";}}}if($or)$this->conds[]="(".join(" OR ",$temp).")";}return $this;}public function has(array $relations){if(any($this->assoc_with_model)){foreach($relations as $rel=>$ids){$rel_attrs=\System\Model\Database::get_rel_def($this->assoc_with_model,$rel);$rel_key=\System\Model\Database::get_id_col($rel_attrs['model']);$rel_conds='';$rel_table=any($rel_attrs['is_bilinear'])?\System\Model\Database::get_bilinear_table_name($this->assoc_with_model,$rel_attrs):\System\Model\Database::get_table($this->assoc_with_model);if(any($rel_attrs['is_bilinear'])){$rel_conds='USING('.\System\Model\Database::get_id_col($this->assoc_with_model).')';}$this->join($rel_table,$rel_conds,'t_has_'.$rel)->where(array('`t_has_'.$rel.'`.`'.$rel_key.'`'."IN(".implode(',',array_map('intval',$ids)).")"));}}else throw new \System\Error\Database("Query must be associated with model when using query::has()!");return $this;}public function where_in($col,array $conds,$table_alias=null,$or=false){if(any($conds)){$ta=$this->resolve_table_alias($table_alias);return $this->where(array($ta."`$col` IN (".implode(',',array_map('intval',$conds)).")"),$ta,$or);}return $this;}public function sort_by($cond){$this->opts['order-by']=$cond;return $this;}public function add_insert_data(array $data){$this->insert_data[]=$data;}public function add_opts(array $opts){$this->opts=array_merge($this->opts,$opts);return $this;}public function group_by($str){return $this->add_opts(array("group-by"=>$str));}public function distinct(){return $this->add_opts(array("distinct"=>true));}public function join($table,$conds_str,$alias=null,$type=null){$this->join_tables[$alias]=$table;$this->joins[]=($type?$type.' ':null)."JOIN `".$table."`".($alias?' '.$alias:null)." ".$conds_str;return $this;}public function left_join($table,$conds,$alias=null){return $this->join($table,$conds,$alias,'left');}private function prepare($for='select'){$a=false;if(!$this->parsed){if($for!='delete'){$a=true;}foreach($this->tables as $t_alias=>$table){$this->parsed['tables'][]="\n`".$table."`".($a&&$t_alias&&!is_numeric($t_alias)?" `".$t_alias."`":null);!isset($this->cols[$t_alias])&&$this->cols[$t_alias]=array();foreach($this->cols[$t_alias]as $alias=>$col){$fn=strpos($col,'(')!==false;$t=$fn?"":"`".($a&&$t_alias?$t_alias:$table)."`.";$this->parsed['cols'][]=$t.$col.($alias&&!is_numeric($alias)?" `".$alias."`":null);}}foreach($this->join_tables as $t_alias=>$table){foreach(array_merge(isset($this->cols[$table])?(array) $this->cols[$table]:array(),isset($this->cols[$t_alias])?(array) $this->cols[$t_alias]:array())as $alias=>$col){$this->parsed['cols'][]="`".($a&&$t_alias?$t_alias:$table)."`.".$col.($alias&&!is_numeric($alias)?" `".$alias."`":null);}}if(!empty($this->cols[self::NO_TABLE])){foreach($this->cols[self::NO_TABLE]as $name=>$value){$this->parsed['cols'][]="(".$value.") `".$name."`";}}}}public function count(){$this->prepare();$sql="SELECT COUNT(*) "."FROM ".implode(',',(array) $this->parsed['tables']).(!empty($this->joins)?" ".implode(" ",$this->joins):NULL).(!empty($this->conds)?" WHERE ".implode(' AND ',$this->conds):null);self::$queries++;return Database::count($sql);}public static function first_val(array $result){return reset($result);}public function select($get_query=false){if(any($this->opts['falsify-return-value']))return $this->false_return_value;$this->prepare();$sql="SELECT ".(any($this->opts['distinct'])?" DISTINCT ":'').implode(',',$this->parsed['cols'])."\n FROM ".implode(',',(array) $this->parsed['tables']).(!empty($this->joins)?" ".implode(" ",$this->joins):NULL).(!empty($this->conds)?"\n WHERE ".implode(' AND ',$this->conds):null);if(!empty($this->opts['group-by'])){$sql.="\n GROUP BY ".$this->opts['group-by'];}if(!empty($this->opts['order-by'])){$sql.="\n ORDER BY ".$this->opts['order-by'];}if(isset($this->opts['per-page'])){def($this->opts['offset'],0);$sql.="\n LIMIT ".intval($this->opts['offset']).",".intval($this->opts['per-page']);}self::$queries++;return $get_query?$sql:Database::query($sql);}public function insert($get_query=false){$this->prepare();$sql="INSERT INTO `".implode('`, `',$this->tables)."` ";if(any($this->parsed['cols'])){foreach($this->cols as $table){$sql.="(".implode(',',$table).")";}}$this->parsed['insert-data']=array();foreach($this->insert_data as $row){$d=array();foreach($this->cols as $table){foreach($table as $col){Database::escape($row[$col]);$d[]=$row[$col];}}$this->parsed['insert-data'][]="(".implode(',',$d).")";}if(any($this->parsed['insert-data'])){$sql.=" VALUES ".implode(',',$this->parsed['insert-data']);self::$queries++;return $get_query?$sql:Database::query($sql);}else{return false;}}public function delete(){$this->prepare('delete');self::$queries++;return Database::query($sql="DELETE FROM ".implode(',',(array) $this->parsed['tables'])."\nWHERE ".implode(' AND ',$this->conds));}public static function simple_delete($from,array $conds){$helper=new self(array("table"=>$from));$helper=$helper->where($conds,$from);return $helper->delete();}public static function simple_count($table,array $cols=array(),array $conds=array()){if(any($this->opts['falsify-return-value']))return $this->false_return_value;$helper=new self(array("table"=>$table,"conds"=>$conds));return $helper->count();}public static function count_all(){return self::$queries;}public function fetch($key=null,$value=null){if(any($this->opts['falsify-return-value']))return $this->false_return_value;$result=$this->select();$data=$this->assoc_with_model?$result->fetch_model($this->assoc_with_model,$key):$result->fetch_assoc($key,$value);return $this->return_first?reset($data):$data;}public function fetch_one(){$this->return_first=true;return $this->fetch();}public function paginate($per_page=20,$page_offset=0){$this->add_opts(array("per-page"=>intval($per_page),"offset"=>intval($per_page)*intval($page_offset)));return $this;}public function ignore_query($retval=NULL){$this->opts['falsify-return-value']=true;$this->false_return_value=$retval;return $this;}public function cancel_ignore(){unset($this->opts['falsify-return-value']);return $this;}public function quick(){return isset($this->assoc_with_model)?$this->where(\System\Model\Database::get_quick_conds($this->assoc_with_model)):$this;}}} namespace System{class File extends Model\Attr{const DIR='/var/files';const TMP_DIR='/var/tmp';const FETCHED_SIGN='-FETCHED';const MOD_DEFAULT=0664;private static $operations=self::TMP_DIR;static protected $attrs=array("filename"=>array('varchar'),"dirpath"=>array('varchar'),"suffix"=>array('varchar'),"mime_type"=>array('varchar'),"tmp_name"=>array('varchar'),"size"=>array('int'),);public static function clear_tmp(){self::remove_directory(ROOT.self::TMP_DIR);mkdir(ROOT.self::TMP_DIR,0777,true);}public static function remove_directory($dir){if(strpos('..',$dir)===false){if(strpos($dir,ROOT.self::$operations)!==0)$dir=ROOT.self::$operations.$dir;if(is_dir($dir)){$dp=opendir($dir);while($f=readdir($dp)){if($f!='..'&&$f!='.'){!!(is_dir($dir.'/'.$f))?self::remove_directory($dir.'/'.$f):unlink($dir.'/'.$f);}}rmdir($dir);}}}static function fetch($url,$dir=null){$u=explode('/',$url);$name=end($u);$e=explode('.',$name);unset($e[0]);$suffix=implode('.',$e);$data=\System\Offcom\Request::get($url);if($data->ok()){if(!$dir){$dir=ROOT.self::TMP_DIR;}\System\Directory::check($dir);$magic=strtoupper(gen_random_string(10));$tmp_name=$dir.'/'.$magic.self::FETCHED_SIGN.'.'.$suffix;if(!file_put_contents($tmp_name,$data->content,LOCK_EX)){throw new \System\Error\File(sprintf('Could not temporarily save fetched file into "%s".',$tmp_name));}return new self(array("filename"=>$name,"dirpath"=>dirname($dir),"suffix"=>$suffix,"tmp_name"=>$tmp_name));}else throw new \System\Error\Connection('Couldn\'t fetch file',sprintf('HTTP error %s ',$data->status));}public function get_tmp_url(){return $this->__get('tmp_name');}public function move($where,$use_tmp=false){$op=$use_tmp?$this->__get('tmp_name'):$this->__get('dirpath').'/'.$this->__get('filename');$np=(dirname($where)==$where)?dirname($where).'/'.$this->filename:$where;if(file_exists($np)){unlink($np);}if(!rename($op,$np)){$this->errors[]='move-failed';}return $this;}public function remove(){unlink($this->tmp_name);return $this;}public function save($where){return $this->move($where,true);}public static function remove_postfix($name,$all=false){$temp=explode('.',$name);if(count($temp)>1){array_pop($temp);return $all?reset($temp):implode('.',$temp);}return $name;}public static function save_content($filepath,$content,$mode=self::MOD_DEFAULT){return self::put($filepath,$content,$mode);}public static function put($path,$content,$mode=null){if(\System\Directory::check($d=dirname($path))&&(($ex=file_exists($path))||is_writable($d))){if(!$ex||is_writable($path)){$write=file_put_contents($path,$content);$mod=true;if(!$ex&&is_null($mode)){chmod($path,self::MOD_DEFAULT);}if(!is_null($mode)){if(!$mod=@chmod($path,$mode)){throw new \System\Error\Permissions(sprintf('Failed to set %s permissions on file "%s".',$mode,$path));}}return $write&&$mod;}else throw new \System\Error\Permissions(sprintf('Failed to write data into file "%s". Check your permissions.',$path));}else throw new \System\Error\Permissions(sprintf('Failed to write data into file "%s". Parent directory is not writeable.',$path));return $action;}public static function read($path,$silent=false){if(\System\Directory::check(dirname($path))&&file_exists($path)){if(is_readable($path)){return file_get_contents($path);}else if(!$silent)throw new \System\Error\Permissions(sprintf('Failed to read file "%s". It is not readable.',$path));}else if(!$silent)throw new \System\Error\File(sprintf('Failed to read file "%s". It does not exist.',$path));return false;}}} namespace System{abstract class Flow{const REDIRECT_LATER=1;const REDIRECT_IMMEDIATELY=2;const REDIRECT_AFTER_MODULES=3;private static $queue=array();private static $redirect=array();private static $start_time=0.0;public static function enqueue(\System\Module&$module){self::$queue[]=$module;}public static function init(){self::$start_time=microtime(true);}public static function add($module,array $locals=array(),array $parents=array()){if(empty($locals['mod-conds'])||(is_array($locals['mod-conds'])&&Module::eval_conds($locals['mod-conds']))){$mod=new Module($module,$locals,$parents);self::enqueue($mod);}}public static function run(){while(!empty(self::$queue)){$mod=array_shift(self::$queue);$retval=$mod->make();if(any(self::$redirect[self::REDIRECT_LATER])){$r=&self::$redirect[self::REDIRECT_LATER];\System\Http::redirect($r['url'],$r['code']);}}if(any(self::$redirect[self::REDIRECT_AFTER_MODULES])){$r=&self::$redirect[self::REDIRECT_AFTER_MODULES];\System\Http::redirect($r['url'],$r['code']);}\System\Http::save_referer();}public static function redirect($url,$code=\System\Http::FOUND,$when=self::REDIRECT_AFTER_MODULES){$when===self::REDIRECT_IMMEDIATELY&&\System\Http::redirect($url,$code);self::$redirect[$when]=array("url"=>$url,"code"=>$code);}public static function run_messages(){if(is_array($msgs=Message::get_all())){foreach($msgs as $msg){self::add('system/message',array("message"=>$msg));}self::run();}}public static function get_exec_time(){return microtime(true)-self::$start_time;}public static function get_queue(){return self::$queue;}}} namespace System{abstract class Database{const DIR_INITIAL_DATA='/etc/database/data.d';const DIR_MIGRATIONS='/etc/database/migrations.d';private static $instances=array();private static $default_instance;private static $queries=0;private static $query_record=array();public static function init(){$db_list=cfg('database','connect');if(any($db_list)){foreach($db_list as $db_ident){$cfg=cfg('database','list',$db_ident);self::connect($cfg,$db_ident);}}else{if(php_sapi_name()=='cli'){exec(ROOT.'/bin/db --setup');}else{throw new \System\Error\Config('No database is set.');}}}public static function connect(array $cfg,$ident=''){!$ident&&$ident=$cfg['database'];try{$default_ident=cfg('database','default');}catch(\System\Error $e){$default_ident=$ident;}$driver_name='System\\Database\\Driver\\'.ucfirst($cfg['driver']);$driver=&self::$instances[$ident];$driver=new $driver_name();$driver->connect($cfg);if((any($default_ident)&&$ident==$default_ident)||count(self::$instances)===1){self::$default_instance=&self::$instances[$ident];}}public static function query($query,$db_ident=null){if(($db=self::get_db($db_ident))!==null){$start=microtime(true);$res=$db->query($query);self::$queries++;if(cfg('dev','debug')){$trace=debug_backtrace();$tres=count($trace>2)?2:1;self::$query_record[]=array("trace"=>$trace[$tres],"time"=>microtime(true)-$start,"query"=>$query,);}return $res;}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}public static function count($query,$db_ident=null){if(($db=self::get_db($db_ident))!==null){$res=$db->count($query);self::$queries++;return $res;}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}public static function simple_insert($table,array $data,$add_times=true,$db_ident=null){if(($db=self::get_db($db_ident))!==null){if($add_times){$data['created_at']=new \DateTime();$data['updated_at']=new \DateTime();}$sql="INSERT INTO `".$table."` ";if($return_affected=(isset($data[0])&&is_array($data[0]))){}else{$sql.="SET ";$rows=array();foreach($data as $column=>$value){$rows[]="`".$column."`".' = '.self::escape($value);}$sql.=implode(',',$rows);}$res=$db->query($sql);return $return_affected?$db->get_affected_rows():$db->get_insert_id();}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}public static function simple_update($table,$id_col,$id,array $data,$add_times=true,$db_ident=null){if(($db=self::get_db($db_ident))!==null){if($add_times){$data['updated_at']=new \DateTime();}$sql_data=array();$conds=array();if(is_array($id)){$cond="IN(".implode(',',array_map('intval',$id)).")";}else{$cond="= ".$id;}foreach($data as $col=>$data){$sql_data[]="`".$col."` = ".self::escape($data);}$sql="UPDATE `".$table."` SET ".implode(',',$sql_data)." WHERE `".$id_col."` ".$cond;self::$queries++;$result='';self::get_db($db_ident)->query($sql);return $result;}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}private static function get_default(){return empty(self::$default_instance)?null:self::$default_instance;}public static function get_db($db_ident=null){return $db_ident===null?self::get_default():(isset(self::$instances[$db_ident])?self::$instances[$db_ident]:null);}public static function escape(&$value){if(is_array($value)){array_walk($value,array('self','escape'));}else{if(is_object($value)){switch(get_class($value)){case 'DateTime':$value="'".format_date($value,'sql')."'";break;case 'System\Image':$value="'".$value->to_json()."'";break;case 'System\Video\Youtube':$value="'".$value->to_sql()."'";break;case 'System\Gps':$value=$value->to_sql();break;}}else{switch(gettype($value)){case 'boolean':$value=$value?1:0;break;case 'integer':$value=self::num2db(intval($value));break;case 'double':case 'float':$value=self::num2db(floatval($value));break;case 'NULL':$value='NULL';break;default:$value="'".self::get_db()->escape_string($value)."'";}}return $value;}}public static function num2db($val){$larr=localeconv();$search=array($larr['decimal_point'],$larr['mon_decimal_point'],$larr['thousands_sep'],$larr['mon_thousands_sep'],$larr['currency_symbol'],$larr['int_curr_symbol']);$replace=array('.','.','','','','');return str_replace($search,$replace,$val);}public static function get_insert_id($db_ident=null){return self::get_db($db_ident)->get_insert_id();}public static function is_connected($db_ident=null){$instance=self::get_db($db_ident);return $instance!==null&&$instance->is_connected();}public static function is_ready($db_ident=null){$instance=self::get_db($db_ident);return $instance!==null&&$instance->is_ready();}public static function exists($db_ident){$dblist=cfg('database','list');return isset($dblist[$db_ident]);}public static function get_query_record(){return self::$query_record;}}} namespace System{class Image extends Model\Attr{const DIR='/var/images';const DIR_TMP='/var/tmp';const DIR_THUMBS='/var/thumbs';const FILE_BAD_THUMB='/share/pixmaps/pwf/bad_thumb.jpg';const IMG_JPEG_OLD=3;private static $bad_thumb=null;public static $gd_formats=array(IMG_GIF=>"gif",IMG_JPG=>"jpg",self::IMG_JPEG_OLD=>"jpg",IMG_PNG=>"png",);static protected $attrs=array("width"=>array('int'),"height"=>array('int'),"file_size"=>array('int'),"file_path"=>array('varchar'),"file_name"=>array('varchar'),"file_hash"=>array('varchar'),"format"=>array('varchar'),"src"=>array('varchar'),"file"=>array('varchar'),"tmp"=>array('bool'),"bad"=>array('bool'),"cache"=>array('bool'),"allow_save"=>array('bool'),"to_be_deleted"=>array('bool'),);public function __get($attr){if($attr=='width'||$attr=='height'){empty($this->data[$attr])&&$this->read_dimensions();}if($attr=='file_size'){empty($this->data['file_size'])&&($this->file_size=filesize($this->get_path(true)));}return parent::__get($attr);}private function read_dimensions(){if(($info=self::get_image_size($this->get_path(true)))!==false&&$info[0]!==false){$this->width=$info[0];$this->height=$info[1];$this->format=$info[2];}}public function get_size(){return $this->width.'x'.$this->height;}public function get_format(){$this->read_dimensions();return $this->format;}public function is_image(){return!is_null($this->get_format());}public function thumb($width,$height=null,$crop=true){if($this->check_thumb($width,$height,$crop)){return $this->get_thumb_path($width,$height,$crop);}else{if($this->bad){throw new \System\Error('Cannot generate thumb.');}else return self::gen_bad_thumb($width,$height);}}private function check_thumb($width=null,$height=null,$crop=true,$gen=true){return file_exists(ROOT.$this->get_thumb_path($width,$height))||($gen&&$this->make_thumb($width,$height,$crop));}private function get_thumb_path($width=null,$height=null,$crop=true){$name=$this->get_file_hash();return self::DIR_THUMBS.'/'.$width.'x'.$height.'/'.substr($name,0,5).'/'.$name.($crop?'-crop':'').'.jpg';}private function get_file_hash(){if(!$this->file_hash&&file_exists($this->get_path(true))){$this->file_hash=md5(\System\File::read($this->get_path(true)));}return $this->file_hash;}private function make_thumb($width,$height,$crop=true){if(extension_loaded('imagemagick')){$im=new ImageMagick($this->get_path(true));$im->resampleImage($width,$height);return $im->writeImage(ROOT.$this->get_thumb_path($width,$height,$crop));}else{return self::gen_thumb($this,$width,$height,$crop);}}public static function get_image_size($path){return (array)@getimagesize($path);}public static function from_json($json){return new self(\System\Json::decode($json));}public static function from_path($path){if(file_exists($path)||file_exists($path=ROOT.$path)){return new self(array("src"=>'copy',"tmp_name"=>$path,"file_path"=>str_replace(ROOT,'',$path),"file_name"=>basename($path),"tmp"=>false,));}return false;}public static function from_scratch(){return new Image(array());}public function to_json(){return json_encode(array("file_path"=>$this->get_path(),"file_name"=>$this->file_name,"file_size"=>$this->file_size,"file_hash"=>$this->get_file_hash(),"width"=>$this->width,"height"=>$this->height,));}public function save($path=null){if($this->cache&&$this->allow_save){if(!$path){$new_name=$this->gen_name();$path=self::prepare_image_dir(ROOT.self::DIR.'/'.substr($new_name,0,4).'/'.$new_name);}self::prepare_image_dir($this->get_path(true));if(($this->src=='copy'&&$ok=copy($this->get_path(true),$path))||$ok=rename($this->get_path(true),$path)){$this->file_path=$path;$this->file_name=basename($this->get_path(true));$this->cache=false;$this->tmp=false;$this->allow_save=false;chmod($this->file_path,0644);}return $ok;}}private function gen_name(){return md5(\System\File::read($this->get_path(true),false,NULL,-1,2048).'-'.intval($this->file_size).'-'.intval($this->width).'x'.intval($this->height)).'.'.self::get_suffix($this->format);}public static function get_suffix($gd_format){return self::$gd_formats[$gd_format];}private static function gen_bad_thumb($width=null,$height=null){if(is_null(self::$bad_thumb)){self::$bad_thumb=self::from_path(ROOT.self::FILE_BAD_THUMB);self::$bad_thumb->tmp=true;self::$bad_thumb->bad=true;}return self::$bad_thumb->thumb($width,$height);}private static function prepare_image_dir($path){$p=dirname($path);if(!is_dir($p)&&(strpos($path,self::DIR_THUMBS)!==false||strpos($path,self::DIR)!==false)){$p=str_replace(ROOT,"",$p);$p=array_filter(explode('/',$p));$ip=ROOT.'/';foreach($p as $dir){if(is_dir($dp=$ip.$dir)||mkdir($dp)){$ip.=$dir.'/';}else{break;}}}return $path;}public static function gen_thumb(self $obj,$w,$h,$crop=true){$path=$obj->get_path(true);if(($w&&!is_numeric($w))||($h&&!is_numeric($h))){throw new \System\Error\Argument("Width and height must be integer.");}if($path!=ROOT&&file_exists($path)){$f=false;$org_w=intval($obj->width);$org_h=intval($obj->height);if($bad_size=($org_w==0&&$org_h==0)){$obj->read_dimensions();}$tpth=self::prepare_image_dir(ROOT.$obj->get_thumb_path($w,$h,$crop));if(!$w&&$h){$w=round(($org_w*$h)/$org_h);$f=true;}if(!$h&&$w){$h=round(($org_h*$w)/$org_w);$f=true;}if($w<$org_w||$h<$org_h){switch($obj->get_format()){case 1:$im=imagecreatefromgif($path);break;case 2:$im=imagecreatefromjpeg($path);break;case 3:$im=imagecreatefrompng($path);break;}if($crop&&!$f){if($org_w/$org_h<$w/$h){$xw=$w;$xh=round($org_h/$org_w*$w);$dst_x=0;$dst_y=round(($xh>$h)?(-1*abs($h-$xh)/2):(abs($h-$xh)/2));}else{$xh=$h;$xw=round($org_w/$org_h*$h);$dst_x=round(($xw>$w)?(-1*abs($w-$xw)/2):(abs($w-$xw)/2));$dst_y=0;}}else{$xw=$w;$xh=$h;$dst_x=$dst_y=0;}$th=imagecreatetruecolor($w,$h);$wh=imagecolorallocate($th,255,255,255);imagefill($th,0,0,$wh);imagecopyresampled($th,$im,intval($dst_x),intval($dst_y),0,0,intval($xw),intval($xh),$org_w,$org_h);if(file_exists($tpth)){unlink($tpth);}return imagejpeg($th,$tpth,99);}else{return copy($path,$tpth);}}return false;}public function allow_save(){return $this->allow_save;}public function is_to_be_deleted(){return $this->to_be_deleted;}public function get_path($with_root=false){$path=str_replace(ROOT,'',$this->file_path);return $with_root?($this->tmp&&!$this->bad?'':ROOT).$path:$path;}public function update_attrs(array $dataray){parent::update_attrs($dataray);!isset($dataray['src'])&&$dataray['src']='';$this->allow_save=$this->src=='upload'||$this->src=='copy'||$this->src=='migration';if(!($this->to_be_deleted=$dataray['src']=='none')){if(isset($dataray['tmp_name'])&&empty($dataray['error'])){$this->tmp=$dataray['src']=='upload';if(is_uploaded_file($dataray['tmp_name'])||file_exists($dataray['tmp_name'])){$this->file_path=$dataray['tmp_name'];$this->file_name=basename($this->get_path(true));$this->read_dimensions();}else throw new \System\Error\File(sprintf('Image "%s" could not be saved!',$dataray['tmp_name']));}}return $this;}public function cache(){$tmp_path=ROOT.self::DIR_TMP.'/'.$this->get_file_hash().'.'.self::get_suffix($this->get_format());if(@copy($this->get_path(true),$tmp_path)){$this->file_path=str_replace(ROOT,'',$tmp_path);$this->tmp=false;$this->cache=true;}else throw new \System\Error\File(sprintf('Copying image from "%s" to "%s" failed while caching!',$this->get_path(true),$tmp_path),'Please check your permissions and disk space');return $this;}}} namespace System{abstract class Router{const DIR_REWRITE='/etc/rewrite.d';const REWRITE_TARGET='/.htaccess';public static function generate_rewrite_rules(){$dir=ROOT.self::DIR_REWRITE;$od=opendir($dir);$files=array();while($file=readdir($od)){if(strpos($file,'.')!==0){$files[$file]=\System\File::read($dir.'/'.$file);}}ksort($files);return implode("\n",$files);}public static function update_rewrite(){return \System\File::put(ROOT.self::REWRITE_TARGET,self::generate_rewrite_rules());}}} namespace System{abstract class Cache{const TTL_DEFAULT=3600;static private $driver;static private $enabled;static private $ready=false;static private $ttl=self::TTL_DEFAULT;public static function init(){if(self::$enabled=cfg('cache','memory','enabled')){if(class_exists(self::get_cfg_driver())){self::$ready=self::setup_driver();}else throw new \System\Error\Config('Cache driver does not exist. Check your app settings',cfg('cache','memory'));}else{self::$ready=true;}}public static function __callStatic($method,$args){if(self::is_enabled()){if(self::is_ready()){if(method_exists(self::get_driver(),$method)){return self::get_driver()->$method(def($args[0],null),def($args[1],null),def($args[2],null));}else throw new \System\Error\Wtf(sprintf('Cache driver method does not exist: %s',$method));}}else return null;}public static function fetch($path,&$var){if(self::is_enabled()){if(self::is_ready()){return self::get_driver()->fetch($path,$var);}}else return $var=null;}public static function is_ready(){return self::$ready;}public static function is_enabled(){return self::$enabled;}private static function setup_driver(){$drv_name=self::get_cfg_driver();self::$driver=new $drv_name();return true;}public static function get_cfg_driver(){return self::$driver="\\System\\Cache\\Driver\\".ucfirst(cfg('cache','memory','driver'));}public static function get_driver(){return self::$driver;}}} namespace System{abstract class Directory{const MOD_DEFAULT=0775;public static function create($pathname,$mode=self::MOD_DEFAULT){if(strpos($pathname,'/')){$pathname=explode('/',$pathname);}if(is_array($pathname)){$current_dir='';foreach($pathname as $dir){$current_dir.='/'.$dir;if(!is_dir($current_dir)){$action=self::create($current_dir,$mode);}}}else{if(!($action=@mkdir($pathname,$mode,true))){throw new \System\Error\Permissions(sprintf('Failed to create directory on path "%s" in mode "%s". Please check your permissions.',$pathname,$mode));}}return $action;}public static function check($pathname,$create=true,$mode=self::MOD_DEFAULT){if(!($action=is_dir($pathname))&&$create){$action=self::create($pathname,$mode);}return $action;}public static function find_all_files($path,&$files=array(),$regexp=null){$dir=opendir($path);while($file=readdir($dir)){if(strpos($file,'.')!==0){if(is_dir($p=$path.'/'.$file)){self::find_all_files($p,$files,$regexp);}elseif($regexp===null||preg_match($regexp,$file)){$files[]=$p;}}}return $files;}public static function find($path,$regexp=null){$files=array();self::find_all_files($path,$files,$regexp);return $files;}}} namespace System{class Error extends \Exception{protected $explanation=array();protected $backtrace=array();const HTTP_STATUS=500;function __construct(){$this->explanation=func_get_args();$this->backtrace=debug_backtrace();}public function get_explanation(){return $this->explanation;}public function get_backtrace(){return $this->backtrace;}public function get_name(){return str_replace('system/error/','',\System\Loader::get_class_file_name(get_class($this)));}public function get_http_status(){return \System\Http::get_header($this::HTTP_STATUS);}public static function from_exception(\Exception $e){$exc=new self($e->getMessage());$exc->backtrace=$e->getTrace();return $exc;}}} namespace System{class Settings{const CACHE_FILE='/var/cache/settings';const DIR_CONF_ALL='/etc';const DIR_CONF_DIST='/etc/conf.d';const DIR_CONF_STATIC='/etc/default/conf.d';const DIR_ROUTES_STATIC='/etc/default/routes.d';const FILE_VERSION='/etc/current/core/pwf/version';const CONF_FILE_REGEXP='/^[a-z].*\.json$/i';private static $no_pages=false;private static $version_default=array('pwf','Purple Web Framework','unknown version','pwf','master',);private static $conf=array();private static $env='dev';private static $noconf=array('own','datatype_schema','pages','pass_shield','core','update_server');static function init(){if(self::check_cache()){self::load_cache();}else{self::reload();if(!self::$no_pages){self::cache();}}}public static function reload(){self::set_env();\System\Directory::check($p=ROOT.self::DIR_CONF_DIST.'/'.self::$env);$dir=opendir($p);while($file=readdir($dir)){if(preg_match(self::CONF_FILE_REGEXP,$file)&&!is_dir($p."/".$file)){$d=explode(".",$file);array_pop($d);self::$conf[implode(null,$d)]=\System\Json::read($p."/".$file);}}self::$conf['pages']=\System\Json::read($p=ROOT.self::DIR_CONF_DIST.'/pages.json',true);self::$no_pages=empty(self::$conf['pages']);$dir=opendir($p=ROOT.self::DIR_ROUTES_STATIC);while($f=readdir($dir)){if(strpos($f,".")!==0&&strpos($f,".json")){$key=substr($f,0,strpos($f,"."));self::$conf['pages'][$key]=\System\Json::read($p.'/'.$f);}}$version_path=ROOT.self::FILE_VERSION;if(file_exists($version_path)){$cfg=explode("\n",\System\File::read($version_path));}else{\System\File::put($version_path,implode("\n",$cfg=self::$version_default));}self::$conf['own']=array('short_name'=>$cfg[0],'name'=>$cfg[1],'version'=>$cfg[2],'package'=>$cfg[3],'branch'=>any($cfg[4])?$cfg[4]:'master',);ksort(self::$conf);Status::report('info',"Settings reloaded");}public static function reset(){$p=ROOT.self::DIR_CONF_STATIC;$dir=opendir($p);while($file=readdir($dir)){if(is_file($np=ROOT.self::DIR_CONF_DIST.'/'.self::$env.'/'.$file)){unlink($np);}if(is_file($p.'/'.$file)){copy($p.'/'.$file,$np);chmod($np,\System\File::MOD_DEFAULT);}}}private static function get_cache_filename(){return ROOT.self::CACHE_FILE.'-'.self::$env.'.serial';}private static function cache(){$conf=self::$conf;if(!is_dir(dirname(self::get_cache_filename()))){\System\Directory::create(dirname(self::get_cache_filename()),0770);}$fp=\System\File::put(self::get_cache_filename(),serialize($conf));@chmod(self::get_cache_filename(),0770);Status::report('info','New settings saved');}public static function purge_cache(){@unlink(self::get_cache_filename());}private static function check_cache(){$name=self::get_cache_filename();return is_file($name)&&filemtime($name)>time()-2;}private static function load_cache(){self::$conf=unserialize(\System\File::read(self::get_cache_filename()));ksort(self::$conf);}public static function&get($path){$args=is_array($path)?$path:func_get_args();$i=0;$iter=&self::$conf;foreach($args as $arg){$i++;if(isset($iter[$arg])){$iter=&$iter[$arg];}else{throw new \System\Error\Config(sprintf('There is no config on path \'%s\'',implode('/',$args)));}}return $iter;}public static function set(array $path,$val){$iter=&self::$conf;foreach($path as $arg){if(!isset($iter[$arg])){$iter[$arg]=array();}$iter=&$iter[$arg];}return $iter=$val;}public static function save($module,$env=null){is_null($env)&&($env=self::$env);$path=ROOT.self::DIR_CONF_DIST.'/'.$env.'/'.$module.".json";$data=\System\Json::json_humanize(json_encode(self::get($module)));if(!($action=\System\File::put($path,$data))){throw new \System\Error\Permissions(sprintf('Failed to write settings. Please check your permissions on directory \'%s\'',ROOT.self::DIR_CONF_DIST));}self::purge_cache();self::reload();return $action;}public static function get_env(){return self::$env;}public static function set_env($env=null){if(is_null($env)){if(defined("YACMS_ENV")){self::$env=YACMS_ENV;}elseif(file_exists($ef=ROOT.self::DIR_CONF_DIST.'/env')){self::$env=trim(\System\File::read($ef));}}else{self::$env=$env;}if(!defined("YACMS_ENV")){define("YACMS_ENV",self::$env);}}public static function env_exists($env){return is_dir(ROOT.self::DIR_CONF_DIST.'/'.$env);}public static function is_this_first_run(){return!file_exists($p=ROOT.self::DIR_CONF_ALL.'/install.lock');}public static function is_page_tree_ready(){return!self::$no_pages;}}} namespace System{class Module{const BASE_DIR='/lib/module';static private $instance_count=0;static private $array_forced_locals=array("conds","opts");private $id,$path,$locals,$slot,$parents;public function __construct($module,$locals=array(),$parents=array()){self::$instance_count++;$this->path='/'.$module;$this->locals=$locals;$this->parents=$parents;if(!empty($this->locals['module_id'])){$this->id=$this->locals['module_id'];}else{$this->id=self::get_new_id();}$this->slot=def($locals['slot'],Template::DEFAULT_SLOT);}public function get_path(){return $this->path;}public function get_name(){return t('module_name',$this->path);}public function get_id(){return $this->id;}public function make(){$path=ROOT.self::BASE_DIR.$this->path.'.php';if(file_exists($path)){if(is_readable($path)){if(user()->is_root()||user()->has_right_to('*')||user()->has_right_to(substr($this->get_path(),1))){if(!is_array($this->locals))$this->locals=array($this->locals);$locals=&$this->locals;def($locals['per_page'],20);def($locals['page'],intval(\System\Input::get('page')));if(is_array($locals)){$input=Input::get('page');$propagated=array();if(any($this->parents)){$propagated=DataBus::get_data($this->parents);$locals=array_merge($locals,$propagated);}foreach(self::$array_forced_locals as $var){if(isset($locals[$var])&&!is_array($locals[$var])){throw new \System\Error\Argument(sprintf('Local variable "$%s" must be an array for module "%s"',$var,$this->get_path()));}}foreach($locals as $key=>&$val){if(is_numeric($key)){$key='local_attr_'.$key;$locals[$key]=&$val;}else{$key=str_replace('-','_',$key);}$val==='#'&&$val=end($input);if(!is_object($val)&&!is_array($val)&&preg_match("/^\#\{[0-9]{1,3}\}$/",$val)){$temp=\System\Page::get_path_variables();$temp_key=intval(substr($val,2));if(isset($temp[$temp_key])){$val=$temp[$temp_key];}else throw new \System\Error\Argument(sprintf('Path variable #{%s} was not found.',$temp_key));}!is_object($val)&&!is_array($val)&&strpos($val,'#user{')===0&&$val=soprintf(substr($val,5),user());$$key=&$val;}}$req=require($path);if(any($propagate)){DataBus::save_data($this,$propagate);}return!!$req;}else throw new \System\Error\Permissions(sprintf('Cannot access module "%s". Permission denied.',$this->get_path()));}else throw new \System\Error\Permissions(sprintf('Cannot access module "%s". File is not readable.',$this->get_path()));}else throw new \System\Error\File(sprintf('Module not found: "%s", expected on path "%s".',$this->get_path(),$path));}public function req($var_name){if(!is_null($this->locals[$var_name])){return $this->locals[$var_name];}else throw new \System\Error\Argument(sprintf('Local variable "%s" must be defined and not null for module "%s"!',$var_name,$this->get_path()));}public function template($name,array $locals=array()){if($name instanceof \System\Form){$f=$name;$f->check_group_end();$f->check_tab_group_end();$f->check_inputs_end();$name=\System\Form::get_default_template();$locals+=array("f"=>$f);}$locals=array_merge($this->locals,$locals);$locals['module_id']=$this->id;Template::insert($name,$locals,def($this->locals['slot'],Template::DEFAULT_SLOT));}static public function get_new_id(){return 'noname-'.self::$instance_count;}public static function get_all($with_perms=false){$mods=array();$path=ROOT.self::BASE_DIR;\System\Directory::find_all_files($path,$mods,'/\.php$/');sort($mods);foreach($mods as&$mod){$mod=array("path"=>preg_replace('/\.php$/','',substr($mod,strlen($path)+1)));if($with_perms){$mod['perms']=get_all("\System\User\Perm",array("type"=>'module',"trigger"=>$mod['path'],))->fetch();}}return $mods;}public static function exists($mod){return file_exists(ROOT.self::BASE_DIR.'/'.$mod.'.php');}public static function eval_conds(array $conds){$result=true;foreach($conds as $cond_str){strpos($cond_str,',')===false&&$cond_str.=',';list($cond,$val)=explode(',',$cond_str,2);switch($cond){case 'logged-in':$result=$result&&\System\User::logged_in();break;case 'logged-out':$result=$result&&!\System\User::logged_in();break;}}return empty($conds)||$result;}}}namespace{define('YAWF_PACKED', true); define("NL","\n");define("TAB","\t"); function __autoload($class_name){$found=false;$file=\System\Loader::get_class_file_name($class_name,true);file_exists($f=ROOT."/lib/class/".$file)&&$found=include($f);method_exists($class_name,'autoinit')&&$class_name::autoinit();$cname=ucfirsts(members_to_path(explode('\\',$class_name)),'::','::');if(!$found){throw new System\Error\File(sprintf('Class or interface "%s" was not found. Expected on path "%s"',$cname,$file));}if(!class_exists($class_name)&&!interface_exists($class_name)){throw new System\Error\Internal(sprintf('Class or interface "%s" was expected in "%s" but not found.',$cname,$file));}}} namespace{function any(&$var){return!empty($var);}function first(array $array){return reset($array);}function last(array $array){return $array[count($array)-1];}function first_key(array $array){$keys=array_keys($array);return reset($keys);}function clear_url($url){if(!is_array($url))$url=explode('/',$url);return implode('/',$url);}function clear_this_url(&$url){$url=clear_url($url);}function members_to_path(array $members){return strtolower(is_array($members)?implode('::',$members):$members);}function v(){$trace=debug_backtrace();foreach(func_get_args()as $var){$path='';if(isset($trace[0]['file'])){$path.=basename($trace[0]['file']);if(isset($trace[0]['line'])){$path.=":".$trace[0]['line'];}$path.=", ";}if(isset($trace[0]['class'])){$path.=$trace[0]['class'].'::'.$trace[0]['function']."()";}elseif(isset($trace[0]['function'])){$path.=$trace[0]['function']."()";}echo '<div class="debug dump"><b>'.$path."</b><pre>";function_exists('var_export')&&!is_string($var)?var_dump($var):print_r($var);echo '</pre></div>';}}function gen_random_string($length=64){$str=md5(intval(strval(rand(1,1000)*rand(1,1000)/rand(1,1000)*rand(1,1000))));if(strlen($str)>$length)$str=substr($str,0,$length-1);return $str;}function collect($func,$array,$dont_assoc=false){if(is_array($func)){if($func[0]=='this'){array_shift($func);foreach($array as&$obj){$f=implode('::',$func);$obj->$f();}}elseif($func[0]=='attr'){$names=array();foreach($array as&$obj){if(is_object($obj)){if($dont_assoc){$names[]=$obj->$func[1];}else{$names[$obj->id]=$obj->$func[1];}}elseif(is_array($obj)){$names[]=$obj[$func[1]];}else $names[]=$obj;}return $names;}else{return array_map($func,$array);}}elseif(is_callable($func)){foreach($array as&$item){$item=$func($item);}}else{$names=array();foreach($array as $item){$names[]=$item[$func];}return $names;}return $array;}function collect_pair($func_keys,$func_data,array $data){$keys=collect($func_keys,$data,true);$data=collect($func_data,$data,true);return empty($keys)?array():array_combine($keys,$data);}function def(&$var,$def_val=null){return is_null($var)?($var=$def_val):$var;}function stprintf($str,array $data=array(),$strict=true,$prefix=null){if($str===null)return null;$keys=array('\{','\}');$vals=array('','');foreach($data as $k=>$v){if($v instanceof DateTime){$v=format_date($v,'human');}elseif(is_object($v)){$v='{object}';}elseif(is_array($v)){$v=implode(', ',$v);}$keys[]='{'.($prefix?$prefix.'_':'').$k.'}';$vals[]=$v;}$str=str_replace($keys,$vals,$str);return $strict?preg_replace("/\{[a-zA-Z\-\_]\}/","",$str):$str;}function soprintf($str,System\Model\Attr $object,$strict=true,$prefix=null){$data=array_merge($object->get_opts(),$object->get_data());if($object instanceof System\Model\Database){$data[System\Model\Database::get_id_col(get_class($object))]=$object->id;}if(!$object->has_attr('seoname')){$data['seoname']=$object->get_seoname();}return stprintf($str,$data,$strict,$prefix);}function ucfirsts($str,$separator='-',$replacement=' '){$temp=explode($separator,$str);foreach($temp as&$part){$part=cflc($part);}return implode($replacement,$temp);}function cflc($str,$case=System\Template::CASE_UPPER){if(is_array($str)){foreach($str as&$s){$s=cflc($s);}}else{$str=mb_convert_case(mb_substr($str,0,1),$case).mb_substr($str,1);}return $str;}function read_dir_contents($dir,array&$files=array(),array&$directories=array(),array&$used=array()){$od=opendir($dir);while($f=readdir($od)){if($f!='.'&&$f!='..'){$fp=$dir.'/'.$f;if(is_dir($fp)){read_dir_contents($fp,$files,$directories,$used);if(!in_array($fp,$used)){$directories[]=$fp;$used[]=$fp;}}else{if(!in_array($fp,$used)){$files[]=$fp;$used[]=$fp;}}}}closedir($od);}function hash_passwd($str){return sha1(md5('PERFECT_STRING_PREFIX'.$str.'PERFECT_STRING_POSTFIX'.crc32($str)));}function collect_ids(array $list){return collect(array('attr','id'),$list);}function collect_names(array $list){return collect(array('this','get_name'),$list);}} namespace{class Tag extends System\Template\Tag{}class Stag extends Tag{public static function __callStatic($name,$args){$attrs=&$args[0];$attrs['output']=false;return parent::tag($name,$attrs);}}function close($tagname){return Tag::close($tagname);}function div($class,$content=null,$id=null){return Tag::tag('div',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function ul($class,$content=null,$id=null){return Tag::tag('ul',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function get_all($model,array $conds=array(),array $opts=array(),array $joins=array()){return System\Model\Database::get_all($model,$conds,$opts,$joins);}function get_first($model,array $conds=array(),array $opts=array(),array $joins=array()){return System\Model\Database::get_first($model,$conds,$opts,$joins);}function count_all($model,array $conds=array(),array $opts=array(),array $joins=array()){return System\Model\Database::count_all($model,$conds,$opts,$joins);}function find($model,$ids=array(),$force_array=false){return System\Model\Database::find($model,$ids,$force_array);}function create($model,array $attrs){return System\Model\Database::create($model,$attrs);}function message($status,$title,$message=null,$autohide=false,$links=array()){$msg=new System\Message($status,$title,$message,$autohide,$links,false);return $msg->get_retval();}function t_message($status,$title,$message=null,$autohide=false,$links=array()){$msg=new System\Message($status,$title,$message,$autohide,$links,false);System\Template::partial("system/message",array("message"=>$msg));return $msg->get_retval();}function redirect_now($url,$code=\System\Http::FOUND){return System\Http::redirect($url,$code);}function redirect($url,$code=\System\Http::FOUND,$when=\System\Flow::REDIRECT_AFTER_MODULES){return System\Flow::redirect($url,$code,$when);}function link_for($label,$url=null,$object=array()){return System\Template::link_for($label,$url,$object);}function icon_for($icon,$size=32,$url,$label=NULL,$object=array()){return System\Template::icon_for($icon,$size,$url,$label,$object);}function label_for($icon,$size=32,$label,$url,$object=array()){return System\Template::label_for($icon,$size,$url,$label,$object);}function label_right_for($icon,$size=32,$label,$url,$object=array()){return System\Template::label_right_for($icon,$size,$url,$label,$object);}function icon($icon,$size=32,array $attrs=array()){return System\Template::icon($icon,$size,$attrs);}function format_date($datetime=null,$format='std'){return System\Template::format_date($datetime,$format);}function heading($label,$save_level=true,$level=NULL){return System\Template::heading($label,$save_level,$level);}function section_heading($label,$level=NULL){return System\Template::section_heading($label,$level);}function content_for($place,$content,$overwrite=false){return System\Output::content_for($place,$content,$overwrite);}function content_from($place){return System\Output::content_from($place);}function slot($name=System\Template::DEFAULT_SLOT){return System\Output::slot($name);}function yield(){return System\Output::yield();}function title(){return System\Output::get_title(true);}function path(){return System\Page::get_path();}function get_css_color($color){return System\Template::get_css_color($color);}function get_color_container($color){return System\Template::get_color_container($color);}function user(){return System\User::get_active();}function logged_in(){return System\User::logged_in();}function strlen_binary($str){return System\Locales::strlen_binary($str);}function l($str,$lang=null){return System\Locales::translate($str,$lang);}function t($str){return System\Locales::translate_and_replace($str,func_get_args());}function cfg(){return System\Settings::get(func_get_args());}function cfgs(array $path,$value){return System\Settings::set($path,$value);}}