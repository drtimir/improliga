<? namespace System\Model{abstract class Attr{protected $data=array();protected $opts=array();protected static $attr_types=array('bool','int','int_set','varchar','blob','text','float','datetime','password','json','image','gps','list','object',);static protected $obj_attrs=array('object','image');static protected $merged_attrs=array();public function __construct(array $dataray=array()){$model=get_model($this);self::check_properties($model);$this->update_attrs($dataray);if(isset($model::$attrs['pass'])){foreach($model::$attrs['pass']as $attr){$old_attr=$attr.'_old';$this->$old_attr=$this->$attr;}}if(method_exists($this,'construct')){$this->construct($dataray);}unset($this->opts['changed']);}public function __get($attr){if(!in_array($attr,array('data','opts'))){$model=get_model($this);$attr=='id'&&isset($model::$id_col)&&$attr=$model::$id_col;return $this->has_attr($attr)?$this->get_attr_value($attr):(isset($this->opts[$attr])?$this->opts[$attr]:null);}throw new \System\Error\Argument(sprintf('Trying to access internal private attribute "%s" for model "%s"',$attr,get_model($this)));}public function __set($attr,$value){if($this->has_attr($attr)){$def=self::get_attr(get_model($this),$attr);if(!isset($def['writeable'])||$def['writeable']){$null_error=false;if(is_null($value)){if(empty($def['is_null'])){if(any($def['default'])){$value=$def['default'];}}}$this->data[$attr]=self::convert_attr_val(get_model($this),$attr,$value);$this->changed=true;}else throw new \System\Error\Model(sprintf("Attribute '%s' is not publicly writeable for model '%s'.",$attr,get_model($this)));}else $this->opts[$attr]=$value;return $this;}public function get_data(){return $this->data;}public function get_opts(){return $this->opts;}public function update_attrs(array $update){foreach($update as $attr=>$val){$this->__set($attr,$val);}return $this;}public static function attr_exists($model,$attr){return array_key_exists($attr,$model::$attrs);}public function has_attr($attr){return self::attr_exists(get_model($this),$attr);}public function attr_required($attr){$model=get_model($this);return in_array($attr,$model::$required);}public static function get_model_attr_list($model){$attrs=array();foreach($model::$attrs as $attr=>$def){$attrs[]=$attr;}return $attr;}public static function get_model_attrs($model){$attrs=array();foreach($model::$attrs as $attr=>$def){if(empty($def['is_fake'])){$attrs[$attr]=$def;}}return $attrs;}public static function get_attr_def($model){return $model::$attrs;}public static function get_attr_type($model,$attr){if(self::attr_exists($model,$attr)){return $model::$attrs[$attr][0];}else throw new \System\Error\Model(sprintf('Attribute "%s" of model "%s" does not exist.',$attr,$model));}public static function get_attr($model,$attr){if(self::attr_exists($model,$attr)){$attr_data=&$model::$attrs[$attr];if(in_array($attr_data[0],array('varchar','password'))){if(!isset($attr_data['length']))$attr_data['length']=255;}if($attr_data[0]==='text'){if(!isset($attr_data['length']))$attr_data['length']=65535;}return $attr_data;}throw new \System\Error\Model(sprintf('Attribute "%s" of model "%s" does not exist!',$attr,$model));}public static function convert_attr_val($model,$attr,$val=null){$attr_data=self::get_attr($model,$attr);if(isset($attr_data['is_null'])&&$attr_data['is_null']&&is_null($val)){return $val=null;}switch($attr_data[0]){case 'int':{$val=intval($val);break;}case 'float':{$val=floatval($val);break;}case 'bool':{$val=is_null($val)?false:!!$val;break;}case 'password':case 'text':case 'varchar':{$val=mb_substr(strval($val),0,$attr_data['length']);break;}case 'datetime':{$is_null=!isset($attr_data['is_null'])||!$attr_data['is_null'];if(!($val instanceof \DateTime)){if(any($val)){$val=new \DateTime($val);}if(!$is_null&&!$val){$val=new \DateTime();}}break;}case 'image':{if(!($val instanceof \System\Image)){if(is_array($val)&&isset($val['name'])&&is_array($val['name'])){foreach($val as&$d){if(is_array($d)){$d=reset($d);}}}if(any($val)&&!is_array($val)||is_array($val)&&(empty($val['src'])||(any($val['src'])&&$val['src']!='actual'))){$val=str_replace("\\","",$val);if(is_array($val)){$val=new \System\Image($val);if(defined('DATA_SEED')){$val->allow_save=true;}}elseif($j=\System\Json::decode($val,true)){$val=\System\Image::from_json($val);}elseif($val){$val=\System\Image::from_path($val);}else{$val=\System\Image::from_scratch();}}else{$val=\System\Image::from_scratch();}}break;}case 'object':{if($val){if(isset($attr_data['model'])){if(!($val instanceof $attr_data['model'])){throw new \System\Error\Argument(sprintf("Value must be instance of '%s' for attribute '%s'",$attr_data['model'],$attr));}}else throw new \System\Error\Argument(sprintf("Attribute '%s' of model '%s' must have model defined!",$attr,$model));}break;}case 'json':{if(any($val)&&is_string($val)){$val=array_filter((array) \System\Json::decode($val));}break;}case 'int_set':{if(any($val)){if(is_array($val)){$val=array_map('intval',array_filter($val));}else{$val=array_map('intval',explode(',',$val));}}else $val=array();break;}case 'point':{if(any($val)&&!($val instanceof \System\Gps)){if(is_array($val)){$val=\System\Gps::from_array($val);}elseif(strpos($val,'POINT(')===0){$val=\System\Gps::from_sql($val);}else{$val=new \System\Gps();}}break;}case 'video_youtube':{if(any($val)&&!($val instanceof \System\Video\Youtube)){if(is_string($val)){($vid=\System\Video\Youtube::from_url($val))||($vid=\System\Video\Youtube::from_id($val));$val=$vid;}else throw new \System\Error\Format('Cannot create Youtube video object from "'.gettype($val).'".');}}case 'list':{if(!is_array($val)){$val=(array) $val;}}}return $val;}public function changed($status=null){if(!is_null($status)){$this->changed=!!$status;}return!!$this->changed;}public function get_attr_name($attr){return self::get_model_attr_name(get_model($this),$attr);}public function get_attr_desc($attr){return self::get_model_attr_desc(get_model($this),$attr);}public function get_model_name($plural=false){return self::get_model_model_name($model,$plural);}public function get_attr_value($attr){if(isset($this->data[$attr])){return $this->data[$attr];}else{$this->__set($attr,null);return $this->data[$attr];}}public function to_json($encode=true){$data=\System\Template::to_json($this->get_data(),false);return $encode?\System\Template::to_json($data):$data;}public static function check_properties($model){if(!isset($model::$attrs)){throw new \System\Error\Model(sprintf("You must define property 'protected static \$attrs' to model '%s' to inherit attr model properly.",$model));}}public function to_html(\System\Template\Renderer $ren){return sprintf('%s',$ren->locales()->trans_class_name(get_class($this)));}public function __toString(){return sprintf('[%s]',\System\Loader::get_model_from_class(get_class($this)));}}} namespace System\Model{abstract class Callback extends Attr{const BEFORE_SAVE='before_save';const BEFORE_DELETE='before_delete';const AFTER_SAVE='after_save';const AFTER_DELETE='after_delete';private static $callbacks=array(self::BEFORE_SAVE=>array(),self::BEFORE_DELETE=>array(),self::AFTER_SAVE=>array(),self::AFTER_DELETE=>array(),);public function add_callback($trigger,Closure $lambda){if(array_key_exists($trigger,self::$callbacks)){$model=get_class($this);if(!isset(self::$callbacks[$trigger][$model])){self::$callbacks[$trigger][$model]=array();}self::$callbacks[$trigger][$model][]=$lambda;}return $this;}public function run_tasks($trigger,array $args=array()){$model=get_class($this);if(any(self::$callbacks[$trigger][$model])){foreach(self::$callbacks[$trigger][$model]as $task){$task($this,$args);}}}}} namespace System\Model{abstract class Database extends Callback{const REL_BELONGS_TO='belongs_to';const REL_HAS_ONE='has_one';const REL_HAS_MANY='has_many';const ALLOW_RELATION_DELETE=false;static protected $table;static protected $id_col;static protected $tables_generated=array();static protected $id_cols_generated=array();static protected $relation_types=array(self::REL_BELONGS_TO,self::REL_HAS_ONE,self::REL_HAS_MANY);static private $models_checked=array();static private $quick_conds=array("visible"=>true,"deleted"=>false,"used"=>true,);protected $relations=array();public static function get_table($model){if(isset($model::$table)){return $model::$table;}elseif(isset(self::$tables_generated[$model])){return self::$tables_generated[$model];}else{return self::$tables_generated[$model]=implode('_',array_map('strtolower',array_filter(explode('\\',$model))));}}public static function attr_exists($model,$attr){self::check_relations($model);return $attr==self::get_id_col($model)||parent::attr_exists($model,$attr);}public static function check_relations($model){if(!isset(self::$models_checked[$model])){self::$models_checked[$model]=true;$is_true=false;$name=null;foreach($model::$attrs as $attr_name=>$def){if($def[0]===self::REL_BELONGS_TO){$rel_attr_name=self::get_belongs_to_id($model,$attr_name);self::add_attribute($model,$rel_attr_name,self::get_default_belongs_to_def($rel_attr_name));}}}}public static function get_default_belongs_to_def($name){return array('int',"is_unsigned"=>true,"is_index"=>true,"is_fake"=>true,"is_generated"=>true,"rel"=>$name);}private static function add_attribute($model,$attr,array $def){$model::$attrs[$attr]=$def;}public static function get_belongs_to_id($model,$attr){if(self::is_rel($model,$attr)){$def=self::get_attr($model,$attr);if($def[0]===self::REL_BELONGS_TO){if(any($def['foreign_key'])){return $def['foreign_key'];}else{return empty($def['is_natural'])?("id_".$attr):self::get_id_col($def['model']);}}}throw new \System\Error\Model(sprintf('Attribute "%s" of model "%s" is not belongs_to relation.',$model,$attr));}public static function get_id_col($model){if(isset($model::$id_col)){return $model::$id_col;}elseif(isset(self::$id_cols_generated[$model])){return self::$id_cols_generated[$model];}else{return self::$id_cols_generated[$model]='id_'.self::get_table($model);}}public static function create($model,array $attrs){$obj=new $model($attrs);return $obj->save();}public static function get_all($model,array $conds=array(),array $opts=array(),array $joins=array()){if(!$model||!class_exists($model))throw new \System\Error\Argument(sprintf('Model %s not found',$model));if(empty($opts['order-by'])&&self::attr_exists($model,'order')){$opts['order-by']="`t0`.`order` ASC";}$helper=new \System\Database\Query(array("table"=>self::get_table($model),"cols"=>self::get_model_attr_list($model),"opts"=>$opts,"conds"=>$conds,"model"=>$model,));if(isset($model::$belongs_to)){if(!is_array(\System\Cache::fetch('basicmodel-merge-attrs-'.$model,$attrs_to_merge))){$attrs_to_merge=array();foreach($model::$belongs_to as $k=>$b){if(isset($b['merge-model'])&&$b['merge-model']&&$jmodel=$b['model']){if(!empty($b['cols'])){$attr_def=array();foreach($b['cols']as $col){$t=self::get_attr_type($jmodel,$col);if(!isset($attr_def[$t])){$attr_def[$t]=array();}$attr_def[$t][]=$col;}}else{$attr_def=$jmodel::$attrs;}$attrs_to_merge[]=array(self::get_table($jmodel),"USING(".(self::get_id_col($jmodel)).")",'extension_'.$k,$attr_def);}}\System\Cache::store('basicmodel-merge-attrs-'.$model,$attrs_to_merge);}if(!isset(self::$merged_attrs[$model])){self::$merged_attrs[$model]=array();foreach($attrs_to_merge as $jattr){self::$merged_attrs[$model]=array_merge_recursive(self::$merged_attrs[$model],$jattr[3]);}}foreach($attrs_to_merge as $jattr){$helper->join($jattr[0],$jattr[1],$jattr[2]);$helper->add_cols($jattr[3],$jattr[2]);}}if(any($joins)){foreach($joins as $join){def($join[3],'');$join[0]?$helper->left_join($join[1],$join[2],$join[3]):$helper->join($join[1],$join[2],$join[3]);}}return $helper;}public static function find($model,$ids=NULL,$force_list=false){if(is_array($ids)||($ex=strpos($ids,','))){any($ex)&&$ids=explode(',',$ids);$conds=array(self::get_id_col($model)." IN ('".implode('\',\'',$ids)."')");return self::get_all($model,$conds)->fetch();}else{$col=self::get_id_col($model);if(!is_numeric($ids)){if(self::attr_exists($model,'seoname')){$col='seoname';}else{$ids=\System\Url::get_seoid($ids);}}$conds=array($col=>$ids);$result=self::get_first($model,$conds)->fetch();return $force_list?array($result):$result;}}public static function get_first($model,array $conds=array(),array $opts=array()){$opts['limit']=1;$opts['first']=true;return self::get_all($model,$conds,$opts);}public static function count_all($model,array $conds=array(),array $opts=array()){$helper=self::get_all($model,$conds,$opts);return $helper->count();}public static function is_rel($model,$attr){if(self::attr_exists($model,$attr)){$def=self::get_attr($model,$attr);return in_array($def[0],self::$relation_types);}return false;}public function __set($attr,$value){$model=get_model($this);if(self::is_rel($model,$attr)){$type=self::get_attr_type($model,$attr);if($type==self::REL_HAS_MANY){$this->set_rel_has_many($attr,$value);}else{$this->set_rel_single_value($attr,$value);}return $this;}if($attr=='id'||$attr==self::get_id_col(get_model($this))){$this->data[self::get_id_col(get_model($this))]=intval($value);}return parent::__set($attr,$value);}public function set_rel_has_many($attr,$value){$invalid=false;if(is_array($value)){$corrected=array();$model=get_model($this);$def=self::get_attr($model,$attr);foreach($value as $val){if(is_object($val)){$corrected[]=$val;}else{if(gettype($val)=='string'){$val=intval($val);}if(gettype($val)=='integer'&&$val>0){$corrected[]=$val;}else{$invalid=true;break;}}}if($invalid){if(is_object($val)){$report_val='Instance of '.get_model($value);}else{$report_val=gettype($val);}throw new \System\Error\Model(sprintf("Invalid value was given to has_many relation '%s' of model '%s'. Values must be instances of '%s' or int greater than zero. '%s' was given.",$attr,$model,$def['model'],$report_val));}$this->relations[$attr]=$value;}else throw new \System\Error\Model(sprintf("Value given to has_many relations must be array. Type of '%s' was supplied to attribute '%s' of model '%s'.",gettype($value),$attr,get_model($this)));}public function set_rel_single_value($name,$value){$model=get_model($this);$type=self::get_attr_type($model,$name);$def=self::get_attr($model,$name);if($type==self::REL_BELONGS_TO||$type==self::REL_HAS_ONE){if(is_object($value)){if($value instanceof $def['model']){$this->relations[$name]=$value;if($type==self::REL_BELONGS_TO){$idc=self::get_belongs_to_id($model,$name);$this->$idc=$value->id;}}else throw new \System\Error\Argument(sprintf("Value for attr '%s' of model '%s' must be instance of '%s' by definition. Instance of '%s' was given.",$name,$model,$def['model'],get_model($value)));}else throw new \System\Error\Argument(sprintf("Value for attr '%s' of model '%s' which is '%s' relation must be object that inherits System\Model\Database. '%s' was given.",$name,$model,$type,gettype($value)));}return $this;}public function __get($attr){$model=get_model($this);if(self::is_rel($model,$attr)){return $this->get_rel($attr);}else{if($attr=='id'||$attr==self::get_id_col(get_model($this))){return def($this->data[self::get_id_col(get_model($this))],0);}return parent::__get($attr);}}protected function get_rel($rel){$model=get_model($this);if(self::is_rel($model,$rel)){$type=self::get_attr_type($model,$rel);if($type==self::REL_HAS_MANY){return $this->get_rel_has_many($rel);}elseif($type==self::REL_HAS_ONE){return $this->get_rel_has_one($rel);}elseif($type==self::REL_BELONGS_TO){return $this->get_rel_belongs_to($rel);}else throw new \System\Error\Argument(sprintf("Attribute '%s' of model '%s' is not a relation of any known type.",$model,$rel));}throw new \System\Error\Argument(sprintf("Attribute '%s' of model '%s' is not a relation of any kind.",$model,$rel));}protected function get_rel_has_many($rel){$model=get_model($this);$rel_attrs=self::get_attr($model,$rel);$join_alias='t0';$helper=get_all($rel_attrs['model'],array(),array());if(any($rel_attrs['is_bilinear'])){$join_alias='t_'.$rel;$table_name=self::get_bilinear_table_name($model,$rel_attrs);$helper->join($table_name,"USING(".self::get_id_col($rel_attrs['model']).")",$join_alias);$idc=any($rel_attrs['foreign_name'])?$rel_attrs['foreign_name']:self::get_id_col($model);}else{$foreign=self::get_rel_bound_to($model,$rel);$idc=self::get_belongs_to_id($rel_attrs['model'],$foreign);}self::attr_exists($rel_attrs['model'],'order')&&$helper->add_opts(array("order-by"=>"`t0`.".'`order` ASC'));$helper->where(array($idc=>$this->id),$join_alias);$helper->assoc_with($rel_attrs['model']);$this->id?$helper->cancel_ignore():$helper->ignore_query(array());return $helper;}protected function get_rel_has_one($rel){if(empty($this->relations[$rel])){$model=get_model($this);$rel_attrs=self::get_attr($model,$rel);if(any($rel_attrs['foreign_key'])){$conds=array($rel_attrs['foreign_key']=>$this->id);}else{$idc=any($rel_attrs['foreign_name'])?'id_'.$rel_attrs['foreign_name']:self::get_id_col($model);$conds=array($idc=>$this->id);}if($rel_attrs['conds']){$conds=array_merge($rel_attrs['conds'],$conds);}$this->relations[$rel]=get_first($rel_attrs['model'],$conds)->fetch();}return $this->relations[$rel];}protected function get_rel_belongs_to($rel){if(empty($this->relations[$rel])){$model=get_model($this);$rel_attrs=self::get_attr($model,$rel);$idf=any($rel_attrs['foreign_key'])?$rel_attrs['foreign_key']:self::get_id_col($rel_attrs['model']);$idl=any($rel_attrs['is_natural'])?self::get_id_col($rel_attrs['model']):('id_'.$rel);$conds=array($idf=>$this->$idl);if(any($rel_attrs['conds'])){$conds=array_merge($rel_attrs['conds'],$conds);}$this->relations[$rel]=get_first($rel_attrs['model'],$conds)->fetch();}return $this->relations[$rel];}public static function get_bilinear_table_name($model,array $rel_attrs){$name=array();if(any($rel_attrs['is_master'])){$name['master']=\System\Model\Database::get_table($model);$name['slave']=\System\Model\Database::get_table($rel_attrs['model']);}else{$name['master']=\System\Model\Database::get_table($rel_attrs['model']);$name['slave']=\System\Model\Database::get_table($model);}return implode('_has_',$name);}public function get_seoname(){if($this->has_attr('name')){return $this->id?\System\Url::gen_seoname($this->name).'-'.$this->id:null;}else{return $this->id;}}public function update_check(){$model=get_model($this);$e=false;if(isset($model::$required)){foreach($model::$required as $attr){if(!$this->data[$attr]){$e=true;}}}return!$e;}public function save(){$this->run_tasks(\System\Model\Callback::BEFORE_SAVE);$model=get_model($this);if($this->update_check()){if(isset($model::$attrs['pass'])){foreach($model::$attrs['pass']as $attr){$old_attr=$attr.'_old';if(any($this->__get($old_attr))&&$this->$attr!=$this->$old_attr){$this->$attr=hash_passwd($this->$attr);}}}$nochange=array();foreach(self::$obj_attrs as $attr){if(isset($model::$attrs[$attr])){foreach($model::$attrs['image']as $name){if(is_object($this->$name)){if($this->$name->allow_save()){$this->$name->save();}elseif($this->$name->is_to_be_deleted()){$this->data[$name]=null;}else $nochange[]=$name;}else $nochange[]=$name;}}}$data=$this->get_data();foreach($nochange as $attr_name){unset($data[$attr_name]);}self::prepare_data($model,$data);if($this->id&&!$this->is_new_object){\System\Database::simple_update(self::get_table($model),self::get_id_col($model),$this->id,$data);}else{$id=\System\Database::simple_insert(self::get_table($model),$data);if($id){$this->id=$id;}else throw new \System\Error\Database('Could not save model.');}}$this->save_relations();$this->run_tasks(\System\Model\Callback::AFTER_SAVE);return $this;}public function save_relations(){$model=get_model($this);foreach($model::$attrs as $attr=>$def){if($def[0]==self::REL_HAS_MANY){$this->save_relation_hasmany($attr);}if($def[0]==self::REL_HAS_ONE){}}}protected function save_relation_hasmany($attr){if(isset($this->relations[$attr])){$model=get_model($this);$def=self::get_attr($model,$attr);$value=$this->validate_relation_hasmany($attr);$new=collect_ids($value);$current=collect_ids($this->$attr->fetch());$ids_save=array_diff($new,$current);$ids_delete=array_diff($current,$new);if(!empty($def['is_bilinear'])){$table_name=self::get_bilinear_table_name($model,$def);if(any($def['is_master'])){$id_col=self::get_id_col($model);$foreign_key=self::get_id_col($def['model']);}else{$id_col=self::get_id_col($def['model']);$foreign_key=self::get_id_col($model);}$ids_save=array_filter($ids_save);$ids_delete=array_filter($ids_delete);if(any($ids_delete)){$q1=new \System\Database\Query(array("table"=>$table_name));$q1->where(array($id_col=>$this->id),$table_name)->where_in($foreign_key,$ids_delete,$table_name)->delete();}if(any($ids_save)){$q2=new \System\Database\Query(array("table"=>$table_name,"cols"=>array($id_col,$foreign_key)));foreach($ids_save as $id){$q2->add_insert_data(array($foreign_key=>$id,$id_col=>$this->id));}$q2->insert();}}else{$model=get_model($this);$foreign=self::get_rel_bound_to($model,$attr);$foreign_key=self::get_attr($def['model'],$foreign);$idc=self::get_belongs_to_id($def['model'],$foreign);if(any($ids_delete)){$model_id=self::get_id_col($def['model']);if(!empty($foreign_key['is_null'])){$objects=$this->$attr->where_in($model_id,$ids_delete)->fetch();foreach($objects as $obj){$obj->$idc=null;$obj->save();}}else{if($def['model']::ALLOW_RELATION_DELETE){$objects=$this->$attr->where_in($model_id,$ids_delete)->fetch();foreach($objects as $obj){$obj->drop();}}else throw new \System\Error\Model(sprintf("Cannot delete objects of model '%s' by has_many relation change.",$model),sprintf("Set 'is_null' attribute of relation '%s' of model '%s' to true or define class constant called 'ALLOW_RELATION_DELETE' to model '%s'",$foreign,$def['model'],$def['model']));}}foreach($value as $obj){$obj->$idc=$this->id;$obj->save();}}}}public function validate_relation_hasmany($attr){if(isset($this->relations[$attr])){$model=get_model($this);$def=self::get_attr($model,$attr);$value=$this->relations[$attr];$corrected=array();foreach($this->relations[$attr]as $val){if(gettype($val)=='integer'){$obj=find($def['model'],$val);if($obj){$corrected[]=find($def['model'],$val);}else throw new \System\Error\Model(sprintf("Cannot assign object '%s#%s' to instance of '%s'. Object does not exist.",$def['model'],$val,$model));}}return $corrected;}else return array();}protected static function prepare_data($model,array&$data){foreach($model::$attrs as $attr=>$attr_def){if(empty($data[$attr])&&empty($attr_def['is_null'])&&any($attr_def['default'])){$data[$attr]=$attr_def['default'];}if($attr_def[0]==='json'&&isset($data[$attr])){$data[$attr]=json_encode($data[$attr]);}if($attr_def[0]==='int_set'&&isset($data[$attr])){$data[$attr]=implode(',',$data[$attr]);}}}public function drop(){$model=get_model($this);return \System\Database\Query::simple_delete(self::get_table($model),array(self::get_id_col($model)=>$this->id));}public static function get_quick_conds($model){if(is_object($model)){$model=get_model($model);}$conds=array();foreach(self::$quick_conds as $attr=>$val){self::attr_exists($model,$attr)&&$conds[$attr]=$val;}return $conds;}public function is_new(){return!!$this->id;}public function reload(){$model=get_model($this);if($this->id){$this->update_attrs(get_first($model,array(self::get_id_col($model)=>$this->id))->assoc_with_no_model()->fetch());}return $this;}public static function get_all_children(){$all_classes=get_declared_classes();$child_classes=array();foreach($all_classes as $class){if(is_subclass_of('\\'.$class,get_called_class())){$ref=new \ReflectionClass($class);if(!$ref->isAbstract()){$child_classes[$class]=$class;}}}return $child_classes;}public static function get_model_relations($model){$relations=array();foreach($model::$attrs as $attr=>$def){if(self::is_rel($model,$attr)){$relations[$attr]=$def;}}return $relations;}public static function get_model_attr_list($model,$sql_format=true){$attrs=array(self::get_id_col($model));foreach($model::$attrs as $attr=>$def){if(empty($def['is_fake'])){if($sql_format&&$def[0]==='point'){$attrs[$attr]='AsWKT('.$attr.')';}else{if($attr!=self::get_id_col($model)){if(self::is_rel($model,$attr)){$type=self::get_attr_type($model,$attr);if($type===self::REL_BELONGS_TO){$attrs[]=self::get_belongs_to_id($model,$attr);}}else $attrs[]=$attr;}}}}!in_array('created_at',$attrs)&&$attrs[]='created_at';!in_array('updated_at',$attrs)&&$attrs[]='updated_at';return $attrs;}public function has_attr($attr){return self::attr_exists(get_model($this),$attr);}public function __construct(array $update=array()){$model=get_model($this);parent::check_properties($model);if(!array_key_exists($idc=self::get_id_col($model),$model::$attrs)){$model::$attrs[$idc]=array("int","is_unsigned"=>true,"is_index"=>true);}if(!$this->has_attr('created_at')){$model::$attrs['created_at']=array('datetime',"default"=>'NOW()');}if(!$this->has_attr('updated_at')){$model::$attrs['updated_at']=array('datetime');}return parent::__construct($update);}public static function get_attr($model,$attr){if($attr==='id'){$attr=self::get_id_col($model);}return parent::get_attr($model,$attr);}public function get_name($pattern=null){if(is_null($pattern)){return $this->has_attr('name')?$this->name:$this->id;}else{return soprintf($pattern,$this);}}public static function get_location_attrs($model){$attrs=array();if(isset($model::$belongs_to)){foreach($model::$belongs_to as $attr=>$def){if($def['model']==='System\\Location'||$def['model']==='\\System\\Location'){$attrs[]=$attr;}}}return $attrs;}public static function get_model_attr_options($model,$attr){if(self::attr_exists($model,$attr)){if(isset($model::$attrs[$attr]['options'])){return $model::$attrs[$attr]['options'];}else return false;}else throw new \System\Error\Model(sprintf('Attr %s does not exist.',$attr));}public static function get_rel_bound_to($model,$rel){$def=self::get_attr($model,$rel);$match=array();foreach($def['model']::$attrs as $attr=>$def_attr){if($def_attr[0]==self::REL_BELONGS_TO){if($def_attr['model']==$model){$match[]=$attr;}}}if(any($match)){if(count($match)===1){return $match[0];}else throw new \System\Error\Model(sprintf('Model %s has more belongs_to relations that match',$def['model']));}return false;}public function to_html(\System\Template\Renderer $ren){return sprintf('%s %s (#%s)',$ren->locales()->trans_class_name(get_class($this)),$this->get_name(),$this->id);}public function __toString(){return sprintf('[%s#%s]',\System\Loader::get_model_from_class(get_class($this)),$this->is_new()?'new':$this->id);}}} namespace System\Form{abstract class Widget extends \System\Form\Element{const MODEL=null;const KIND='input';const TYPE='widget';const IDENT='widget';protected static $expected;protected static $inputs;protected static $resources=array();protected static $ignore_default_attrs=array();protected static $default_attrs=array("id"=>array("varchar"),"name"=>array("varchar"),"type"=>array("varchar"),"label"=>array("varchar"),"kind"=>array("varchar"),"info"=>array("varchar"),"required"=>array('bool'),"parent"=>array('object',"model"=>'\System\Form\Widget'),"class"=>array('array'),);protected $tools=array();protected $value=null;public function __construct(array $dataray=array()){$model=get_class($this);if(!in_array($model,self::$ignore_default_attrs)){foreach(self::$default_attrs as $attr=>$def){$model::$attrs[$attr]=$def;}self::$ignore_default_attrs[]=$model;}parent::__construct($dataray);}protected function construct(){$this->init_tools();}protected function init_tools(array $tools=null){$model=get_class($this);$tools=is_null($tools)?$model::$inputs:$tools;$value=$this->form()->get_input_value_by_name($this->name);$widget_tools=array();foreach($tools as $key=>$attrs){if(!isset($attrs['ident'])){throw new \System\Error\Model(sprintf("You must define attribute ident for widget tool '%s' of widget '%s'.",$key,get_class($this)));}if($attrs['ident']=='action'){if(empty($attrs['type'])){$attrs['type']='action';}elseif($attrs['type']!='action'){throw new \System\Error\Model(sprintf("Widget tool ident 'action' is reserved for action widget in widget '%s'!",get_class($this)));}}foreach($attrs as $attr_name=>&$attr_val){$matches=array();if(is_string($attr_val)&&preg_match('/\#\{([a-z\_]+)\}/',$attr_val,$matches)){$name=$matches[1];$attr_val=$this->$name;}}$attrs['name']=sprintf($attrs['name'],$this->name);if(any($attrs['label'])){$attrs['label']=$attrs['label'];}$attrs['form']=$this->form();$attrs['parent']=$this;if(empty($attrs['value'])){if(count($tools)===1){$attrs['value']=$value;}else{if(is_array($value)&&isset($value[$attrs['ident']])){$attrs['value']=$value[$attrs['ident']];}if($value instanceof \System\Model\Attr){$ident=$attrs['ident'];$val=$value->$ident;if(any($val)){$attrs['value']=$val;}}}}if(!$this->form()->submited()&&isset($attrs['value'])){$this->form()->use_value($attrs['name'],$attrs['value']);}if($this->required&&isset($attrs['required'])&&$attrs['required']){if(isset($widget_tools['action'])){$attrs['required']=$this->form()->input_value($widget_tools['action']->name)!=\System\Form\Widget\Action::KEEP;}else{$attrs['required']=$this->required;}}else{$attrs['required']=false;}$value=$this->form()->get_input_value_by_name($this->name);$widget_tools[$attrs['ident']]=$this->form()->input($attrs,true);$obj=$this->form()->ignore_input($attrs['name']);}$this->tools=$widget_tools;$this->guess_value();}protected function guess_value(){$value=$this->assemble_value();if(!is_null($this::MODEL)&&$value){$object_model=$this::MODEL;if(!($value instanceof $object_model)){if(method_exists($object_model,'from_form')){$value=$object_model::from_form($value);}else{$value=new $object_model($value);}}}$this->form()->use_value($this->name,$value);}protected function assemble_value(){if($this->form()->submited()){$model=get_class($this);$value=array();$empty=true;if(count($this->tools)>1){foreach($this->tools as $tool){$v=$this->form()->get_input_value_by_name($tool->name);if(is_array($v)){if(any($v['error'])){$v=null;$this->form()->use_value($tool->name,$v);}}$value[$tool->ident]=$v;if(empty($v)){break;}else{$empty=false;}}if(!$empty&&isset($value['action'])){if($value['action']==\System\Form\Widget\Action::NONE){$value=null;}if($value['action']==\System\Form\Widget\Action::KEEP){$value=$this->form()->get_input_value_by_name($this->name,true);}}}else{$keys=array_keys($this->tools);$value=$this->form()->get_input_value_by_name($this->tools[$keys[0]]->name);$empty=false;}return $empty?null:$value;}else return $this->form()->get_input_value_by_name($this->name);}public function get_tools(){return $this->tools;}public function use_resources(\System\Template\Renderer $ren){foreach($this::$resources as $name=>$content){if(is_array($content)){foreach($content as $row){$ren->content_for($name,$row);}}else{$ren->content_for($name,$content);}}return $this;}public function render(\System\Template\Renderer $ren){return \System\Form\Renderer::render_widget($ren,$this);}public function get_tool_count(){return count($this->tools);}public function is_valid(){$valid=true;if($this->form()->submited()){if($this->required&&is_null($this->form()->input_value($this->name))){v($this->form()->input_value($this->name));$this->form()->report_error($this->name,'form_input_empty');$valid=false;}}return $valid;}}} namespace System{class Error extends \Exception{protected $explanation=array();protected $backtrace=array();const HTTP_STATUS=500;function __construct(){$this->explanation=func_get_args();$this->backtrace=debug_backtrace();}public function get_explanation(){return $this->explanation;}public function get_backtrace(){return $this->backtrace;}public function get_name(){return str_replace('system/error/','',\System\Loader::get_class_file_name(get_class($this)));}public function get_http_status(){return $this::HTTP_STATUS;}public static function from_exception(\Exception $e){$exc=new self($e->getMessage());$exc->backtrace=$e->getTrace();return $exc;}}} namespace System\Error{class File extends \System\Error{}} namespace System\Model{abstract class Color extends Database{public function get_color(){return array($this->red,$this->green,$this->blue,$this->alpha);}}} namespace System{class User extends Model\Database{const COOKIE_USER='pwf_user';static protected $attrs=array("login"=>array('varchar',"is_unique"=>true),"first_name"=>array('varchar'),"last_name"=>array('varchar'),"nick"=>array('varchar',"is_null"=>true),"password"=>array('password',"default"=>''),"avatar"=>array('image',"default"=>'/share/pixmaps/pwf/anonymous_user.png'),"last_login"=>array('datetime',"default"=>0),"com_email"=>array('bool',"default"=>true),"com_sms"=>array('bool',"default"=>false),"groups"=>array('has_many',"model"=>'\System\User\Group',"is_bilinear"=>true,"is_master"=>true),"contacts"=>array('has_many',"model"=>'\System\User\Contact'));private $rights;public static function guest(){return new self(array("user_id"=>0,"nick"=>'Anonymous',"image"=>\System\Image::from_path("/share/pixmaps/pwf/anonymous_user.png"),));}public function login(\System\Http\Request $request,$password){return $this->password==hash_passwd($password)?$this->create_session($request):false;}private function create_session(\System\Http\Request $request){$request->user=$this;$this->last_login=new \DateTime();$this->save();$_SESSION[self::COOKIE_USER]=$this->id;return true;}public function logout(){unset($_SESSION[self::COOKIE_USER]);return true;}public function get_name($pattern=null){return $pattern?soprintf($pattern,$this):$this->first_name.' '.$this->last_name;}public function get_rights(){if(is_null($this->rights)){$conds=array("public"=>true);$ids=collect_ids($this->groups->fetch());if(any($ids)){$conds[]="id_group IN (".implode(',',$ids).")";}$this->rights=get_all("\System\User\Perm")->where($conds,"t0",true)->reset_cols()->add_cols(array("trigger","type","id_system_user_perm"),"t0")->assoc_with('')->fetch('trigger','id_system_user_perm');}return $this->rights;}public function has_right($to){if($to==='*'){$has=cfg('site','modules','allow_by_default');}else{if(empty($this->rights)){$this->get_rights();}$has=array_key_exists($to,$this->rights);}return $this->is_root()||$has;}public function is_root(){return $this->login=='root';}public function get_mailer_types(){return array('email');}public function delete(){return $this->is_root()?$this:parent::delete();}public function get_seoname(){$this->name=$this->get_name();return parent::get_seoname();}function get_group_ids(){return collect_ids($this->groups->fetch());}function get_setup(){if(!$this->setup){$this->setup=User\Setup::get_for_user($this->id);}return $this->setup;}public static function gen_passwd($len=12){return implode('-',str_split(substr(md5(rand(1,4096*4096)),0,$len),4));}}} namespace System{abstract class Directory{const MOD_DEFAULT=0775;public static function create($pathname,$mode=self::MOD_DEFAULT){if(strpos($pathname,'/')!==false){$pathname=explode('/',$pathname);}if(is_array($pathname)){$current_dir='';$create=array();do{$current_dir=implode('/',$pathname);if(is_dir($current_dir)){break;}$create[]=array_pop($pathname);}while(any($pathname));if(any($create)){$create=array_reverse($create);$current_dir=implode('/',$pathname);foreach($create as $dir){$current_dir.='/'.$dir;if(!($action=@mkdir($current_dir,$mode))){throw new \System\Error\Permissions(sprintf('Failed to create directory on path "%s" in mode "%s". Please check your permissions.',$current_dir,$mode));}}}}else{if(!($action=@mkdir($pathname,$mode,true))){throw new \System\Error\Permissions(sprintf('Failed to create directory on path "%s" in mode "%s". Please check your permissions.',$pathname,$mode));}}return $action;}public static function check($pathname,$create=true,$mode=self::MOD_DEFAULT){if(!($action=is_dir($pathname))&&$create){$action=self::create($pathname,$mode);}return $action;}public static function find_all_files($path,&$files=array(),$regexp=null){$dir=opendir($path);while($file=readdir($dir)){if(strpos($file,'.')!==0){if(is_dir($p=$path.'/'.$file)){self::find_all_files($p,$files,$regexp);}elseif($regexp===null||preg_match($regexp,$file)){$files[]=$p;}}}return $files;}public static function find($path,$regexp=null){$files=array();self::find_all_files($path,$files,$regexp);return $files;}public static function remove($path){if(strpos('..',$path)===false){if(is_dir($path)){$dp=opendir($path);while($f=readdir($dp)){if($f!='.'&&$f!='..'){is_dir($path.'/'.$f)?self::remove($path.'/'.$f):unlink($path.'/'.$f);}}rmdir($path);}}}}} namespace System\Offcom{class Mail extends \System\Model\Attr{const STATUS_SENT=1;const STATUS_READY=2;const STATUS_SENDING=3;const STATUS_FAILED=4;protected static $attrs=array("subject"=>array('varchar',"required"=>true),"message"=>array('text',"required"=>true),"rcpt"=>array('array',"required"=>true),"headers"=>array('array'),"from"=>array('string',"is_null"=>false),"reply_to"=>array('string',"is_null"=>false),"status"=>array('int',"is_unsigned"=>true),);protected static $default_headers=array("Content-Type"=>'text/plain; charset=utf-8',);public static function create($subject,$message,array $rcpt,$from=null){foreach($rcpt as&$r){$r=trim($r);}return new self(array("subject"=>$subject,"message"=>$message,"rcpt"=>$rcpt,"from"=>$from,"status"=>self::STATUS_READY,));}public static function post($subject,$message,array $rcpt,$from=null){$msg=self::create($subject,$message,$rcpt,$from);return $msg->send();}public static function get_default_headers(){if(!isset(self::$default_headers['X-Mailer'])){self::$default_headers["X-Mailer"]=introduce();}return self::$default_headers;}public function get_sender(){return is_null($this->from)?cfg('offcom','default','sender'):$this->from;}private function validate(){foreach($this->rcpt as $member){if(!self::isAddrValid($member)){throw new \System\Error\Format(sprintf('Recipient ".$member." is not formatted according to RFC 2822.',$member));}}if(!self::isAddrValid($this->get_sender())){throw new \System\Error\Format(sprintf('Sender "%s" is not formatted according to RFC 2822.',$this->get_sender()));}return true;}private function get_encoded_subject(){return '=?UTF-8?B?'.base64_encode($this->subject).'?=';}public function send(){$this->validate();$body=array();$headers_str=array();$rcpt=implode(', ',$this->rcpt);$headers=$this->get_default_headers();$headers['From']=$this->get_sender();$headers['Subject']=$this->get_encoded_subject();if($this->reply_to){if(self::isAddrValid($this->reply_to)){$headers['Reply-To']=$this->reply_to;}else throw new \System\Error\Format(sprintf('Reply-To "%s" is not formatted according to RFC 2822.',$this->get_sender()));}foreach($headers as $header=>$value){$headers_str[]=ucfirsts($header,'-','-').": ".$value;}$body[]=implode("\n",$headers_str)."\n";$body[]=strip_tags($this->message);$body=implode("\n",$body);$this->status=self::STATUS_SENDING;if(!cfg('dev','disable','offcom')){if(mail($rcpt,$this->get_encoded_subject(),'',$body)){$this->status=self::STATUS_SENT;}else $this->status=self::STATUS_FAILED;}return $this->status;}private static function isAddrValid($email,$strict=false){$regex=$strict?'/^([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})$/i':'/^([*+!.&#$|\'\\%\/0-9a-z^_`{}=?~:-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})$/i';return preg_match($regex,trim($email),$matches);}}} namespace System\Offcom{abstract class Request{public static function get($url){if(function_exists('curl_init')){$ch=curl_init();curl_setopt($ch,CURLOPT_URL,$url);curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);curl_setopt($ch,CURLOPT_USERAGENT,introduce());curl_setopt($ch,CURLOPT_HEADER,1);$content=curl_exec($ch);$content=explode("\r\n\r\n",$content,2);$dataray=array("status"=>curl_getinfo($ch,CURLINFO_HTTP_CODE));curl_close($ch);if($dataray['status']===\System\Http\Response::NO_RESPONSE)throw new \System\Error\Connection(sprintf('Remote server was not found for URL "%s".',$url));if($dataray['status']===\System\Http\Response::FORBIDDEN)throw new \System\Error\Offcom(sprintf('Access to URL "%s" was denied',$url));if($dataray['status']===\System\Http\Response::PAGE_NOT_FOUND)throw new \System\Error\Offcom(sprintf('Requested URL "%s" was not found',$url));isset($content[0])&&$dataray['headers']=$content[0];isset($content[1])&&$dataray['content']=$content[1];return new Response($dataray);}else throw new \System\Error\Internal('Please allow CURL extension for System\Offcom\Request class');}static function json($url){return \System\Json::decode(self::get($url),true);}}} namespace System\Offcom{class Response extends \System\Model\Attr{protected static $attrs=array("content"=>array('blob'),"headers"=>array('text'),"status"=>array('int'),);public function ok(){return $this->status>=200&&$this->status<=300;}}} namespace System{class Init{const DIR_INIT='/etc/init.d';public static function full(){self::bind_error_handlers();Settings::init();Locales::init();Cache::init();Database::init();}public static function basic(){self::bind_error_handlers();Settings::init();Locales::init();}public static function cli(){global $argv;$last=end($argv);$_SERVER['REQUEST_URI']=$last=='index.php'?'/':$last;php_sapi_name()!='cli'&&give_up("This program can be run only via PHP CLI !!");!class_exists("CLIOptions")&&give_up("Missing class 'CLIOptions' !!");!class_exists("CLICommands")&&give_up("Missing class 'CLICommands'!!");require_once ROOT."/lib/include/functions.cli.php";\CLIOptions::init();\CLIOptions::parse_options();require_once ROOT."/etc/init.d/core.php";$cmd=\CLIOptions::get('command');\CLICommands::$cmd();}public static function bind_error_handlers(){set_exception_handler(array("System\Status","catch_exception"));set_error_handler(array("System\Status","catch_error"));ini_set('log_errors',true);ini_set('display_errors',true);ini_set('html_errors',false);}public static function run(array $list,array $locals){foreach((array) $locals as $k=>$v){$k=str_replace('-','_',$k);$$k=$v;}foreach($list as $init_step){if(file_exists($f=ROOT.'/etc/init.d/'.$init_step.'.php')){require_once($f);}else throw new \System\Error\File(sprintf("Init file '%s' was not found inside init folder '%s'.",$init_step,\System\Init::DIR_INIT));}}}} namespace System{class Loader{const DIR_CLASS='/lib/class';private static $loaded=false;public static function load_all(){if(!self::$loaded){$files=\System\Directory::find_all_files(ROOT.self::DIR_CLASS);foreach($files as $file){require_once $file;}$loaded=true;}}public static function get_class_file_name($class_name,$with_suffix=false){return str_replace("\_",'/',substr(strtolower(preg_replace("/([A-Z])/","_$1",$class_name)),1)).($with_suffix?".php":'');}public static function get_link_from_model($model){return str_replace('::','_',strtolower($model));}public static function get_link_from_class($model){return str_replace('\\','_',strtolower(preg_replace('/^\\\\/','',$model)));}public static function get_class_from_model($model){return ucfirsts($model,'::','\\');}public static function get_model_from_class($class_name){return ucfirsts($class_name,'\\','::');}}} namespace System\Database{class Query{const NO_TABLE="]-nt-[";private $tables=array();private $cols=array();private $joins=array();private $join_tables=array();private $opts=array();private $conds=array();private $limits=array();private $insert_data=array();private $parsed;private static $queries=0;private $assoc_with_model;private $return_first=false;public function __construct(array $opts=array()){def($opts['opts'],array());if(any($opts['table']))$this->add_tables($opts['table'],(empty($opts['table_alias'])?null:$opts['table_alias']));if(any($opts['cols']))$this->add_cols($opts['cols']);if(any($opts['join']))$this->add_joins($opts['join']);if(any($opts['conds']))$this->where($opts['conds']);if(any($opts['opts']))$this->add_opts($opts['opts']);if(any($opts['model']))$this->assoc_with_model=$opts['model'];if(any($opts['opts']['first']))$this->return_first=!!$opts['opts']['first'];}public function assoc_with($model){$this->assoc_with_model=$model;return $this;}private function add_objects($objects,&$where,$alias=null){if(is_array($objects)){foreach($objects as $alias=>$object){if(is_numeric($alias))$where[]=$object;else $where[$alias]=$object;}}else{$placeholder=&$where[(is_numeric($alias)?null:$alias)];is_array($placeholder)?($placeholder=array_merge($placeholder,$objects)):($placeholder=$objects);}return count($objects);}public function add_tables($objects,$alias=null){if(is_array($objects)){foreach($objects as $alias=>$table){$this->add_objects($objects,$this->tables,$alias);}}else{if(!$alias){$alias='t'.count($this->tables);}$this->add_objects($objects,$this->tables,$alias);}}public function add_cols($objects,$table=null){if(is_null($table)){$table=first_key($this->tables);}elseif($table===false){$table=self::NO_TABLE;}if(is_array($objects)&&is_array(reset($objects))){foreach($objects as $obj){$this->add_cols($obj,$table);}}else $this->add_objects($objects,$this->cols[$table]);return $this;}public function reset_cols(){$this->cols=array();return $this;}public function add_joins(array $objects){$this->add_objects($objects,$this->joins);}private function resolve_table_alias($table_alias){$ta='';if($table_alias){$ta="`".$table_alias."`.";}elseif($table_alias!==false){$k=array_keys($this->tables);if(any($k)){$table_alias=reset($k);$ta="`".$table_alias."`.";}}return $ta;}public function where(array $conds,$table_alias=null,$or=false){if(any($conds)){if($or){$temp=array();}else{$temp=&$this->conds;}$ta=$this->resolve_table_alias($table_alias);if(!empty($conds)){foreach($conds as $col=>$condition){if(is_array($condition)){$this->where($condition,$table_alias,!$or);continue;}if(is_object($condition)){throw new \System\Error\Argument("Query condition cannot be an object!");}elseif(is_numeric($col)&&!is_array($condition)){if(strval($condition)){$temp[]="$condition";}}else{$temp[]=$ta."`$col` = '$condition'";}}}if($or)$this->conds[]="(".join(" OR ",$temp).")";}return $this;}public function has(array $relations){if(any($this->assoc_with_model)){foreach($relations as $rel=>$ids){$rel_attrs=\System\Model\Database::get_attr($this->assoc_with_model,$rel);$rel_key=\System\Model\Database::get_id_col($rel_attrs['model']);$rel_conds='';$rel_table=any($rel_attrs['is_bilinear'])?\System\Model\Database::get_bilinear_table_name($this->assoc_with_model,$rel_attrs):\System\Model\Database::get_table($this->assoc_with_model);if(any($rel_attrs['is_bilinear'])){$rel_conds='USING('.\System\Model\Database::get_id_col($this->assoc_with_model).')';}$this->join($rel_table,$rel_conds,'t_has_'.$rel)->where(array('`t_has_'.$rel.'`.`'.$rel_key.'`'."IN(".implode(',',array_map('intval',$ids)).")"));}}else throw new \System\Error\Database("Query must be associated with model when using query::has()!");return $this;}public function where_in($col,array $conds,$table_alias=null,$or=false){if(any($conds)){$ta=$this->resolve_table_alias($table_alias);return $this->where(array($ta."`$col` IN (".implode(',',array_map('intval',$conds)).")"),$ta,$or);}return $this;}public function sort_by($cond){$this->opts['order-by']=$cond;return $this;}public function add_insert_data(array $data){$this->insert_data[]=$data;}public function add_opts(array $opts){$this->opts=array_merge($this->opts,$opts);return $this;}public function group_by($str){return $this->add_opts(array("group-by"=>$str));}public function distinct(){return $this->add_opts(array("distinct"=>true));}public function join($table,$conds_str,$alias=null,$type=null){$this->join_tables[$alias]=$table;$this->joins[]=($type?$type.' ':null)."JOIN `".$table."`".($alias?' '.$alias:null)." ".$conds_str;return $this;}public function left_join($table,$conds,$alias=null){return $this->join($table,$conds,$alias,'left');}private function prepare($for='select'){$a=false;if(!$this->parsed){if($for!='delete'){$a=true;}foreach($this->tables as $t_alias=>$table){$this->parsed['tables'][]="\n`".$table."`".($a&&$t_alias&&!is_numeric($t_alias)?" `".$t_alias."`":null);!isset($this->cols[$t_alias])&&$this->cols[$t_alias]=array();foreach($this->cols[$t_alias]as $alias=>$col){$fn=strpos($col,'(')!==false;$t=$fn?"":"`".($a&&$t_alias?$t_alias:$table)."`.";$this->parsed['cols'][]=$t.$col.($alias&&!is_numeric($alias)?" `".$alias."`":null);}}foreach($this->join_tables as $t_alias=>$table){foreach(array_merge(isset($this->cols[$table])?(array) $this->cols[$table]:array(),isset($this->cols[$t_alias])?(array) $this->cols[$t_alias]:array())as $alias=>$col){$this->parsed['cols'][]="`".($a&&$t_alias?$t_alias:$table)."`.".$col.($alias&&!is_numeric($alias)?" `".$alias."`":null);}}if(!empty($this->cols[self::NO_TABLE])){foreach($this->cols[self::NO_TABLE]as $name=>$value){$this->parsed['cols'][]="(".$value.") `".$name."`";}}}}public function count(){$this->prepare();$sql="SELECT COUNT(*) "."FROM ".implode(',',(array) $this->parsed['tables']).(!empty($this->joins)?" ".implode(" ",$this->joins):NULL).(!empty($this->conds)?" WHERE ".implode(' AND ',$this->conds):null);self::$queries++;return \System\Database::count($sql);}public static function first_val(array $result){return reset($result);}public function select($get_query=false){if(any($this->opts['falsify-return-value']))return $this->false_return_value;$this->prepare();$sql="SELECT ".(any($this->opts['distinct'])?" DISTINCT ":'').implode(',',$this->parsed['cols'])."\n FROM ".implode(',',(array) $this->parsed['tables']).(!empty($this->joins)?" ".implode(" ",$this->joins):NULL).(!empty($this->conds)?"\n WHERE ".implode(' AND ',$this->conds):null);if(!empty($this->opts['group-by'])){$sql.="\n GROUP BY ".$this->opts['group-by'];}if(!empty($this->opts['order-by'])){$sql.="\n ORDER BY ".$this->opts['order-by'];}if(isset($this->opts['per-page'])){def($this->opts['offset'],0);$sql.="\n LIMIT ".intval($this->opts['offset']).",".intval($this->opts['per-page']);}self::$queries++;return $get_query?$sql:\System\Database::query($sql);}public function insert($get_query=false){$this->prepare();$sql="INSERT INTO `".implode('`, `',$this->tables)."` ";if(any($this->parsed['cols'])){foreach($this->cols as $table){$sql.="(".implode(',',$table).")";}}$this->parsed['insert-data']=array();foreach($this->insert_data as $row){$d=array();foreach($this->cols as $table){foreach($table as $col){\System\Database::escape($row[$col]);$d[]=$row[$col];}}$this->parsed['insert-data'][]="(".implode(',',$d).")";}if(any($this->parsed['insert-data'])){$sql.=" VALUES ".implode(',',$this->parsed['insert-data']);self::$queries++;return $get_query?$sql:\System\Database::query($sql);}else{return false;}}public function delete(){$this->prepare('delete');self::$queries++;return \System\Database::query($sql="DELETE FROM ".implode(',',(array) $this->parsed['tables'])."\nWHERE ".implode(' AND ',$this->conds));}public static function simple_delete($from,array $conds){$helper=new self(array("table"=>$from));$helper=$helper->where($conds,$from);return $helper->delete();}public static function simple_count($table,array $cols=array(),array $conds=array()){if(any($this->opts['falsify-return-value']))return $this->false_return_value;$helper=new self(array("table"=>$table,"conds"=>$conds));return $helper->count();}public static function count_all(){return self::$queries;}public function fetch($key=null,$value=null){if(any($this->opts['falsify-return-value']))return $this->false_return_value;$result=$this->select();$data=$this->assoc_with_model?$result->fetch_model($this->assoc_with_model,$key):$result->fetch_assoc($key,$value);return $this->return_first?(any($data)?reset($data):null):$data;}public function fetch_one(){$this->return_first=true;return $this->fetch();}public function paginate($per_page=20,$page_offset=0){$this->add_opts(array("per-page"=>intval($per_page),"offset"=>intval($per_page)*intval($page_offset)));return $this;}public function ignore_query($retval=NULL){$this->opts['falsify-return-value']=true;$this->false_return_value=$retval;return $this;}public function cancel_ignore(){unset($this->opts['falsify-return-value']);return $this;}public function quick(){return isset($this->assoc_with_model)?$this->where(\System\Model\Database::get_quick_conds($this->assoc_with_model)):$this;}}} namespace System\Database\Driver{class MysqliResult extends \System\Database\Result{public function fetch(){$result=array();if($this->res!==null){$result=$this->res->fetch_assoc();}$this->free&&$this->res->free();return $result;}public function fetch_assoc($key=null,$value=null){$result=array();if($this->res!==null){while($data=$this->res->fetch_assoc()){$d=is_null($value)?$data:$data[$value];if(is_null($key)){$result[]=$d;}else{$result[$data[$key]]=$d;}if($this->first)break;}}$this->first&&$result=$result[0];$this->free&&$this->res->free();return $result;}public function fetch_model($model,$key=null){if(!is_string($model))throw new \System\Error\Argument('Model name must be a string',$model);$result=array();if($this->res!==null){while($data=$this->res->fetch_assoc()){if(is_null($key)){$result[]=new $model($data);}else{$result[$data[$key]]=new $model($data);}if($this->first)break;}}$this->first&&$result=$result[0];$this->free&&$this->res->free();return $result;}}} namespace System\Database\Driver{class Mysqli implements \System\Database\Driver\Ifce{const ERROR_ACCESS_DENIED=1045;const ERROR_DUPLICATE_ENTRY=1062;const ERROR_DATA_TRUNCATED=1265;private $connection;private $autoFree=TRUE;private $buffered;private $config=array();private $db_selected=false;public function __construct(){if(!extension_loaded('mysqli'))throw new \System\Error\Database("PHP extension 'mysqli' is not loaded.");}public function connect(array&$config){$this->config=$config;if(isset($config['resource'])){$this->connection=$config['resource'];}else{if(!isset($config['charset']))$config['charset']='utf8';if(!isset($config['username']))$config['username']=ini_get('mysql.default_user');if(!isset($config['password']))$config['password']=ini_get('mysql.default_password');if(!isset($config['host'])){$host=ini_get('mysql.default_host');if($host){$config['host']=$host;$config['port']=ini_get('mysql.default_port');}else{if(!isset($config['socket']))$config['socket']=ini_get('mysql.default_socket');$config['host']=NULL;}}$host=empty($config['socket'])?$config['host'].(empty($config['port'])?'':':'.$config['port']):$host=':'.$config['socket'];$this->connection=empty($config['persistent'])?@mysqli_connect($host,$config['username'],$config['password']):@mysqli_pconnect($host,$config['username'],$config['password']);$this->select_db($config['database']);}if(!$this->is_connected()){throw new \System\Error\Database('Could not connect to database "'.$config['database'].'" for following reasons.');}if(isset($config['charset'])){$ok=FALSE;if(function_exists('mysql_set_charset')){$ok=@mysqli_set_charset($config['charset'],$this->connection);}!$ok&&$this->query("SET NAMES '$config[charset]'");}if(isset($config['sqlmode'])){$this->query("SET sql_mode='$config[sqlmode]'");}$this->query("SET time_zone='".date('P')."'");$this->buffered=empty($config['unbuffered']);}private function select_db($name){if($this->connection->select_db($name)){$this->db_selected=true;}else throw new \System\Error\Database('Could select database "'.$name.'". Does it exist?');}public function disconnect(){mysqli_close($this->connection);}public function query($sql){$res=$this->connection->query($sql);if($this->connection->errno){throw new \System\Error\Database(mysqli_error($this->connection),mysqli_errno($this->connection),$sql);}return new \System\Database\Driver\MysqliResult($res);}public function count($sql){$result=$this->query($sql);return \System\Database\Query::first_val($result->fetch());}public function get_affected_rows(){return mysqli_affected_rows($this->connection);}public function get_insert_id(){return mysqli_insert_id($this->connection);}public function begin($savepoint=NULL){return $this->query($savepoint?"SAVEPOINT $savepoint":'START TRANSACTION');}public function commit($savepoint=NULL){return $this->query($savepoint?"RELEASE SAVEPOINT $savepoint":'COMMIT');}public function rollback($savepoint=NULL){return $this->query($savepoint?"ROLLBACK TO SAVEPOINT $savepoint":'ROLLBACK');}public function get_resource(){return is_resource($this->connection)?$this->connection:NULL;}public function escape_string($value){if($this->is_connected())return $this->connection->real_escape_string($value);throw new \System\Error\Database('Lost connection to server.');}public function escape_like($value,$pos){$value=addcslashes(str_replace('\\','\\\\',$value),"\x00\n\r\\'%_");return($pos<=0?"'%":"'").$value.($pos>=0?"%'":"'");}public function __destruct(){$this->autoFree&&$this->get_result_resource()&&$this->free();}public function get_result_resource(){$this->autoFree=FALSE;return@$this->resultSet->type===NULL?NULL:$this->resultSet;}public function get_row_count(){if(!$this->buffered){throw new \System\Error\Development('Row count is not available for unbuffered queries.');}return mysqli_num_rows($this->resultSet);}public function fetch($assoc=MYSQL_ASSOC){return mysqli_fetch_array($this->resultSet,$assoc?MYSQL_ASSOC:MYSQL_NUM);}public function seek($row){if(!$this->buffered){throw new \System\Error\Development('Cannot seek an unbuffered result set.');}return mysqli_data_seek($this->resultSet,$row);}public function free(){mysqli_free_result($this->resultSet);$this->resultSet=NULL;}public function get_result_columns(){$count=mysqli_num_fields($this->resultSet);$columns=array();for($i=0;$i<$count;$i++){$row=(array) mysqli_fetch_field($this->resultSet,$i);$columns[]=array('name'=>$row['name'],'table'=>$row['table'],'fullname'=>$row['table']?$row['table'].'.'.$row['name']:$row['name'],'nativetype'=>strtoupper($row['type']),'vendor'=>$row,);}return $columns;}public function create_database(){if($this->is_connected()){$this->query("CREATE DATABASE ".$this->config['database']);}else throw new \System\Error\Database(sprintf("Not connected to any server. Cannot create database %s",$this->config['database']));}public function is_connected(){return is_object($this->connection);}public function has_database(){return $this->db_selected;}public function is_ready(){return $this->is_connected()&&$this->has_database();}}} namespace System\Database\Driver{interface Ifce{public function connect(array&$config);public function disconnect();public function get_insert_id();public function begin();public function commit();public function rollback();}} namespace System\Database\Driver{class PdoResult extends \System\Database\Result{public function fetch(){return $this->first()->fetch_assoc();}public function fetch_assoc($key=null,$value=null){$result=array();if($this->res!==null){while($data=$this->res->fetch(\PDO::FETCH_ASSOC)){$d=is_null($value)?$data:$data[$value];if(is_null($key)){$result[]=$d;}else{$result[$data[$key]]=$d;}if($this->first)break;}}if($this->first){if(isset($result[0])){$result=$result[0];}else{$result=false;}}return $result;}public function fetch_model($model,$key=null){if(is_string($model)){$result=array();if($this->res!==null){while($data=$this->res->fetch(\PDO::FETCH_ASSOC)){if(is_null($key)){$result[]=new $model($data);}else{$result[$data[$key]]=new $model($data);}if($this->first)break;}}$this->first&&$result=$result[0];return $result;}else throw new \System\Error\Argument('Model name must be a string',$model);}}} namespace System\Database\Driver{class Pdo implements \System\Database\Driver\Ifce{const NO_ERROR='00000';private $connection;private $autoFree=TRUE;private $buffered;private $config=array();private $db_selected=false;public function __construct(){if(!extension_loaded('pdo'))throw new \System\Error\Database("PHP extension 'pdo' is not loaded.");}public function connect(array&$config){$this->config=$config;if(isset($config['resource'])&&$config['resource']instanceof PDO){$this->connection=$config['resource'];if(!$this->is_connected()){throw new \System\Error\Database('Could not connect to database "'.$config['database'].'" for following reasons.');}}else{if(!isset($config['charset']))$config['charset']='utf8';if(!isset($config['username']))$config['username']=null;if(!isset($config['password']))$config['password']=null;if(isset($config['dbms'])&&isset($config['host'])){$options=array();$options[]=sprintf('host=%s',$config['host']);$options[]=sprintf('charset=%s',$config['charset']);$options[]=sprintf('dbname=%s',$config['database']);if(isset($config['port'])){$options[]=sprintf('port=%s',$config['port']);}$this->connection=new \PDO(sprintf('%s:%s',$config['dbms'],implode(';',$options)),$config['username'],$config['password']);$this->config['resource']=&$this->connection;}else throw new \System\Error\Database('You must define dbms and host to use PDO database driver.');}if($this->is_connected()){if(isset($config['sqlmode'])){$this->query("SET sql_mode='$config[sqlmode]'");}$this->query("SET time_zone='".date('P')."'");$this->buffered=empty($config['unbuffered']);}}private function select_db($name){return $this->connect($this->config);}public function disconnect(){$this->connection=null;}public function query($sql){$res=$this->connection->query($sql);if($this->connection->errorCode()!=self::NO_ERROR){$info=$this->connection->errorInfo();throw new \System\Error\Database($info[2],$this->connection->errorCode(),$sql);}return new \System\Database\Driver\PdoResult($res,false);}public function count($sql){$result=$this->query($sql);return \System\Database\Query::first_val($result->fetch());}public function get_insert_id(){return $this->connection->lastInsertId();}public function begin($savepoint=NULL){return $this->query($savepoint?"SAVEPOINT $savepoint":'START TRANSACTION');}public function commit($savepoint=NULL){return $this->query($savepoint?"RELEASE SAVEPOINT $savepoint":'COMMIT');}public function rollback($savepoint=NULL){return $this->query($savepoint?"ROLLBACK TO SAVEPOINT $savepoint":'ROLLBACK');}public function get_resource(){return is_resource($this->connection)?$this->connection:NULL;}public function escape_string($value){return $value;}public function create_database(){if($this->is_connected()){$this->query("CREATE DATABASE ".$this->config['database']);}else throw new \System\Error\Database(sprintf("Not connected to any server. Cannot create database %s",$this->config['database']));}public function is_connected(){return is_object($this->connection);}public function has_database(){return $this->db_selected;}public function is_ready(){return $this->is_connected()&&$this->has_database();}}} namespace System\Database{abstract class Result{protected $res;protected $free=true;protected $first=false;public function __construct($resource,$freeable=true){$this->res=$resource;$this->free=!!$freeable;}public function fetch(){}public function fetch_assoc($key=null,$value=null){}public function fetch_model($model,$key=null){}public function&nofree(){$this->free=false;return $this;}public function&first(){$this->first=true;return $this;}}} namespace System{class Text extends \System\Model\Database{static $attrs=array("name"=>array('varchar'),"text"=>array('text'),"visible"=>array('bool'),"author"=>array('belongs_to',"model"=>'System\User'),);}} namespace System\Template{class Renderer extends \System\Model\Attr{const URL_ICON_PREFIX='/share/icons';protected static $attrs=array("format"=>array('varchar'),"start_time"=>array('float'),"response"=>array('object',"model"=>'\System\Http\Response'),"heading_layout_level"=>array('int',"default"=>1),"heading_level"=>array('int',"default"=>null,"is_null"=>true),"keywords"=>array('varchar'),"desc"=>array('text'),"robots"=>array('varchar'),"copyright"=>array('varchar'),"author"=>array('varchar'),);private static $meta_tags=array("description","keywords","author","copyright","robots");private static $resource_filter=array('scripts','styles');private $templates_used=array();private $templates;private $layout;private $content;public static function from_response(\System\Http\Response $response){$renderer=new self($response->opts);$renderer->format=$response->format;$renderer->no_debug=$response->no_debug;$renderer->response=$response;if($response->layout){$renderer->layout=$response->layout;}return $renderer->flush();}public function flush(){$this->content=array("title"=>'',"meta"=>array(),"styles"=>array('pwf/elementary'),"scripts"=>array('lib/jquery','lib/functions','pwf','pwf/storage',),"output"=>array(),);if($this->response()){$this->content_for('title',$this->response()->title);$this->process_meta();}return $this;}public function render(){$this->start_time=microtime(true);try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}$this->response->flush();if($debug&&!$this->response->no_debug){$this->partial('system/status');$this->content_for('styles','pwf/devbar');$this->content_for('scripts','pwf/devbar');}ob_start();empty($this->layout)?$this->slot():$this->yield();$this->content_for('output',ob_get_clean());$this->render_head();$this->response()->set_content(implode('',$this->content['output']));$this->flush();return $this;}public function out(){return implode('',self::$content['output']);}private function used($type,$name,$locals=null){$this->templates_used[]=array("type"=>$type,"name"=>$name,"locals"=>$locals,);}public function yield(){while(any($this->layout)){$name=array_shift($this->layout);$this->used(\System\Template::TYPE_LAYOUT,$name);$renderer=$this;$response=$this->response();$request=$this->response()->request();$locales=$this->response()->locales();$ren=&$renderer;if(file_exists($f=\System\Template::find($name,\System\Template::TYPE_LAYOUT,$this->format))){include($f);}else throw new \System\Error\File(sprintf('Template "%s" not found.',$name));}}public function slot($name=\System\Template::DEFAULT_SLOT){try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if($debug&&strpos($this->format,'html')!==false&&!\System\Status::on_cli()){echo '<!--Slot: "'.$name.'"-->';}if(isset($this->templates[$name])&&is_array($this->templates[$name])){while($template=array_shift($this->templates[$name])){if(!empty($template['locals']['heading-level'])){\System\Template::set_heading_level($template['locals']['heading-level']);\System\Template::set_heading_section_level($template['locals']['heading-level']);}$this->used(\System\Template::TYPE_PARTIAL,$template['name'],$template['locals']);$this->render_partial($template['name'],$template['locals']);}}}public function render_partial($name,array $locals=array()){$this->heading_level=$this->heading_layout_level;$temp=\System\Template::find($name,\System\Template::TYPE_PARTIAL,$this->format);foreach((array) $locals as $k=>$v){$k=str_replace('-','_',$k);$$k=$v;}if(file_exists($temp)){$renderer=$this;$response=$this->response();$flow=$this->response()->flow();$request=$this->response()->request();$locales=$this->response()->locales();$ren=&$renderer;include($temp);}else throw new \System\Error\File(sprintf('Partial "%s" not found.',$name));}public function add_default_resources(){$this->content_for('scripts','lib/functions');$this->content_for('scripts','lib/jquery');$this->content_for('scripts','lib/browser');$this->content_for('scripts','pwf');$this->content_for('scripts','pwf/storage');$this->content_for('styles','pwf/elementary');}public function partial($template,array $locals=array(),$slot=\System\Template::DEFAULT_SLOT){if(!isset($this->templates[$slot])){$this->templates[$slot]=array();}$this->templates[$slot][]=array("name"=>$template,"locals"=>$locals,);}public function render_head(){return $this->render_meta()->render_title()->render_scripts()->render_styles();}public function render_meta(){$this->content_for("meta",array("name"=>'generator',"content"=>introduce()));$this->content_for("meta",array("http-equiv"=>'content-type',"content"=>\System\Output::get_mime($this->format).'; charset=utf-8'));$this->content_for("meta",array("charset"=>'utf-8'));$meta=$this->get_content_from("meta");foreach($meta as $name=>$value){if($value){$this->content_for("head",'<meta'.\Tag::html_attrs('meta',$value).'>');}}return $this;}public function render_title(){$this->content_for("head",\Stag::title(array("content"=>$this->get_content_from('title'))));return $this;}public function render_scripts(){$cont=$this->get_content_from("scripts");if(!is_null($cont)){$this->content_for("head",'<script type="text/javascript" src="/share/scripts/'.$cont.'"></script>');}return $this;}public function render_styles(){$cont=$this->get_content_from("styles");if(!is_null($cont)){$this->content_for("head",'<link type="text/css" rel="stylesheet" href="/share/styles/'.$cont.'" />');}return $this;}public function response(){return $this->response;}public function get_exec_time(){return microtime(true)-$this->start_time;}public function&get_content_from($place){if(is_array($this->content[$place])&&in_array($place,self::$resource_filter)){\System\Resource::filter_output_content($place,$this->content[$place]);}return $this->content[$place];}public function content_from($place){$this->content_for('output',ob_get_clean());$this->content['output'][]=&$this->content[$place];ob_start();}public function content_for($place,$content,$overwrite=false){if(!isset($this->content[$place])||$overwrite){$this->content[$place]=$content;}else{is_array($this->content[$place])&&$this->content[$place][]=$content;is_integer($this->content[$place])&&$this->content[$place]+=$content;is_string($this->content[$place])&&$this->content[$place].=$content;}}private function heading_render($label,$level=null){$tag=($level>6)?'strong':'h'.$level;$attrs=array("id"=>\System\Url::gen_seoname($label),"content"=>$label,"output"=>false,);return \System\Template\Tag::tag($tag,$attrs);}public function heading($label,$level=null,$no_increment=false){if(is_null($level)){if(is_null($this->heading_level)){$level=$this->heading_layout_level;}else{$level=$this->heading_level;}}$this->heading_level=$no_increment?$level:($level+1);return $this->heading_render($label,$level);}public function heading_layout($label,$level=null,$no_increment=false){if(is_null($level)){$level=$this->heading_layout_level;}$this->heading_layout_level=$no_increment?$level:($level+1);return $this->heading_render($label,$level);}public function heading_static($label,$level=null){return $this->heading($label,$level,true);}public function link($url,$label,array $object=array()){def($object['no-tag'],false);def($object['strict'],false);def($object['class'],array());$is_root=false;$is_selected=false;if(!is_array($object['class'])){$object['class']=explode(' ',$object['class']);}if($url){$is_root=$url=='/'&&$this->response()->request()->path=='/';$is_selected=$object['strict']?($url==$this->response()->request()->path||$url==$this->response()->request()->path.'/'):(strpos($this->response()->request()->path,$url)===0);}if($is_root||($url!='/'&&$is_selected)){$object['class'][]='active';}if($object['no-tag']&&$is_selected){$object['class'][]='link';return span($object['class'],$label);}else{$object['content']=$label;$object['href']=$url;return \STag::a($object);}}public function link_for($url_name,$label,array $object=array()){def($args,def($object['args'],array()));unset($object['args']);return $this->link($this->response()->url($url_name,$args),$label,$object);}public function link_ext($url,$label,array $object=array()){def($object['class'],array());if(!is_array($object['class'])){$object['class']=explode(' ',$object['class']);}$object['class'][]='ext';return $this->link($url,$label,$object);}public function icon($icon,$size='32',array $object=array()){@list($w,$h)=explode('x',$size,2);!$h&&$h=$w;$icon=$icon instanceof Image?$icon->thumb(intval($w),intval($h),def($object['crop'],false)):self::URL_ICON_PREFIX.'/'.$size.'/'.$icon;return \Stag::span(array("class"=>'icon isize-'.$size,"style"=>'background-image:url('.$icon.'); width:'.$w.'px; height:'.$h.'px',"close"=>true,));}public function icon_for($url,$icon,$size='32',array $object=array()){return $this->link($url,$this->icon($icon,$size),$object);}public function label_for($url,$label,$icon,$size='32',array $object=array()){$html=array($this->icon($icon,$size),span('label',$label));if(def($object['label_left'],false)){$html=array_reverse($html);}return $this->link($url,$html,$object);}public function label_for_url($url,$label,$icon,$size='32',array $object=array()){def($args,def($object['args'],array()));unset($object['args']);return $this->label_for($this->url($url,$args),$label,$icon,$size,$object);}public function icon_for_url($url,$icon,$size='32',array $object=array()){def($args,def($object['args'],array()));unset($object['args']);return $this->icon_for($this->url($url,$args),$icon,$size,$object);}public function url($name,array $args=array(),$var=0){return \System\Router::get_url($this->response()->request()->host,$name,$args,$var);}public function uri($name,array $args=array(),$var=0){$rq=$this->response()->request();return($rq->secure?'https':'http').'://'.$rq->host.$this->url($name,$args,$var);}public function label_for_left($url,$label,$icon,$size='32',array $object=array()){$object['label_left']=true;return $this->label_for($url,$label,$icon,$size,$object);}public function form(array $attrs=array()){return \System\Form::from_renderer($this,$attrs);}public function form_checker(array $data){$f=$this->form($data);foreach($data['info']as $i=>$text){$f->text($i,$text);}$f->submit(isset($data['submit'])?$data['submit']:$this->locales()->trans('delete'));return $f;}private function process_meta(){$dataray=array();foreach((array) self::$meta_tags as $name){if(any($this->data[$name])){$this->content_for('meta',array("name"=>$name,"content"=>$this->data[$name]));}}return $this;}public function locales(){return $this->response()->locales();}public function lang(){return $this->response()->locales()->get_lang();}public function trans($str){$args=func_get_args();array_shift($args);return $this->response()->locales()->trans($str,$args);}public function format_date($date,$format='std',$translate=true){return $this->response()->locales()->format_date($date,$format,$translate);}}} namespace System\Template{abstract class Tag{private static $html_attrs=array('*'=>array('class','id','onclick','onfocus','title','style'),'#inputs'=>array('onchange','onkeyup','name','value'),'#source'=>array('src'),'#links'=>array('href'),'#sizeable'=>array('width','height'),'iframe'=>array('frameborder','allowfullscreen'),'meta'=>array('name','content','http-equiv','charset'),'form'=>array('method','action','enctype'),'textarea'=>array('required','rows','cols','!value'),'input'=>array('type','min','max','maxlength','step','required','size','disabled','checked','results','placeholder','autocomplete'),'select'=>array('size','multiple','required'),'option'=>array('selected','value'),'button'=>array('type'),'html'=>array('xmlns','lang'),'label'=>array('for'),);private static $noclose_tags=array('input','img','meta');private static $bool_attrs=array('required','selected','checked');private static $attr_separators=array('content'=>'','style'=>';','class'=>' ',);private static $html_schema=array('#inputs'=>array('select','input','textarea','button','option'),'#source'=>array('img','iframe','script'),'#links'=>array('a','link'),'#sizeable'=>array('iframe','img','video'),);public static function __callStatic($name,$args){$attrs=&$args[0];return self::tag($name,(array) $attrs);}public static function tag($name,array $attrs=array()){$o='<'.$name.self::html_attrs($name,(array) $attrs).'>';if($c=isset($attrs['content'])){$o.=is_array($attrs['content'])?implode('',$attrs['content']):$attrs['content'];}if((($c&&!isset($attrs['close']))||(isset($attrs['close'])&&$attrs['close']))&&!in_array($name,self::$noclose_tags)){$o.='</'.$name.'>';}if(!isset($attrs['output'])||$attrs['output'])echo $o;return $o;}public static function close($name,$output=false){$o='</'.$name.'>';if($o)echo $o;return $o;}private static function get_tag_class($tag){foreach(self::$html_schema as $cname=>$objects){if(in_array($tag,$objects)){return self::$html_attrs[$cname];}}return array();}public static function html_attrs($tag,array $attrs=array()){$real_attrs=array();foreach(self::$bool_attrs as $attr){if(any($attrs[$attr])){$attrs[$attr]=$attr;}}foreach($attrs as $name=>$attr){if(is_array($attr)){$separator=isset(self::$attr_separators[$name])?self::$attr_separators[$name]:'';$attr=implode($separator,$attr);}$is_valid=(!is_null($attr)&&strlen($attr))||$name=='value';$available_for_tag=isset(self::$html_attrs[$tag])&&(self::$html_attrs[$tag]=='*'||in_array($name,self::$html_attrs[$tag]));$available_for_all_tags=in_array($name,self::$html_attrs['*']);$available_for_tag_class=in_array($name,self::get_tag_class($tag));if($is_valid&&($available_for_all_tags||$available_for_tag||$available_for_tag_class)){$real_attrs[]=$name.'="'.$attr.'"';}}return(count($real_attrs)?' ':'').implode(' ',$real_attrs);}public static function doctype(){$o='<!DOCTYPE html>';return $o;}}} namespace System{class Archive{const HEADER_BZ2="compress.bzip2://";const HEADER_GZ="compress.gzip://";static $types=array("raw","tar","tar.bz2","tar.gz","bz2","gz");static $msg_title="Práce s archivem dat";private $dirs=array();private $files=array();private $extract_path;private $path;private $data;private $type;private $fp;private $opts=array();function __construct($path){$this->type='raw';$this->path=$path;}public function get_path(){return $this->extract_path;}public static function from($type,$path,$tar=false){$method='read_'.$type;$tmp=new self($path);$tmp->$method($tar);return $tmp;}public function get_extract_path(){return $this->extract_path;}public function set_path($path){if($this->is_temp()){unlink($this->path);}$this->path=$path;}public function is_temp($really=NULL){if($really===NULL){return isset($this->opts['temp'])&&$this->opts['temp'];}else{$this->opts['temp']=!!$really;return $this;}}public function read_bz2($tar=false){if($tar)$this->type='tar';$this->data[$this->type]=file_get_contents(self::HEADER_BZ2.$this->path);if($this->data[$this->type]===false){throw new \System\Error\Format(sprintf('Cannot read bz2 archive "%s"',$this->path));}return $this;}public function read_gz($tar=false){if($tar)$this->type='tar';$this->data[$this->type]=\System\File::read(self::HEADER_GZ.$this->path);return $this;}public function extract($path_prefix=NULL){if(!$path_prefix){$path_prefix=$this->path.'_files';}if($this->type!='raw'){if(in_array($this->type,self::$types)){$d=$this->decompress(true);}else throw new \System\Error\Format(sprintf('Unknown archive format "%s", could not save archive.',$this->type));if($d){$this->extract_path=clear_url($path_prefix);if($path_prefix&&!is_dir($path_prefix))mkdir($path_prefix,0777,true);foreach($this->dirs as $dir)if(!is_dir($path_prefix.'/'.$dir))mkdir($path_prefix.'/'.$dir);foreach($this->files as $file){if(file_exists($path_prefix.'/'.$file['name'])){$a=unlink($path_prefix.'/'.$file['name']);}$fp=fopen($path_prefix.'/'.$file['name'],"wb");fwrite($fp,$file['content']);fclose($fp);}}}return $this;}public function decompress(){if(in_array($this->type,self::$types)){if($this->type=='tar'){$this->set_path(ROOT.File::TMP_DIR.'/'.strtoupper(gen_random_string(10)).'.tar');$this->is_temp(true);\System\File::put($this->path,$this->data['tar']);$files=array();$dirs=array();while($block=$this->tar_read_block()){if(!$this->read_tar_header($block,$header)){throw new \System\Error\Format('Tar headers seem to be brokend. Could not unpack tarball.');break;}if($header['typeflag']=='L'&&!$this->read_tar_long_header($header)){throw new \System\Error\Format('Tar headers seem to be brokend. Could not unpack tarball.');break;}if(!$header['filename']){continue;}if($header['typeflag']==5){$dirs[]=$header['filename'];}elseif($header['typeflag']=='g'){$tarinfo=array_merge($header,(array) $this->tar_read_block());}elseif($header['typeflag']==2){}else{$file=array("name"=>$header['filename'],"content"=>'');$n=floor($header['size']/512);for($i=0;$i<$n;$i++)$file['content'].=$this->tar_read_block();if(($header['size']%512)!=0)$file['content'].=substr($this->tar_read_block(),0,$header['size']%512);$files[]=$file;}}$this->dirs=$dirs;$this->files=$files;return true;}else{throw new \System\Error\Format(sprintf('Could not unpack archive, format "%s" is not supported.',$this->type));return false;}}else{throw new \System\Error\Format(sprintf('Could not save archive, format "%s" is not supported.',$this->type));return false;}}private function open_file_pointer(){switch($this->type){case 'gz':$this->fp=gzopen($this->path,'r+');break;case 'bz2':$this->fp=bzopen($this->path,'r+');break;default:$this->fp=fopen($this->path,'r+');break;}}private function tar_read_block(){if(!is_resource($this->fp))$this->open_file_pointer();if(is_resource($this->fp)){if($this->type=='gz')$block=@gzread($this->fp,512);elseif($this->type=='bz2')$block=@bzread($this->fp,512);else $block=@fread($this->fp,512);}return $block;}private function read_tar_header($bin_data,&$header){static $x;if(!strlen($bin_data)||strlen($bin_data)!=512){$header['filename']='';return false;}if(!is_array($header))$header=array();$v_checksum=0;for($i=0;$i<148;$i++)$v_checksum+=ord(substr($bin_data,$i,1));for($i=148;$i<156;$i++)$v_checksum+=ord(' ');for($i=156;$i<512;$i++)$v_checksum+=ord(substr($bin_data,$i,1));$v_data=unpack("a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/"."a8checksum/a1typeflag/a100link/a6magic/a2version/"."a32uname/a32gname/a8devmajor/a8devminor",$bin_data);$header['checksum']=OctDec(trim($v_data['checksum']));if($header['checksum']!=$v_checksum&&strpos($header['filename'],"/\=/")){$header['filename']='';if(($v_checksum==256)&&($header['checksum']==0))return true;return false;}$header['filename']=$v_data['filename'];$header['mode']=OctDec(trim($v_data['mode']));$header['uid']=OctDec(trim($v_data['uid']));$header['gid']=OctDec(trim($v_data['gid']));$header['size']=OctDec(trim($v_data['size']));$header['mtime']=OctDec(trim($v_data['mtime']));if(($header['typeflag']=$v_data['typeflag'])=="5")$header['size']=0;$header['link']=trim($v_data['link']);return true;}private function read_tar_long_header(&$header){$v_filename='';$n=floor($v_header['size']/512);for($i=0;$i<$n;$i++){$v_content=$this->_readBlock();$v_filename.=$v_content;}if(($v_header['size']%512)!=0){$v_content=$this->_readBlock();$v_filename.=trim($v_content);}$v_binary_data=$this->tar_read_block();if($this->read_tar_header($v_binary_data,$v_header)){return false;}$v_filename=trim($v_filename);$v_header['filename']=$v_filename;return true;}}} namespace System\Form\Widget{class Time extends \System\Form\Widget{const KIND='input';const TYPE='time';const IDENT='time';const MODEL='\DateTime';protected static $attrs=array();protected static $inputs=array(array("ident"=>'time',"name"=>'%s_time',"type"=>'time',"label"=>'form_input_time',"value"=>'#{time}',"class"=>'timepicker',));protected static $resources=array('scripts'=>array('pwf/form/time_picker'),'styles'=>array('pwf/form/timepicker'),);protected function init_tools(array $tools=null){if(!$this->form()->submited()){$this->time=$this->form()->get_input_value_by_name($this->name);}parent::init_tools();}}} namespace System\Form\Widget{class Action extends \System\Form\Widget{const KEEP=1;const UPLOAD=2;const URL=3;const NONE=4;const CREATE=5;const EDIT=6;const KIND='widget';const TYPE='action';const IDENT='action';protected static $attrs=array("options"=>array('list'),);protected static $input_opts=array(self::KEEP=>"form_widget_action_keep",self::UPLOAD=>"form_widget_action_upload",self::URL=>"form_widget_action_use_url",self::NONE=>"form_widget_action_none",self::CREATE=>"form_widget_action_create",self::EDIT=>"form_widget_action_edit",);protected static $default_opts=array(self::NONE,self::KEEP,self::CREATE,self::EDIT);protected static $inputs=array(array("ident"=>'action_select',"name"=>'%s_action',"type"=>'radio',"is_null"=>false,"options"=>'#{options}',),);protected function init_tools(array $tools=null){if($this->form()->submited()){$value=$this->form()->get_input_value_by_name($this->name.'_action');}else{$value=null;}$par_value=$this->form()->get_input_value_by_name($this->parent->name,$value==self::KEEP);$opts=$this->options;$tools=self::$inputs;if(empty($opts)){foreach(self::$default_opts as $opt){$opts[$opt]=self::$input_opts[$opt];}}if(is_null($par_value)&&isset($opts[self::KEEP])){unset($opts[self::KEEP]);}if(isset($opts[self::NONE])&&$this->required){unset($opts[self::NONE]);}if(is_null($par_value)&&isset($opts[self::EDIT])){unset($opts[self::EDIT]);}if(is_null($value)){if($this->form()->submited()){$value=$this->form()->get_input_value_by_name($this->name.'_action');if(is_null($value)){if(count($opts)===1){$value=reset($opts);}}}else{if(is_null($par_value)){$value=isset($opts[self::NONE])?self::NONE:self::CREATE;}else{$value=self::KEEP;}}}if(count($opts)>1){$tools[0]['options']=$opts;if(!$this->form()->submited()){$tools[0]['value']=$value;}parent::init_tools($tools);}$this->form()->ignore_input($this->name.'_action');$this->form()->use_value($this->name,$value);}protected function assemble_value(){$value=parent::assemble_value();return is_null($value)?self::CREATE:$value;}}} namespace System\Form\Widget{class Gps extends \System\Form\Widget{protected static $attrs=array("id"=>array("varchar"),"name"=>array("varchar"),"type"=>array("varchar"),"label"=>array("varchar"),"kind"=>array("varchar"),"info"=>array("varchar"),"required"=>array('bool'),);const KIND='input';const TYPE='location';const MODEL='\System\Gps';const IDENT='gps';protected static $inputs=array(array("ident"=>'lat',"name"=>'%s_lat',"type"=>'text',"label"=>'form_gps_input_lat',"required"=>true,),array("ident"=>'lng',"name"=>'%s_lng',"type"=>'text',"label"=>'form_gps_input_lng',"required"=>true,),);protected static $resources=array('scripts'=>array('pwf/form/jquery.gmap','pwf/form/gps'),);}} namespace System\Form\Widget{class Search extends \System\Form\Widget{const KIND='input';const TYPE='search';const IDENT='search';protected static $attrs=array("model"=>array("varchar"),"conds"=>array("array"),"display"=>array("array"),"filter"=>array("array"),"has"=>array("array"),);protected static $inputs=array(array("ident"=>'search',"name"=>'%s_search',"type"=>'text',"label"=>'form_input_search',),);protected static $resources=array("scripts"=>array('pwf/form/search_tool'),"styles"=>array('pwf/form/search_tool'),);}} namespace System\Form\Widget{class Location extends \System\Form\Widget{const KIND='input';const TYPE='location';const MODEL='\System\Location';const IDENT='location';protected static $attrs=array();protected static $inputs=array(array("ident"=>'action',"name"=>'%s_action',"type"=>'action',"label"=>'form_location_input_action',"required"=>true,),array("ident"=>'name',"name"=>'%s_name',"type"=>'text',"label"=>'form_location_input_name',"required"=>true,),array("ident"=>'addr',"name"=>'%s_addr',"type"=>'text',"label"=>'form_location_input_addr',"required"=>true,),array("ident"=>'gps',"name"=>'%s_gps',"type"=>'gps',"label"=>'form_location_input_gps',"required"=>true,),);protected static $resources=array('scripts'=>array('pwf/form/autocompleter','pwf/form/location_picker'),'styles'=>array('pwf/form/autocompleter'),);protected function guess_value(){parent::guess_value();$value=$this->form()->input_value($this->name);$model=self::MODEL;if($value instanceof $model){$loc=get_first(self::MODEL)->where(array("name"=>$value->name))->fetch();if($loc){$this->form()->use_value($this->name,$loc);}}}}} namespace System\Form\Widget{class Date extends \System\Form\Widget{const KIND='input';const TYPE='date';const IDENT='date';const MODEL='\DateTime';protected static $attrs=array();protected static $inputs=array(array("ident"=>'date',"name"=>'%s_date',"type"=>'date',"label"=>'form_input_date',"value"=>'#{date}',"class"=>'datepicker',));protected static $resources=array('scripts'=>array('pwf/form/date_picker'),'styles'=>array('pwf/form/datepicker'),);protected function init_tools(array $tools=null){if(!$this->form()->submited()){$this->date=$this->form()->get_input_value_by_name($this->name);}parent::init_tools();}}} namespace System\Form\Widget{class Image extends \System\Form\Widget{const KIND='input';const TYPE='image';const IDENT='image';const MODEL='\System\Image';protected static $attrs=array("thumb_size"=>array("varchar"),);protected static $inputs=array(array("ident"=>'action',"name"=>'%s_action',"type"=>'action',"label"=>'form_input_image_action',"required"=>true,),array("ident"=>'file',"name"=>'%s_file',"type"=>'file',"label"=>'form_input_image_file',"required"=>true,),);protected static $resources=array();public function render(\System\Template\Renderer $ren){$this->use_resources($ren);$tools=$this->get_tools();$inputs=array();$value=$this->form()->get_input_value_by_name($this->name);$label=\System\Form\Renderer::label($this->form(),$this->label);$content=array();if($value){$content[]=div('image',$ren->link($value->get_path(),$value->to_html($ren),array("class"=>'lightbox')));}foreach($tools as $tool){$tool_html=\System\Form\Renderer::render_element($ren,$tool);if(!is_null($tool_html)){$inputs[]=li($tool_html,\System\Form\Renderer::get_object_class($tool));}}$tools_html=ul('widget-tools',$inputs);$errors=\System\Form\Renderer::render_error_list($ren,$this);$content[]=$tools_html;return div('input-container input-'.$this::IDENT,array($label,div('input-content',$content),$errors,span('cleaner','')));}}} namespace System\Form\Widget{class Rte extends \System\Form\Widget{const KIND='textarea';const TYPE='rte';const IDENT='date';protected static $attrs=array();protected static $inputs=array(array("ident"=>'rte',"name"=>'%s_rte',"type"=>'textarea',"label"=>'form_input_text',"class"=>'rte',));protected static $resources=array("scripts"=>array('pwf/lib/rte'),"styles"=>array('pwf/form/rte'),);}} namespace System\Form\Widget{class DateTime extends \System\Form\Widget{const KIND='input';const TYPE='datetime';const IDENT='datetime';const MODEL='\DateTime';protected static $attrs=array("date"=>array("object","model"=>'\DateTime'),"time"=>array("object","model"=>'\DateTime'),);protected static $inputs=array(array("ident"=>'date',"name"=>'%s_date',"type"=>'date',"label"=>'form_input_datetime_date',"value"=>'#{date}',),array("ident"=>'time',"name"=>'%s_time',"type"=>'time',"label"=>'form_input_datetime_time',"value"=>'#{time}',),);protected static $resources=array("styles"=>array('pwf/form/datetimepicker'),);protected function init_tools(array $tools=null){if(!$this->form()->submited()){$value=$this->form()->get_input_value_by_name($this->name);$this->date=$value;$this->time=$value;}parent::init_tools();}protected function assemble_value(){$value=parent::assemble_value();if(is_array($value)){$val=array();if(isset($value['date']))$val[]=$this->form()->response->locales()->format_date($value['date'],'sql-date',\System\Locales::TRANS_NONE);if(isset($value['time']))$val[]=$this->form()->response->locales()->format_date($value['time'],'sql-time',\System\Locales::TRANS_NONE);if(any($value)){$value=new \DateTime(implode(' ',$val));}}return $value;}}} namespace System\Form{abstract class Renderer{public static function render(\System\Template\Renderer $ren,\System\Form $form){$output=array();$output[]=\Stag::fieldset(array("class"=>'hidden',"content"=>\Stag::input(array("value"=>htmlspecialchars(json_encode($form->get_hidden_data())),"type"=>'hidden',"name"=>$form->get_prefix().'data_hidden',"close"=>true,)),));$objects=$form->get_objects();foreach($objects as $obj){$output[]=self::render_element($ren,$obj);}$output[]=span('cleaner','');$form_attrs=$form->get_attr_data();$form_attrs['content']=$output;unset($form_attrs['class'],$form_attrs['id']);$content=array();if($form->heading){$content[]=$ren->heading($form->heading);}if($form->desc){$content[]=\Stag::p(array("content"=>$form->desc));}$content[]=\Stag::form($form_attrs);return div(array_merge(array('pwform'),(array) $form->class),$content,$form->id);}public static function render_element(\System\Template\Renderer $ren,\System\Form\Element $el){switch(get_class($el)){case 'System\Form\Container':{switch($el->type){case \System\Form\Container::TYPE_INPUTS:case \System\Form\Container::TYPE_BUTTONS:return self::render_container_inputs($ren,$el);case \System\Form\Container::TYPE_TAB:return self::render_container_tab($ren,$el);case \System\Form\Container::TYPE_TAB_GROUP:return self::render_container_tab_group($ren,$el);}break;}case 'System\Form\Input':return self::render_input($ren,$el);case 'System\Form\Label':return self::render_label($el);case 'System\Form\Text':return self::render_text($ren,$el);default:{if($el instanceof \System\Form\Widget){return $el->render($ren);}break;}}}public static function render_label(\System\Form\Label $el){return \Stag::label($el->get_data());}public static function label(\System\Form $form,$text,$for=null){return self::render_label(new \System\Form\Label(array("content"=>$text,"form"=>$form,"for"=>$for,)));}private static function render_text(\System\Template\Renderer $ren,\System\Form\Text $el){return div('form-text',array(self::label($el->form(),$el->label),div(array('input-container'),$el->content)));}public static function render_widget(\System\Template\Renderer $ren,\System\Form\Widget $el){$el->use_resources($ren);$tools=$el->get_tools();$inputs=array();$tools_html=null;if(count($tools)>1){foreach($tools as $tool){$tool_html=self::render_element($ren,$tool);if(!is_null($tool_html)){$inputs[]=li($tool_html,self::get_object_class($tool));}}$tools_html=ul('widget-tools',$inputs);}else if(any($tools)){$keys=array_keys($tools);$tools_html=self::render_element($ren,$tools[$keys[0]]);}$errors=self::render_error_list($ren,$el);if(is_null($tools_html)){return null;}else{$content=array(self::label($el->form(),$ren->trans($el->label)),$tools_html,$errors);return div('input-container input-'.$el::IDENT,$content);}}public static function render_input(\System\Template\Renderer $ren,\System\Form\Input $el){$el->content=$el->is_value_content()?$el->value:$el->content;$label_on_right=self::is_label_on_right($el);$data=$el->get_data();$data['output']=false;$data['close']=true;$data['name']=$el->form()->get_prefix().$data['name'];if($el->kind=='select'){$data['content']=self::render_select_opts($ren,$el);unset($data['options']);}if($el->kind=='button'){$data['content']=$el->label;}$label=$el->has_label()?\Stag::label(array("class"=>array('input-label','input-label-'.($label_on_right?'right':'left')),"content"=>$ren->trans($el->label).($label_on_right?'':':'),"for"=>$el->id,)):'';if($el->multiple&&$el->type=='checkbox'||$el->type=='radio'){$input=self::render_multi_input_html($ren,$el);}else{if(in_array($el->type,array('date','time'))){if($el->value instanceof \DateTime){$tz=new \DateTimeZone('UTC');$el->value->modify('+'.$el->value->getOffset().' seconds');$el->value->setTimezone($tz);if($el->type=='date'){$data['value']=$ren->format_date($el->value,'sql-date',\System\Locales::TRANS_NONE);}if($el->type=='time'){$data['value']=$ren->format_date($el->value,'sql-time',\System\Locales::TRANS_NONE);}}}$html_element=$el->kind;if($el->type==='password'||$el->type==='textarea'){unset($data['value']);}if($el->type==='checkbox'&&!$el->value){$data['value']=true;}if(any($data['value'])&&gettype($data['value'])=='double'){$data['value']=number_format($data['value'],15);}$input=\Tag::div(array("content"=>\Tag::$html_element($data),"class"=>array('input-container'),"output"=>false));}$info='';if($el->info){$info=\Tag::span(array("class"=>'input-info',"content"=>$el->info,"output"=>false,));}$errors=self::render_error_list($ren,$el);$label_and_input=$label_on_right?$input.$label:$label.$input;return $label_and_input.$info.$errors;}public static function render_error_list(\System\Template\Renderer $ren,\System\Form\Element $el){$errors='';$error_list=$el->form()->get_errors($el->name);if(any($error_list)){$error_lis=array();foreach($error_list as $e){$error_lis[]=li($e);}$errors=ul('errors',$error_lis);}return $errors;}public static function render_select_opts(\System\Template\Renderer $ren,\System\Form\Input $el){$opts=array();if(!$el->required){$opts[]=\Stag::option(array("content"=>' - - - ',"value"=>'',"selected"=>!$el->value,));}foreach($el->options as $id=>$opt){if(is_object($opt)){if($opt instanceof \System\Model\Attr){$label=$opt->get_name();$id=$opt->id;}else throw new \System\Error\Form(sprintf("Form options set passed as object must inherit System\Model\Attr. Instance of '%s' given.",get_class($opt)));}else{$label=$opt;}$opts[]=\Stag::option(array("content"=>$ren->trans($label),"value"=>$id,"close"=>true,"selected"=>$el->value==$id,));}return $opts;}private static function is_label_on_right($el){return!$el->multiple&&in_array($el->type,array('checkbox','radio'));}public static function get_object_class(\System\Form\Element $el){$base_class='element';$class=array();if($el instanceof \System\Form\Input){$base_class=$el->kind;$class[]='input-'.$el->id;$class[]='input-'.(self::is_label_on_right($el)?'left':'right');}elseif($el instanceof \System\Form\Widget){$base_class='widget';$class[]='widget-'.$el::IDENT;}elseif($el instanceof \System\Form\Label){$base_class='label';}elseif($el instanceof \System\Form\Text){$base_class='text';}$class[]='form-'.$base_class;return $class;}private static function render_container_inputs(\System\Template\Renderer $ren,\System\Form\Container $el){$label='';if($el->label){$label=div('group_label',$el->label);}$attrs=$el->get_data();foreach($el->get_elements()as $name=>$object){$element_html=self::render_element($ren,$object);if(!is_null($element_html)){$attrs['content'][]=li($element_html,self::get_object_class($object));}}$content=empty($attrs['content'])?null:\Stag::ul($attrs);return(is_null($content)&&is_null($label))?null:\Stag::fieldset(array("class"=>array_merge($el->class_outer,array($el->type.'_container','group_'.$el->name)),"content"=>array($label,$content)));}private static function render_container_tab_group(\System\Template\Renderer $ren,\System\Form\Container $el){$ren->content_for('styles','pwf/form/tabs');$ren->content_for('scripts','pwf/form/tab_manager');$output=array();foreach($el->get_elements()as $el){$output[]=self::render_element($ren,$el);}return div(array('tab_group',$el->name),$output);}private static function render_container_tab(\System\Template\Renderer $ren,\System\Form\Container $el){$output=array();foreach($el->get_elements()as $group){$output[]=self::render_element($ren,$group);}return div(array_merge($el->class,$el->class_outer,array($el->name)),array(div('tab_label',$el->label),div('tab_content',$output),));}private static function render_multi_input_html(\System\Template\Renderer $ren,\System\Form\Input $el){$input=array();$opts=array();$iname=$el->type==='radio'?$el->form()->get_prefix().$el->name:$el->form()->get_prefix().$el->name.'[]';foreach($el->options as $id=>$opt){if(is_object($opt)){if($opt instanceof \System\Model\Attr){$id=$opt->id;$lbl=$opt->name;}else throw new \System\Error\Form('Form options set passed as object must inherit System\Model\Attr');}else{$lbl=$opt;}$opts[]=li(array(div('input-container',\Stag::input(array("name"=>$iname,"id"=>$el->form()->get_prefix().$el->name.'_'.$id,"value"=>$id,"type"=>$el->type,"checked"=>is_array($el->value)&&in_array($id,$el->value)||$el->value==$id,))),\Stag::label(array("content"=>$ren->trans($lbl),"for"=>$el->form()->get_prefix().$el->name.'_'.$id,)),),'input-left');}return ul('options',$opts);}}} namespace System\Form{class Text extends \System\Form\Element{protected static $attrs=array("id"=>array("varchar"),"class"=>array("varchar"),"label"=>array("varchar"),"content"=>array("text"),);}} namespace System\Form{class Input extends \System\Form\Element{protected static $attrs=array("id"=>array("varchar"),"name"=>array("varchar"),"type"=>array("varchar"),"label"=>array("varchar"),"kind"=>array("varchar"),"content"=>array("text"),"info"=>array("varchar"),"placeholder"=>array('varchar'),"maxlen"=>array('int'),"step"=>array('float'),"min"=>array('int'),"max"=>array('int'),"required"=>array('bool'),"checked"=>array('bool'),"autocomplete"=>array('bool'),"value"=>array('mixed'),"options"=>array('array'),"class"=>array('array'),'ident'=>array("varchar"),);protected static $required=array('name','kind',);protected static $kinds=array('input','textarea','select','button');protected static $kinds_content_value=array('textarea');protected static $kinds_no_label=array('button');protected static $types=array('textarea','select','text','number','date','file','range','url','email','hidden','button','submit','password',);protected $tools=array();protected function construct(){!$this->type&&self::get_default_type();!$this->kind&&self::get_default_kind();$this->kind=in_array($this->type,self::$kinds)?$this->type:(in_array($this->kind,self::$kinds)?$this->kind:self::get_default_kind());!$this->id&&$this->id='field_'.$this->name;$this->type=='submit'&&$this->kind='button';if(!$this->name){throw new \System\Error\Form('You must enter input name!',$this->type);}}public static function is_allowed_type($type){return in_array($type,self::$types);}public static function is_allowed_kind($kind){return in_array($kinds,self::$kinds);}public static function get_default_type(){return self::$types[0];}public static function get_default_kind(){return self::$kinds[0];}public function is_value_content(){return in_array($this->kind,self::$kinds_content_value);}public function has_label(){$has=!in_array($this->kind,self::$kinds_no_label);if($has&&$this->parent){if($this->parent->get_tool_count()<=1){$has=false;}}return $has;}public function is_valid(){$valid=true;if($this->required&&!$this->form()->input_value($this->name)){$this->form()->report_error($this->name,'form_input_empty');$valid=false;}return $valid;}}} namespace System\Form{abstract class Element extends \System\Model\Attr{private $form;public function __construct(array $dataray=array()){if(isset($dataray['form'])&&is_object($dataray['form'])&&$dataray['form']instanceof \System\Form){$this->form=$dataray['form'];unset($dataray['form']);}else throw new \System\Error\Argument("You must pass instance of 'System\Form' into element attributes.");parent::__construct($dataray);}public function form(\System\Form $f=null){if(!is_null($f)){$this->form=$f;}return $this->form;}public function is_valid(){return true;}}} namespace System\Form{class Container extends \System\Form\Element{const TYPE_INPUTS='inputs';const TYPE_BUTTONS='buttons';const TYPE_TAB_GROUP='tab_group';const TYPE_TAB='tab';protected static $attrs=array("id"=>array('varchar'),"title"=>array('varchar'),"name"=>array('varchar'),"label"=>array('varchar'),"type"=>array('varchar'),"class"=>array('list'),"class_outer"=>array('list'),);protected static $types=array(self::TYPE_INPUTS,self::TYPE_BUTTONS,self::TYPE_TAB,);protected static $type_models=array(self::TYPE_INPUTS=>array('System\\Form\\Input','System\\Form\\Widget','System\\Form\\Label','System\\Form\\Text'),self::TYPE_BUTTONS=>array('System\\Form\\Input'),self::TYPE_TAB_GROUP=>array('System\\Form\\Container'),self::TYPE_TAB=>array('System\\Form\\Container'),);private $elements=array();protected function construct(){if(!$this->type){throw new \System\Error\Form('You must set form container type');}if(!$this->class){$this->class=array();}$this->class=array_merge((array) $this->class,array($this->type));!$this->name&&$this->generate_name();}public function&add_element(\System\Form\Element $el){$el->form($this->form());$fits=false;foreach($this->get_expected_class()as $cname){if($el instanceof $cname){$fits=true;break;}}if($fits){$this->elements[$el->name]=$el;}else throw new \System\Error\Form(sprintf('Form container %s cannot accomodate element of type %s',$this->type,get_class($el)));return $el;}private function get_expected_class(){return self::$type_models[$this->type];}private function generate_name(){$this->name=implode(\System\Form::SEPARATOR_ID,array($this->type,$this->form()->get_count($this->type)));}public function get_elements(){return $this->elements;}public function is_valid(){$valid=true;foreach($this->elements as $el){$valid=$valid&&$el->is_valid();}return $valid;}}} namespace System\Form{class Label extends \System\Form\Element{protected static $attrs=array("id"=>array("varchar"),"class"=>array("varchar"),"for"=>array("varchar"),"content"=>array("text"),);}} namespace System{class Output{const FORMAT_HTML='html';const FORMAT_XHTML='xhtml';const FORMAT_XML='xml';const FORMAT_JSON='json';const FORMAT_TXT='txt';private static $mime=array(self::FORMAT_HTML=>"text/html",self::FORMAT_XHTML=>"application/xhtml+xml",self::FORMAT_XML=>"application/xml",self::FORMAT_JSON=>"application/json",self::FORMAT_TXT=>"text/plain",);const DIR_TEMPLATE="/lib/template";const DEFAULT_TEMPLATE="pwf/default";const DEFAULT_OUT="html";const PREFIX_AJAX="ajax-api";public static function get_mime($format){if(isset(self::$mime[$format])){return self::$mime[$format];}else throw new \System\Error\Argument(sprintf("Unknown mime type format '%s'.",$format));}}} namespace System{class Settings{const CACHE_FILE='/var/cache/settings';const DIR_CONF_ALL='/etc';const DIR_CONF_DIST='/etc/conf.d';const DIR_CONF_GLOBAL='/etc/conf.d/global';const DIR_CONF_ROUTES='/etc/routes.d';const DIR_CONF_STATIC='/etc/default/conf.d';const DIR_ROUTES_STATIC='/etc/default/routes.d';const FILE_VERSION='/etc/santa/core/pwf/version';const CONF_FILE_REGEXP='/^[a-z].*\.json$/i';private static $ready=false;private static $version_default=array("name"=>"pwf","project"=>"Purple Web Framework","version"=>"unknown","branch"=>"local","origin"=>"local",);private static $conf=array();private static $env='dev';public static function init(){if(!self::$ready){if(self::check_cache()){self::load_cache();}else{self::reload();self::cache();}self::$ready=true;}}public static function reload(){self::set_env();self::check_env();$default=array();$global=array();$conf=array();\System\Json::read_dist(ROOT.self::DIR_CONF_STATIC,$default,true);\System\Json::read_dist(ROOT.self::DIR_CONF_DIST.'/'.self::$env,$conf,true);\System\Directory::check(ROOT.self::DIR_CONF_GLOBAL);\System\Json::read_dist(ROOT.self::DIR_CONF_GLOBAL,$global,true);$global=array_replace_recursive($default,$global);self::$conf=array_replace_recursive($global,$conf);$pages_user=\System\Json::read($p=ROOT.self::DIR_CONF_DIST.'/pages.json',true);$pages_api=array();self::$conf['routes']=array();\System\Json::read_dist(ROOT.self::DIR_CONF_ROUTES,self::$conf['routes'],true);$api=\System\Json::read_dist(ROOT.self::DIR_ROUTES_STATIC);foreach(self::$conf['routes']as&$list){foreach($api as $url){$list[]=$url;}}if(file_exists($version_path=ROOT.self::FILE_VERSION)){$cfg=\System\Json::read($version_path);}else{\System\Json::put($version_path,$cfg=self::$version_default);}self::$conf['own']=$cfg;ksort(self::$conf);Status::report('info',"Settings reloaded");}public static function check_env(){if(!is_dir($p=ROOT.self::DIR_CONF_DIST.'/'.self::$env)){self::reset();}}public static function reset(){\System\Directory::check(ROOT.self::DIR_CONF_DIST.'/'.self::$env);}private static function get_cache_filename(){return ROOT.self::CACHE_FILE.'-'.self::$env.'.serial';}private static function cache(){$conf=self::$conf;if(!is_dir(dirname(self::get_cache_filename()))){\System\Directory::create(dirname(self::get_cache_filename()),0770);}$fp=\System\File::put(self::get_cache_filename(),serialize($conf));@chmod(self::get_cache_filename(),0770);Status::report('info','New settings saved');}public static function purge_cache(){return@unlink(self::get_cache_filename());}private static function check_cache(){$name=self::get_cache_filename();return is_file($name)&&filemtime($name)>time()-2;}private static function load_cache(){self::$conf=unserialize(\System\File::read(self::get_cache_filename()));ksort(self::$conf);}public static function&get($path){$args=is_array($path)?$path:func_get_args();$i=0;$iter=&self::$conf;foreach($args as $arg){$i++;if(isset($iter[$arg])){$iter=&$iter[$arg];}else{throw new \System\Error\Config(sprintf('There is no config on path \'%s\'',implode('/',$args)));}}return $iter;}public static function set(array $path,$val){$iter=&self::$conf;foreach($path as $arg){if(!isset($iter[$arg])){$iter[$arg]=array();}$iter=&$iter[$arg];}return $iter=$val;}public static function save($module,$env=null){is_null($env)&&($env=self::$env);$path=ROOT.self::DIR_CONF_DIST.'/'.$env.'/'.$module.".json";$data=\System\Json::json_humanize(json_encode(self::get($module)));if(!($action=\System\File::put($path,$data))){throw new \System\Error\Permissions(sprintf('Failed to write settings. Please check your permissions on directory \'%s\'',ROOT.self::DIR_CONF_DIST));}self::purge_cache();self::reload();return $action;}public static function get_env(){return self::$env;}public static function set_env($env=null){if(is_null($env)){if(defined("YACMS_ENV")){self::$env=YACMS_ENV;}elseif(file_exists($ef=ROOT.self::DIR_CONF_DIST.'/env')){self::$env=trim(\System\File::read($ef));}}else{self::$env=$env;}if(!defined("YACMS_ENV")){define("YACMS_ENV",self::$env);}}public static function env_exists($env){return is_dir(ROOT.self::DIR_CONF_DIST.'/'.$env);}public static function is_this_first_run(){return!file_exists($p=ROOT.self::DIR_CONF_ALL.'/install.lock');}}} namespace System\Error{class AccessDenied extends \System\Error{const HTTP_STATUS=403;}} namespace System\Error{class Offcom extends \System\Error{}} namespace System\Error{class Connection extends \System\Error{}} namespace System\Error{class Format extends \System\Error{}} namespace System\Error{class Argument extends \System\Error{}} namespace System\Error{class Database extends \System\Error{function __construct(){$d=func_get_args();$msg=strtolower($d[0]);if(strpos($msg,'duplicate')!==false||(isset($d[1])&&strpos(strtolower($d[1]),'duplicate')!==false)){$e='Cannot insert data because of duplicate unique key.';}elseif(strpos($msg,'syntax')!==false){$e='Cannot run query because of syntax error.';}elseif(strpos($msg,'table')!==false&&strpos($msg,'exist')){$e='Table does not exist.';}else{$e='Unhandled database error';}parent::__construct($e,$d);}}} namespace System\Error{class Config extends \System\Error{}} namespace System\Error{class Code extends \System\Error{}} namespace System\Error{class Form extends \System\Error{}} namespace System\Error{class Model extends \System\Error{}} namespace System\Error{class Development extends \System\Error{}} namespace System\Error{class Wtf extends \System\Error{}} namespace System\Error{class NotFound extends \System\Error{const HTTP_STATUS=404;}} namespace System\Error{class Permissions extends \System\Error{}} namespace System{abstract class Database{const DIR_INITIAL_DATA='/etc/database/data.d';const DIR_MIGRATIONS='/etc/database/migrations.d';private static $instances=array();private static $default_instance;private static $queries=0;private static $query_record=array();private static $ready=false;private static $initial_data=array("\\System\\User\\Group"=>array(array("id"=>1,"name"=>"GodLike"),array("id"=>2,"name"=>"Administrátoři"),array("id"=>3,"name"=>"Uživatelé"),),"\\System\\User"=>array(array("id"=>1,"login"=>"root","password"=>"poklop","nick"=>"root","first_name"=>"Super","last_name"=>"User","groups"=>array(1,2),)));public static function init(){if(!self::$ready){$db_list=cfg('database','connect');self::$ready=true;if(any($db_list)){foreach($db_list as $db_ident){$cfg=cfg('database','list',$db_ident);self::connect($cfg,$db_ident);}}else{if(php_sapi_name()=='cli'){exec(ROOT.'/bin/db --setup');}else{throw new \System\Error\Config('No database is set.');}}}}public static function connect(array $cfg,$ident=''){!$ident&&$ident=$cfg['database'];try{$default_ident=cfg('database','default');}catch(\System\Error $e){$default_ident=$ident;}$driver_name='System\\Database\\Driver\\'.ucfirst($cfg['driver']);$driver=&self::$instances[$ident];$driver=new $driver_name();$driver->connect($cfg);if((any($default_ident)&&$ident==$default_ident)||count(self::$instances)===1){self::$default_instance=&self::$instances[$ident];}}public static function query($query,$db_ident=null){if(($db=self::get_db($db_ident))!==null){$start=microtime(true);$res=$db->query($query);self::$queries++;if(cfg('dev','debug')){$trace=debug_backtrace();$tres=count($trace>2)?2:1;self::$query_record[]=array("trace"=>$trace[$tres],"time"=>microtime(true)-$start,"query"=>$query,);}return $res;}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}public static function count($query,$db_ident=null){if(($db=self::get_db($db_ident))!==null){$res=$db->count($query);self::$queries++;return $res;}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}public static function simple_insert($table,array $data,$add_times=true,$db_ident=null){if(($db=self::get_db($db_ident))!==null){if($add_times){$data['created_at']=new \DateTime();$data['updated_at']=new \DateTime();}$sql="INSERT INTO `".$table."` ";if($return_affected=(isset($data[0])&&is_array($data[0]))){}else{$sql.="SET ";$rows=array();foreach($data as $column=>$value){$rows[]="`".$column."`".' = '.self::escape($value);}$sql.=implode(',',$rows);}$res=$db->query($sql);return $return_affected?$db->get_affected_rows():$db->get_insert_id();}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}public static function simple_update($table,$id_col,$id,array $data,$add_times=true,$db_ident=null){if(($db=self::get_db($db_ident))!==null){if($add_times){$data['updated_at']=new \DateTime();}$sql_data=array();$conds=array();if(is_array($id)){$cond="IN(".implode(',',array_map('intval',$id)).")";}else{$cond="= ".$id;}foreach($data as $col=>$data){$sql_data[]="`".$col."` = ".self::escape($data);}$sql="UPDATE `".$table."` SET ".implode(',',$sql_data)." WHERE `".$id_col."` ".$cond;self::$queries++;$result='';self::get_db($db_ident)->query($sql);return $result;}else throw new \System\Error\Database('Not connected to database "'.$db_ident.'"');}private static function get_default(){return empty(self::$default_instance)?null:self::$default_instance;}public static function get_db($db_ident=null){return $db_ident===null?self::get_default():(isset(self::$instances[$db_ident])?self::$instances[$db_ident]:null);}public static function escape(&$value){if(is_array($value)){array_walk($value,array('self','escape'));}else{if(is_object($value)){switch(get_class($value)){case 'DateTime':$value="'".$value->format('Y-m-d H:i:s')."'";break;case 'System\Image':$value="'".$value->to_json()."'";break;case 'System\Video\Youtube':$value="'".$value->to_sql()."'";break;case 'System\Gps':$value=$value->to_sql();break;}}else{switch(gettype($value)){case 'boolean':$value=$value?1:0;break;case 'integer':$value=self::num2db(intval($value));break;case 'double':case 'float':$value=self::num2db(floatval($value));break;case 'NULL':$value='NULL';break;default:$value="'".self::get_db()->escape_string($value)."'";}}return $value;}}public static function num2db($val){$larr=localeconv();$search=array($larr['decimal_point'],$larr['mon_decimal_point'],$larr['thousands_sep'],$larr['mon_thousands_sep'],$larr['currency_symbol'],$larr['int_curr_symbol']);$replace=array('.','.','','','','');return str_replace($search,$replace,$val);}public static function get_insert_id($db_ident=null){return self::get_db($db_ident)->get_insert_id();}public static function is_connected($db_ident=null){$instance=self::get_db($db_ident);return $instance!==null&&$instance->is_connected();}public static function is_ready($db_ident=null){$instance=self::get_db($db_ident);return $instance!==null&&$instance->is_ready();}public static function exists($db_ident){$dblist=cfg('database','list');return isset($dblist[$db_ident]);}public static function get_query_record(){return self::$query_record;}public static function seed_initial_data(){foreach(self::$initial_data as $model=>$objects){foreach($objects as $data_set){if(isset($data_set['password'])){$data_set['password']=hash_passwd($data_set['password']);}$obj=new $model($data_set);try{$obj->is_new_object=true;$obj->save();}catch(\System\Error\Database $e){}foreach($data_set as $attr=>$val){if(is_array($val)&&\System\Model\Database::is_rel($model,$attr)){if(\System\Model\Database::get_attr_type($model,$attr)=='has-many'){$def=\System\Model\Database::get_attr($model,$attr);if(any($def['is_bilinear'])&&any($def['is_master'])){unset($obj->$attr);$obj->assign_rel($attr,$val);}}}}}}}}} namespace System{abstract class Cli{private static $width=60;private static $height=40;private static $term_colors=array('gray'=>"[1;30m",'light_red'=>"[1;31m",'light_green'=>"[1;32m",'yellow'=>"[1;33m",'light_blue'=>"[1;34m",'magenta'=>"[1;35m",'light_cyan'=>"[1;36m",'white'=>"[1;37m",'normal'=>"[0m",'black'=>"[0;30m",'red'=>"[0;31m",'green'=>"[0;32m",'brown'=>"[0;33m",'blue'=>"[0;34m",'cyan'=>"[0;36m",'bold'=>"[1m",'underscore'=>"[4m",'reverse'=>"[7m",);public static function term_color($text,$color="NORMAL"){$text=self::term_remove_color($text);$out=self::$term_colors[$color];$out==""&&$out="[0m";return chr(27).$out.$text.chr(27)."[0m";}public static function init(){self::checkout_console_size();}public static function term_remove_color($text){$text=preg_replace('/'.chr(27).'\[[0-9];[0-9]*\m?/','',$text);$text=preg_replace('/'.chr(27).'\[0\m/','',$text);return $text;}public static function checkout_console_size(){preg_match_all("/rows.([0-9]+);.columns.([0-9]+);/",strtolower(exec('stty -a 2> /dev/null | grep columns')),$output);if(sizeof($output)==3){self::$width=def($output[2][0],0);self::$height=def($output[1][0],0);}}public static function get_width(){self::checkout_console_size();return self::$width;}public static function get_height(){self::checkout_console_size();return self::$height;}public static function try_shell($cmd,&$output=null,&$exit_status=null){if(!($banned=preg_match('/(^|[,\ ])exec([,\ ]|$)/',ini_get('disable_functions')))){exec($cmd,$output,$exit_status);}return!$banned;}public static function progress($done,$total,$msg='',$msglen=null){if($done<=$total){$size=self::get_width();$msglen=is_null($msglen)?strlen($msg):$msglen;$psize=abs($size-$msglen-12);$perc=(double)($done/$total);$bar=floor($perc*$psize);$status_bar="\r  [";$status_bar.=str_repeat("=",$bar);if($bar<$psize){$status_bar.=">";$status_bar.=str_repeat(" ",$psize-$bar-1);}else{$status_bar.="=";}$disp=number_format($perc*100,0);$status_bar.="] $disp%";$left=$total-$done;$status_bar.=": ".$msg;if(($blank=$size-strlen($status_bar))>0){$status_bar.=str_repeat(' ',$blank);}echo $status_bar;flush();if($done==$total){out();}}}public static function do_over(array $items,\Closure $lambda,$message=null,array&$extra=array(),$silent=false){$total=count($items);$x=0;$msglen=35;if(!$silent&&is_null($message)){foreach($items as $msg=>$item){if(($m=strlen($msg))>$msglen){$msglen=$m;}}}else{if(($m=strlen($message))>$msglen){$msglen=strlen($message);}}$msglen+=2;foreach($items as $msg=>$item){$msg=is_null($message)?$msg:$message;if(!$silent)self::progress($x++,$total,$msg,$msglen);$lambda($msg,$item,$extra);if(!$silent)self::progress($x,$total,$msg,$msglen);}}}} namespace System{class Setup{private static $step='name';public static function init(){\System\Router::update_rewrite();\System\Output::set_template('pwf/setup');}public static function run(){if(method_exists('System\Setup',self::$step)){$method=self::$step;return self::$method();}}public static function set_step($step_name){return self::$step=$step_name;}public static function name(){$f=new \System\Form(array("heading"=>'Purple Web Framework setup',"desc"=>'This is your first run of pwf. Setup helps to fill basic configuration needed to run PWF. Fill in the required information and press save. You can edit settings in directory /etc/conf.d/{environment}. Default environment is "dev".',));$f->label('Basic site information');$f->input_text('name','Site name',true);$f->group_end();$f->label('Database information');$f->input(array("name"=>'database_ident',"label"=>l('Identificator'),"required"=>true,"value"=>'pwf',"type"=>'text',"info"=>l('System identificator for this database'),));$f->input(array("type"=>'select',"name"=>'database_driver',"label"=>l('Database driver'),"required"=>true,"info"=>l('Type of database. You will most usually use MySQL here.'),"options"=>array('mysqli'=>"MySQLi","pdo"=>'PDO',),));$f->input(array("type"=>'select',"name"=>'database_dbms',"label"=>l('DBMS'),"required"=>true,"info"=>l('Type of database. You can use only MySQL here.'),"options"=>array('mysql'=>"MySQL",),));$f->input(array("name"=>'database_host',"label"=>l('Host name'),"required"=>true,"value"=>'localhost',"type"=>'text',"info"=>l('Public hostname or IP address of machine where your database will be located'),));$f->input(array("name"=>'database_name',"label"=>l('Database name'),"required"=>true,"value"=>'pwf',"type"=>'text',"info"=>l('How will you name your database'),));$f->input(array("name"=>'database_user',"label"=>l('User name'),"required"=>true,"value"=>'username',"type"=>'text',"info"=>l('User name used to access database'),));$f->input(array("name"=>'database_pass',"label"=>l('Password'),"required"=>true,"value"=>'password',"type"=>'text',"info"=>l('Password used to access database'),));$f->submit('Save configuration');if($f->passed()){$d=$f->get_data();$settings=array("database"=>array("ident"=>$d['database_ident'],"driver"=>$d['database_driver'],"dbms"=>$d['database_dbms'],"database"=>$d['database_name'],"host"=>$d['database_host'],"username"=>$d['database_user'],"password"=>$d['database_pass'],),"seo"=>array("title"=>$d['name'],),);try{Database::connect($settings['database'],$settings['database']['ident']);}catch(\System\Error\Database $e){}if(!Database::is_ready($settings['database']['ident'])){try{$instance=Database::get_db($d['database_ident']);$instance->create_database();Database::connect($settings['database'],$settings['database']['ident']);}catch(\System\Error $e){v($e);exit;}}if(Database::is_ready($settings['database']['ident'])){self::save($settings);$output=shell_exec("bin/db init");}else{$f->report_error('database_name','Could not connect to database');$f->out();}}else{$f->out();}}private static function save(array $data){foreach(array('driver','database','host','username','password','lazy')as $key){cfgs(array('database','list',$data['database']['ident'],$key),$data['database'][$key]);}cfgs(array('database','list',$data['database']['ident'],'charset'),'utf8');cfgs(array('database','list',$data['database']['ident'],'is_yawf_home'),true);cfgs(array('database','default'),$data['database']['ident']);cfgs(array('database','connect'),array($data['database']['ident']));cfgs(array('default','title'),$data['seo']['title']);\System\Settings::save('database');\System\Settings::save('default');self::lock();self::finish();}protected static function lock(){\System\File::put(ROOT.\System\Settings::DIR_CONF_ALL.'/install.lock',time());}protected static function finish(){\Tag::h1(array("content"=>l('Finished!')));\Tag::div(array("content"=>array(\Tag::p(array("content"=>sprintf(l('Your system should be ready to work. Check out your \'%s\' directory for other settings.'),ROOT.\System\Settings::DIR_CONF_DIST),"output"=>false,)),\Tag::p(array("output"=>false,"content"=>sprintf(l('Your next step could be installing modules via \'santa\' located in \'%s\''),ROOT.\Santa\Package::PATH_BIN),)),)));}}} namespace System{abstract class Status{const DIR_LOGS='/var/log';private static $log_files=array();public static function report($type,$msg){if(!isset(self::$log_files[$type])||!is_resource(self::$log_files[$type])){try{\System\Directory::check(ROOT.self::DIR_LOGS);self::$log_files[$type]=@fopen(ROOT.self::DIR_LOGS.'/'.$type.'.log','a+');}catch(\System\Error $e){self::error($e,false);}}if(is_resource(self::$log_files[$type])){try{$report=@date('[Y-m-d H:i:s]');}catch(\Exception $e){$report=time();}!self::on_cli()&&$report.=' '.$_SERVER['SERVER_NAME'].NL;self::append_msg_info($msg,$report);if(self::on_cli()){$report.="> Run from console".NL;}else{$report.="> Request: ".$_SERVER['REQUEST_METHOD'].' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_URI']."'".NL;}$report.=NL;fwrite(self::$log_files[$type],$report);}}private static function append_msg_info($msg,&$report){foreach((array) $msg as $line){if($line){if(is_array($line)){if(isset($line[0])){self::append_msg_info($line,$report);}else{$report.="> ".json_encode($line).NL;}}else{$report.="> ".$line.NL;}}}}public static function catch_exception(\Exception $e,$ignore_next=false){while(ob_get_level()>0){ob_end_clean();}try{$errors=cfg('output','errors');$cfg_ok=true;}catch(\System\Error $exc){$errors=array();$cfg_ok=false;}if(!($e instanceof \System\Error)){$e=\System\Error::from_exception($e);}if(array_key_exists($e->get_name(),$errors)){$error_page=$errors[$e->get_name()];}else{$error_page=array("title"=>'Error occurred!',"layout"=>array('pwf/errors/layout'),"partial"=>'system/error/bug',);}try{$request=\System\Http\Request::from_hit();$response=$request->create_response($error_page);if(self::on_cli()){$response->renderer()->format='txt';}else{$response->status($e->get_http_status());}if(!isset($error_page['partial'])){$error_page['partial']='system/error/bug';}$response->renderer()->partial($error_page['partial'],array("desc"=>$e));$response->render()->send_headers()->send_content();self::report('error',$e);}catch(\Exception $exc){echo "Fatal error";v($exc);exit(1);}exit(1);}public static function catch_error($number,$string,$file=null,$line=null,$context=array()){if(error_reporting()){self::catch_exception(new \System\Error\Code($string.' in "'.$file.':'.$line.'"'));}}public static function on_cli(){return php_sapi_name()=='cli';}public static function introduce(){try{return cfg('own','name')."-".cfg('own','version');}catch(\System\Error $e){return 'pwf unknown version';}}}} namespace System{class Json{private static $errors=array(JSON_ERROR_DEPTH=>'The maximum JSON stack depth has been exceeded',JSON_ERROR_STATE_MISMATCH=>'Invalid or malformed JSON string',JSON_ERROR_CTRL_CHAR=>'JSON control character error, possibly incorrectly encoded',JSON_ERROR_SYNTAX=>'Syntax error in JSON string',JSON_ERROR_UTF8=>'Malformed UTF-8 characters in JSON string, possibly incorrectly encoded',);public static function decode($str,$silent=false){$json=json_decode($str,true);try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if(!$silent&&($err=json_last_error())!==JSON_ERROR_NONE&&$debug){throw new \System\Error\Format(self::get_error($err),$str);}return $json;}public static function read($path,$silent=false){return self::decode(\System\File::read($path,$silent));}public static function put($path,$json){return \System\File::put($path,json_encode($json));}public static function read_dist($dir_dist,&$temp=array(),$assoc_keys=false,&$files=array()){if(\System\Directory::check($dir_dist,false)){!$assoc_keys&&($temp=array());$dir=opendir($dir_dist);while($f=readdir($dir)){if(strpos($f,".")!==0&&strpos($f,".json")){list($mod)=explode(".",$f);$json=(array) self::decode(\System\File::read($dir_dist.'/'.$f));$files[]=str_replace(ROOT,'',$dir_dist.'/'.$f);if($assoc_keys){$temp[$mod]=$json;}else $temp=array_merge_recursive($temp,$json);}}closedir($dir);return $temp;}else throw new \System\Error\File(sprintf('Directory "%s" either does not exist or is not accessible.',$dir_dist));}private static function get_error($id){return isset(self::$errors[$id])?self::$errors[$id]:'Unknown JSON error.';}public static function json_humanize($json){$result='';$pos=0;$strLen=strlen($json);$prevChar='';$outOfQuotes=true;for($i=0;$i<=$strLen;$i++){$char=substr($json,$i,1);if($char=='"'&&$prevChar!='\\'){$outOfQuotes=!$outOfQuotes;}elseif(($char=='}'||$char==']')&&$outOfQuotes){$result.="\n";$pos--;for($j=0;$j<$pos;$j++)$result.="\t";}$result.=$char;if(($char==','||$char=='{'||$char=='[')&&$outOfQuotes){$result.="\n";if($char=='{'||$char=='[')$pos++;for($j=0;$j<$pos;$j++)$result.="\t";}$prevChar=$char;}return $result;}}} namespace System{abstract class Minifier{public static function process($type,$content){return self::conversion_available($type)?self::minify($type,$content):$content;}public static function conversion_available($type){return class_exists(self::get_class_name($type));}private static function get_class_name($type){return '\\System\\Minifier\\'.ucfirst($type);}public static function minify($type,$content){$tool=self::get_class_name($type);return $tool::minify($content,array());}}} namespace System{class Locales{const DIR='/etc/locales';const DIR_MESSAGES='/messages.d';const DIR_MODULES='/modules.d';const ENCODING='UTF-8';const LANG_DEFAULT='en_US';const TZ_DEFAULT='Europe/Prague';const KEY_MESSAGES='messages';const TRANS_NONE=0;const TRANS_STD=1;const TRANS_INF=2;private $files=array();private $locale;private $lang;private $date_trans;private $response;private $messages=array();private static $messages_static=array("date"=>array("std"=>'D, d M Y G:i:s e',"sql"=>'Y-m-d H:i:s',"sql-date"=>'Y-m-d',"sql-time"=>'H:i:s',"html5"=>'Y-m-d\\TH:i:s',"html5-full"=>'Y-m-d\\TH:i:sP',));private static $attrs_common=array('author','created_at','updated_at');public static function init(){mb_language('uni');mb_internal_encoding(self::ENCODING);date_default_timezone_set(self::get_default_timezone());}public static function is_locale_available($locale){if(strpos($locale,'_')){return is_dir(ROOT.self::DIR.'/'.$locale);}else throw new \System\Error\Format(sprintf("Locale format must respect RFC 5646 and RFC 4647 (eg. en_US). Accepting underscore or dash. '%s' was given.",$locale));}public static function get_default_lang(){try{return cfg('locales','default_lang');}catch(\System\Error\Config $e){return self::LANG_DEFAULT;}}public static function get_default_timezone(){try{return cfg('locales','timezone');}catch(\System\Error\Config $e){return self::TZ_DEFAULT;}}public static function create(\System\Http\Response $response,$locale){$obj=new self();$obj->response=$response;return $obj->set_locale($locale);}public function set_locale($locale=null){if(!is_null($locale)){$locale=str_replace('-','_',$locale);}$this->locale=(is_null($locale)||!self::is_locale_available($locale))?self::get_default_lang():$locale;$parts=explode('_',$this->locale);$this->lang=$parts[0];$this->load_messages();return $this;}public function make_syswide(){setlocale(LC_ALL,$this->locale.'.'.self::ENCODING);return $this;}public function get_locale(){return $this->locale;}public function get_lang(){return $this->lang;}public function get_loaded_files(){return $this->files;}public function get_path($str){$src=&$this->messages;if(strpos($str,':')){list($module,$str)=explode(':',$str,2);$this->load_module($module);$src=&$this->messages[$module];}if(isset($src[$str])){return $src[$str];}if(isset(self::$messages_static[$module][$str])){return self::$messages_static[$module][$str];}return null;}public function get_messages(){return $this->messages;}public function trans($str,$args=null){$msg=isset($this->messages[self::KEY_MESSAGES][$str])?$this->messages[self::KEY_MESSAGES][$str]:$str;if(is_array($args)||(!is_null($args)&&func_num_args()>1)){if(!is_array($args)){$args=func_get_args();array_shift($args);}return vsprintf($msg,$args);}else return $msg;}public function load_module($module){if($module===self::KEY_MESSAGES){throw new \System\Error\Argument(sprintf('Locales module must not be named %s',$module));}if(!isset($this->messages[$module])){if(!file_exists($f=($p=ROOT.self::DIR.'/'.$this->locale.self::DIR_MODULES.'/'.$module).'.json')){$f=$p.'.core.json';}$this->messages[$module]=\System\Json::read($f);$this->files[]=str_replace(ROOT,'',$f);if(empty($this->messages[$module])){Status::report('error',sprintf('Locales module %s/%s is empty or broken',$this->locale,$module));}}}private function load_date_translations(){if(is_null($this->date_trans)){$def=self::create($this->response,self::LANG_DEFAULT);$this->date_trans=array("find"=>array_merge($def->get_path('date:days'),$def->get_path('date:days-short'),$def->get_path('date:months'),$def->get_path('date:months-short')),"replace"=>array_merge($this->get_path('date:days'),$this->get_path('date:days-short'),$this->get_path('date:months'),$this->get_path('date:months-short')),"replace_hard"=>array_merge($this->get_path('date:days'),$this->get_path('date:days-short'),$this->get_path('date:months-date'),$this->get_path('date:months-short')),);}return $this;}public function translate_date($date,$hard=false){$this->load_date_translations();$replace_key='replace';if($hard){$replace_key='replace_hard';}return str_replace($this->date_trans['find'],$this->date_trans[$replace_key],strtolower($date));}private function load_messages(){if(!isset($this->messages[self::KEY_MESSAGES])){\System\Json::read_dist(ROOT.self::DIR.'/'.$this->locale.self::DIR_MESSAGES,$this->messages[self::KEY_MESSAGES],false,$this->files);}}public static function strlen_binary($str){$strlen_var=strlen($str);$d=0;for($c=0;$c<$strlen_var;++$c){$ord_var_c=ord($str{$d});switch(true){case(($ord_var_c>=0x20)&&($ord_var_c<=0x7F)):$d++;break;case(($ord_var_c&0xE0)==0xC0):$d+=2;break;case(($ord_var_c&0xF0)==0xE0):$d+=3;break;case(($ord_var_c&0xF8)==0xF0):$d+=4;break;case(($ord_var_c&0xFC)==0xF8):$d+=5;break;case(($ord_var_c&0xFE)==0xFC):$d+=6;break;default:$d++;}}return $d;}public function format_date($date,$format='std',$translate=self::TRANS_STD){if(\System\Template::is_date($date)){if(is_null($date)){$date=new \DateTime();}elseif(is_numeric($date)){$helper=new \DateTime();$helper->setTimestamp($date);$date=$helper;}$local_format=\System\Locales::get_path('date:'.$format);$d=$date->format(is_null($local_format)?$format:$local_format);if($translate==self::TRANS_NONE){return $d;}else{return $this->translate_date($d,$translate==self::TRANS_INF);}}else throw new \System\Error\Argument(sprintf("Method format_date accepts only date type arguments. Instance of DateTime or utime number. '%s' was given.",gettype($date)));}public function trans_class_name($class_name,$plural=false){return $this->trans('model_'.\System\Loader::get_link_from_class($class_name).($plural?'_plural':''));}public function trans_model_attr_name($model,$attr){return $this->trans(self::get_common_attr_trans_name($model,$attr));}public function trans_model_attr_desc($model,$attr){return $this->trans('attr_'.\System\Loader::get_link_from_class($model).'_'.$attr.'_desc');}public static function get_common_attr_trans_name($model,$attr){return 'attr_'.(in_array($attr,self::$attrs_common)?$attr:(\System\Loader::get_link_from_class($model).'_'.$attr));}}} namespace System\Cache{interface Ifce{public function store($path,$value,$ttl);public function fetch($path,&$var);public function get($path);public function release($path);public function flush();}} namespace System\Cache\Driver{class Apc implements \System\Cache\Ifce{public function store($path,$value,$ttl){$res=apc_add($path,$value,$ttl);return $res?$value:NULL;}public function fetch($path,&$var){$res=false;$var=apc_fetch($path,$res);return $res?$var:($var=NULL);}public function get($path){$res=false;$var=apc_fetch($path,$res);return isset($res)?$var:NULL;}public function release($path){return apc_delete($path);}public function flush(){return apc_clear_cache('user');}}} namespace System\Cache\Driver{class Runtime implements \System\Cache\Ifce{private $storage=array();public function store($path,$value,$ttl){return $this->storage[$path]=$value;}public function fetch($path,&$var){return $var=$this->get($path);}public function get($path){return isset($this->storage[$path])?$this->storage[$path]:null;}public function release($path){unset($this->storage[$path]);}public function flush(){$this->storage=array();}}} namespace System\Http{class Request extends \System\Model\Attr{protected static $attrs=array("host"=>array('varchar'),"path"=>array('varchar'),"agent"=>array('varchar'),"query"=>array('varchar'),"lang"=>array('varchar',"is_null"=>true),"referrer"=>array('varchar'),"time"=>array('float'),"cli"=>array('bool'),"args"=>array('list'),"get"=>array('list'),"post"=>array('list'),"secure"=>array('bool'),"user"=>array('object',"model"=>'\System\User'),);public static function from_hit(){if(\System\Status::on_cli()){$data=array("time"=>def($_SERVER['REQUEST_TIME_FLOAT'],microtime(true)),"cli"=>true,"secure"=>false,);}else{$data=array("cli"=>false,"host"=>$_SERVER['HTTP_HOST'],"path"=>$_SERVER['REQUEST_URI'],"referrer"=>def($_SERVER['HTTP_REFERER']),"agent"=>$_SERVER['HTTP_USER_AGENT'],"query"=>$_SERVER['QUERY_STRING'],"time"=>def($_SERVER['REQUEST_TIME_FLOAT'],microtime(true)),"secure"=>any($_SERVER['HTTPS']),);if($data['query']){$path=explode('?',$data['path']);$data['path']=$path[0];}}$obj=new self($data);return $obj->prepare_input();}public function create_response(array $attrs=null){$this->args=array();if(is_null($attrs)){if($path=\System\Router::get_path($this->host,$this->path,$this->data['args'])){$attrs=isset($path[1])?$path[1]:array();$attrs['request']=$this;return \System\Http\Response::from_request($this,$attrs);}}else{return \System\Http\Response::from_request($this,$attrs);}return false;}private function get_init(){$domain=\System\Router::get_domain($this->host);return cfg('domains',$domain,'init');}public function init(){if($this->get('lang')){\System\Locales::set_lang($this->get('lang'));}\System\Init::run($this->get_init(),array("request"=>$this));}private function fix_input(array&$data){if(get_magic_quotes_gpc()){foreach($data as&$row){if(is_array($row)){self::fix_input($row);}else{$row=stripcslashes($row);}}}}private function prepare_input(){if(!isset($_GET))$_GET=array();if(!isset($_POST))$_POST=array();if(!isset($_FILES))$_FILES=array();foreach($_FILES as $var=>$cont){if(isset($cont['name'])&&is_array($cont['name'])){foreach($cont as $attr=>$value){foreach($value as $file=>$file_attr){if($a=is_array($file_attr)){$_FILES[$var][$file][$attr]=$file_attr['file'];}else{$_FILES[$var][$attr]=$file_attr;}}if($a)unset($_FILES[$var][$attr]);}}else{break;}}$this->get=$_GET;$this->post=array_merge($_POST,$_FILES);foreach(array('get','post')as $key){$this->fix_input($this->data[$key]);}unset($_GET,$_POST,$_FILES);return $this;}public function input($path=null){if(func_num_args()){$path=func_get_args();if(is_array(func_get_arg(0))){$args=array_shift($path);$path=array_merge($args,$path);}$iter=&$this->data;foreach($path as $arg){if(isset($iter)&&is_array($iter))$iter=&$iter[$arg];else $iter=array();}return self::secure_input($iter);}else throw new \System\Error\Argument("You must define input path you want to get.");}public function input_by_prefix($prefix,$method='post'){$data=array();foreach($this->data[$method]as $k=>&$v){if(strpos($k,$prefix)===0)$data[substr($k,strlen($prefix))]=&$v;}return $data;}public static function secure_input($str){$bad=array("'","`","\"");$good=array("&#39;","&#96;","&quot;");return $str=str_replace($bad,$good,$str);}public function get(){$args=func_get_args();array_unshift($args,'get');return $this->input($args);}public function post(){$args=func_get_args();array_unshift($args,'post');return $this->input($args);}public function user(){if($this->user instanceof \System\User){return $this->user;}elseif(any($_SESSION[\System\User::COOKIE_USER])){$this->user=find("\System\User",$_SESSION[\System\User::COOKIE_USER]);}if(!($this->user instanceof \System\User)){$this->user=\System\User::guest();}$this->user->get_rights();return $this->user;}public function logged_in(){return!!$this->user()->id;}}} namespace System\Http{class Response extends \System\Model\Attr{const NO_RESPONSE=0;const OK=200;const NO_CONTENT=204;const MOVED_PERMANENTLY=301;const FOUND=302;const SEE_OTHER=303;const TEMPORARY_REDIRECT=307;const FORBIDDEN=403;const PAGE_NOT_FOUND=404;const INTERNAL_SERVER_ERROR=500;private static $states=array(self::OK=>"HTTP/1.1 200 OK",self::NO_CONTENT=>"HTTP/1.1 204 No Content",self::MOVED_PERMANENTLY=>"HTTP/1.1 301 Moved Permanently",self::FOUND=>"HTTP/1.1 302 Found",self::SEE_OTHER=>"HTTP/1.1 303 See Other",self::TEMPORARY_REDIRECT=>"HTTP/1.1 307 Temporary Redirect",self::FORBIDDEN=>"HTTP/1.1 403 Forbidden",self::PAGE_NOT_FOUND=>"HTTP/1.1 404 Page Not Found",self::INTERNAL_SERVER_ERROR=>"HTTP/1.1 500 Internal Server Error",);protected static $attrs=array("format"=>array('varchar'),"no_debug"=>array('bool'),"title"=>array('varchar'),"flow"=>array('object',"model"=>'\System\Module\Flow'),"groups"=>array('list'),"locales"=>array('object',"model"=>'\System\Locales'),"modules"=>array('list'),"request"=>array('object',"model"=>'\System\Http\Request'),"renderer"=>array('object',"model"=>'\System\Template\Renderer'),"start_time"=>array('float'),);private $status=self::OK;private $headers=array();private $content=null;public static function get_status($num){if(isset(self::$states[$num])){return self::$states[$num];}else throw new \System\Error\Argument(sprintf('Requested http header "%s" does not exist.',$num));}public static function redirect($url,$code=self::FOUND){if(!\System\Status::on_cli()){session_write_close();header(self::get_status($code));header("Location: ".$url);}else throw new \System\Error\Format(stprintf('Cannot redirect to "%s" while on console.',$r['url']));exit(0);}public static function from_request(\System\Http\Request $request,array $attrs=array()){def($attrs['format'],cfg("output",'format_default'));def($attrs['start_time'],microtime(true));$response=new self($attrs);$response->data['request']=$request;$response->data['flow']=new \System\Module\Flow($response,$response->modules);$response->data['locales']=\System\Locales::create($response,$request->lang)->make_syswide();return $response;}public function exec(){$this->low_level_debug();$this->flow()->exec();return $this;}public function render(){$this->renderer=$this->renderer()->render();return $this;}public function send_headers(){if(!\System\Status::on_cli()){session_write_close();$mime=\System\Output::get_mime($this->renderer()->format);if($this->status==self::OK&&empty($this->content)){$this->status(self::NO_CONTENT);}header(self::get_status($this->status));foreach($this->headers as $name=>$content){if(is_numeric($name)){header($content);}else{header(ucfirst($name).": ".$content);}}header("Content-Type: ".$mime.";charset=utf-8");header("Content-Encoding: gz");}return $this;}public function send_content(){echo $this->content;return $this;}public function renderer(){if(!$this->renderer){$this->data['renderer']=\System\Template\Renderer::from_response($this);}return $this->renderer;}public function locales(){return $this->locales;}public function flush(){$this->content['output']=array();return $this;}public function flow(){return $this->flow;}public function request(){return $this->request;}public function path(){return $this->request()->path.($this->request()->query?'?'.$this->request()->query:'');}public function get_exec_time(){return microtime(true)-$this->start_time;}public function status($status){if(isset(self::$states[$status])){$this->status=$status;}else throw new \System\Error\Argument(sprintf("HTTP status '%s' was not found.",$status));}public function set_content($content){if(is_string($content)){$this->content=$content;return $this;}else throw new \System\Error\Argument(sprintf("HTTP Response must be string! '%s' given.",gettype($content)));}public function low_level_debug(){if(!$this->no_debug&&cfg('dev','debug')){if(file_exists(ROOT.'/lib/include/devel.php')){$response=$this;$request=$this->request();$renderer=$this->renderer();$locales=$this->locales();$flow=$this->flow();$ren=&$renderer;include ROOT.'/lib/include/devel.php';}}}public function url($name,array $args=array(),$variation=0){return \System\Router::get_url($this->request()->host,$name,$args,$variation);}public function is_readable(){if(!$this->request()->user()->is_root()&&!empty($this->groups)){foreach($this->request()->user()->get_group_ids()as $id){if(in_array($id,$this->groups)){return true;}}return false;}return true;}}} namespace System{class Gps extends \System\Model\Attr{const GMAP_TYPE_ROADMAP='roadmap';const GMAP_TYPE_SATELLITE='satellite';const GMAP_TYPE_HYBRID='hybrid';const GMAP_TYPE_TERRAIN='terrain';const MAP_WIDTH_DEFAULT=200;const MAP_HEIGHT_DEFAULT=200;protected static $attrs=array("lat"=>array('float'),"lng"=>array('float'),);public function lat($val=null){!is_null($val)&&$this->data['lat']=floatval($val);return $this->data['lat'];}public function lng($val=null){!is_null($val)&&$this->data['lng']=floatval($val);return $this->data['lng'];}public function latf(){return $this->format($this->lat());}public function lngf(){return $this->format($this->lng());}private function format($num){return number_format($num,20,'.','');}public function gps(){return $this->latf().','.$this->lngf();}public function to_json($encode=true){return $encode?json_encode($this->get_data()):$this->get_data();}public function to_sql(){$data=array($this->lat(),$this->lng());return 'GeomFromText(\'POINT('.\System\Database::escape($data[0]).' '.\System\Database::escape($data[1]).')\')';}public function get_data(){return $this->data;}public static function from_latlng($lat,$lng){return self::from_array(array("lat"=>$lat,"lng"=>$lng));}public static function from_json($str){return self::from_array(json_decode($str,true));}public static function from_sql($str){$str=substr($str,strlen('POINT('));$str=substr($str,0,strlen($str)-1);$str=explode(' ',$str);return self::from_array(array("lat"=>$str[0],"lng"=>$str[1]));}public static function from_array(array $data){$item=new self();$item->lat($data['lat']);$item->lng($data['lng']);return $item;}public function map($w=self::MAP_WIDTH_DEFAULT,$h=self::MAP_HEIGHT_DEFAULT,$type=self::GMAP_TYPE_ROADMAP){return 'http://maps.googleapis.com/maps/api/staticmap?sensor=false&amp;size='.$w.'x'.$h.'&amp;maptype='.$type.'&amp;markers='.$this->gps();}public function map_link(){return 'http://maps.google.com/maps?q='.$this->gps();}public function to_html(\System\Template\Renderer $ren,$w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return \Stag::img(array("src"=>$this->map($w,$h,$type),"alt"=>''));}}} namespace System{class Form extends \System\Model\Attr{const SEPARATOR_ID='_';const SEPARATOR_INPUT_METHOD='input_';const TEMPLATE_DEFAULT='system/form';const LABEL_SUBMIT_DEFAULT='send';protected static $attrs=array("id"=>array('varchar'),"method"=>array('varchar'),"action"=>array('varchar'),"enctype"=>array('varchar'),"heading"=>array('varchar'),"desc"=>array('varchar'),"anchor"=>array('varchar'),"bool"=>array('no_prefix'),"class"=>array('array'),"prefix"=>array('varchar'),"renderer"=>array('object',"model"=>'\System\Template\Renderer'),"response"=>array('object',"model"=>'\System\Http\Response'),"request"=>array('object',"model"=>'\System\Http\Request'),);private static $methods_allowed=array('get','post','put','delete');protected $data_default=array();protected $data_commited=array();protected $data_hidden=array();protected $errors=array();private $counts=array();private $objects=array();private $inputs=array();private $ignored=array('submited','button_submited');private $rendering=array("group"=>false,"tab_group"=>false,"tab"=>false,);private static $inputs_button=array("button","submit");public static function from_response(\System\Http\Response $response,array $attrs=array()){$attrs['request']=$response->request();if(empty($attrs['action'])){$attrs['action']=$response->request()->path;}$form=new self($attrs);$form->response=$response;$form->renderer=$response->renderer();return $form;}public static function from_module(\System\Module $module,array $attrs=array()){return self::from_response($module->response(),$attrs);}public static function from_renderer(\System\Template\Renderer $ren,array $attrs=array()){return self::from_response($ren->response(),$attrs);}public static function from_request(\System\Http\Request $request,array $attrs=array()){$attrs['request']=$request;if(empty($attrs['action'])){$attrs['action']=$request->path;}return new self($attrs);}protected function construct(){!$this->method&&$this->method='post';!$this->id&&$this->id=self::get_generic_id();!$this->anchor&&$this->anchor=\System\Url::gen_seoname($this->id,true);!$this->enctype&&$this->enctype='multipart/form-data';if(is_array($this->default)){$this->data_default=$this->default;}$this->method=strtolower($this->method);$this->take_data_from_request();$this->hidden('submited',true);$this->data_default['submited']=false;}public function __call($name,$args){if(strpos($name,self::SEPARATOR_INPUT_METHOD)===0){$type=substr($name,strlen(self::SEPARATOR_INPUT_METHOD));if(!isset($args[0])){throw new \System\Error\Argument(sprintf('You must enter input name as first argument for System\\Form::%s method',$name));}return $this->input(array("type"=>$type,"name"=>$args[0],"label"=>def($args[1],''),"required"=>def($args[2],false),"info"=>def($args[3],''),));}else throw new \System\Error\Wtf(sprintf('There is no form method "%s".',$name));}protected function take_data_from_request(){$this->data_commited=$this->request()->input_by_prefix($this->get_prefix(),$this->method);if(isset($this->data_commited['data_hidden'])){$this->data_hidden=\System\Json::decode(htmlspecialchars_decode($this->data_commited['data_hidden']));$tmp=array();if(is_array($this->data_hidden)){foreach($this->data_hidden as $key=>$val){$tmp[$key]=$val;}}if(is_array($this->data_commited)){foreach($this->data_commited as $key=>$val){$tmp[$key]=$val;}}$this->data_commited=$tmp;unset($this->data_commited['data_hidden']);}$this->submited=isset($this->data_commited['submited'])?!!$this->data_commited['submited']:false;}public function get_input_value($attrs){return $this->get_input_value_by_name($attrs['name']);}public function set_input_value($name,$value){$this->data_default[$name]=$value;}public function get_input_value_by_name($name,$default=false){$value=null;if(($default||!$this->submited)&&isset($this->data_default[$name])){$value=$this->data_default[$name];}if(!$default&&$this->submited&&isset($this->data_commited[$name])){$value=$this->data_commited[$name];}return $value;}public function input_value($name,$default=false){return $this->get_input_value_by_name($name,$default);}protected function get_generic_id(){return implode(self::SEPARATOR_ID,array('form',substr(md5($this->action),0,8)));}protected function&add_object(\System\Form\Element $element){$obj=&$this->objects[];$obj=$element;return $obj;}public function group_start($type,$name='',$label=''){$el=new \System\Form\Container(array("name"=>$name?$name:'',"label"=>$label,"form"=>&$this,"type"=>$type,));if($this->rendering['tab']instanceof \System\Form\Container){$this->rendering['group']=$this->rendering['tab']->add_element($el);}else{$this->objects[$el->name]=$el;$this->rendering['group']=$this->objects[$el->name];}return $this->rendering['group'];}public function group_end(){$this->rendering['group']=false;}public function check_rendering_group($type){if($this->rendering['group']===false||$this->rendering['group']->type!=$type){$this->group_start($type,count($this->objects));}return $this->rendering['group'];}public function gen_obj_name($type){return implode(self::SEPARATOR_ID,array($this->id,$this->inputs_count));}public function passed(){return $this->submited()&&$this->is_valid();}public function submited(){return $this->submited;}public function is_valid(){$valid=true;foreach($this->objects as $object){$valid=$valid&&$object->is_valid();}return $valid;}public function get_count($type){if(!isset($this->counts[$type])){$this->counts[$type]=0;}return $this->counts[$type];}public function hidden($name,$value){$this->data_hidden[$name]=$value;}public function tab_group_check(){if(!($this->rendering[\System\Form\Container::TYPE_TAB_GROUP]instanceof \System\Form\Container)){$this->tab_group_start();}return $this;}public function tab_group_start(){$el=$this->add_object(new \System\Form\Container(array("type"=>\System\Form\Container::TYPE_TAB_GROUP,"form"=>$this,)));$this->rendering[$el->type]=$el;$this->counts[$el->type]++;return $this;}public function tab_group_end(){$this->rendering[\System\Form\Container::TYPE_TAB]=false;$this->rendering[\System\Form\Container::TYPE_TAB_GROUP]=false;return $this;}public function tab($label,$name=null){$this->group_end();$this->tab_end();$this->tab_group_check();$el=new \System\Form\Container(array("type"=>\System\Form\Container::TYPE_TAB,"name"=>$name,"label"=>$label,"form"=>$this,));$this->counts[$el->type]++;if(($this->rendering[\System\Form\Container::TYPE_TAB_GROUP]instanceof \System\Form\Container)&&$this->rendering[\System\Form\Container::TYPE_TAB_GROUP]->type==\System\Form\Container::TYPE_TAB_GROUP){return $this->rendering[$el->type]=$this->rendering[\System\Form\Container::TYPE_TAB_GROUP]->add_element($el);}else throw new \System\Error\Form('You must put tab into tab group.');}public function tab_end(){$this->rendering['tab']=false;return $this;}public function input(array $attrs,$detached=false){if(in_array($attrs['type'],self::$inputs_button)){$this->check_rendering_group('buttons');}else{$this->check_rendering_group('inputs');}$el=null;$attrs['form']=&$this;if(isset($attrs['value'])){$this->use_value($attrs['name'],$attrs['value']);}$attrs['value']=$this->get_input_value_by_name($attrs['name']);if($attrs['type']=='checkbox'){if(!isset($this->data_commited[$attrs['name']])){$this->data_commited[$attrs['name']]=null;}}if(in_array($attrs['type'],array('checkbox','radio'))){if($this->submited){$attrs['checked']=!!$this->data_commited[$attrs['name']];}else{$attrs['checked']=isset($this->data_default[$attrs['name']])&&$this->data_default[$attrs['name']];}}if($attrs['type']==='rte')$el=new \System\Form\Widget\Rte($attrs);if($attrs['type']==='action')$el=new \System\Form\Widget\Action($attrs);if($attrs['type']==='gps')$el=new \System\Form\Widget\Gps($attrs);if($attrs['type']==='image')$el=new \System\Form\Widget\Image($attrs);if($attrs['type']==='search')$el=new \System\Form\Widget\Search($attrs);if($attrs['type']==='location')$el=new \System\Form\Widget\Location($attrs);if($attrs['type']==='datetime')$el=new \System\Form\Widget\DateTime($attrs);if(!isset($attrs['parent'])||!($attrs['parent']instanceof \System\Form\Widget\Date||$attrs['parent']instanceof \System\Form\Widget\Time)){if($attrs['type']==='date')$el=new \System\Form\Widget\Date($attrs);if($attrs['type']==='time')$el=new \System\Form\Widget\Time($attrs);}if(is_null($el)){$el=new \System\Form\Input($attrs);}return $detached?$el:$this->attach($el);}public function get_rendering_container(){return $this->rendering['group'];}public function attach(\System\Form\Element $el){$this->inputs[$el->name]=&$this->get_rendering_container()->add_element($el);return $this->inputs[$el->name];}public function label($text,\System\Form\Input&$for=null){$this->check_rendering_group('inputs');return $this->rendering['group']->add_element(new Form\Label(array("content"=>$text,"input"=>$for,"form"=>$this,)));}public function text($label,$text){$this->check_rendering_group('inputs');return $this->rendering['group']->add_element(new Form\Text(array("form"=>$this,"name"=>crc32($label),"label"=>$label,"content"=>$text)));}public function submit($label=self::LABEL_SUBMIT_DEFAULT){return $this->input(array("name"=>'button_submited',"value"=>true,"type"=>'submit',"label"=>$label,));}public function out(\System\Module $obj=NULL,array $locals=array()){$this->group_end();$this->tab_group_end();return $obj instanceof \System\Module?$obj->partial(self::get_default_template(),(array) $locals+array("f"=>$this)):$this->response->renderer()->partial(self::get_default_template(),array("f"=>$this));}public static function get_default_template(){return self::TEMPLATE_DEFAULT;}public function get_hidden_data(){return $this->data_hidden;}public function get_prefix(){!$this->prefix&&!$this->no_prefix&&$this->setup_prefix();return $this->prefix;}protected function setup_prefix(){$this->prefix=$this->id.'_';}public function get_objects(){return $this->objects;}public function report_error($input_name,$msg){if(!isset($this->errors[$input_name])){$this->errors[$input_name]=array();}if(!in_array($msg,$this->errors[$input_name])){$this->errors[$input_name][]=$msg;}return $this;}public function get_attr_data(){return parent::get_data();}public function get_data(){if($this->submited){$data=$this->data_commited;}else{$data=$this->data_default;}$out=array();foreach($data as $key=>$value){if(!in_array($key,$this->ignored)){$out[$key]=$value;}}return $out;}public function get_errors($name=''){if($name){if(isset($this->errors[$name])){$error_list=&$this->errors[$name];}else $error_list=array();}else{$error_list=$this->errors;}return $error_list;}public static function get_field_type($attr_type){if(in_array($attr_type,array('date','datetime','time','image','location'))){$type=$attr_type;}elseif($attr_type==='point'){$type='gps';}elseif($attr_type==='bool'){$type='checkbox';}elseif($attr_type==='text'){$type='rte';}else{$type='text';}return $type;}public function renderer(\System\Template\Renderer $renderer=null){if(!is_null($renderer)){$this->renderer=$renderer;}return $this->renderer;}public function response(\System\Http\Response $response=null){if(!is_null($response)){$this->response=$response;}return $this->response;}public function request(\System\Http\Request $request=null){if(!is_null($request)){$this->request=$request;}return $this->request;}public function ignore_input($name){if(!in_array($name,$this->ignored)){$this->ignored[]=$name;}return $this;}public function ignore_inputs(array $names){foreach($names as $name){$this->ignore_input($name);}return $this;}public function use_value($name,$val){if($this->submited()){$this->data_commited[$name]=$val;}else{$this->data_default[$name]=$val;}}public function&get_input($name){if(isset($this->inputs[$name])){return $this->inputs[$name];}else throw new \System\Error\Argument(sprintf("Input '%s' was not registered inside this form.",$name));}}} namespace System{class Template{const DIR_TEMPLATE='/lib/template';const DIR_PARTIAL='/lib/template/partial';const DIR_ICONS='/share/icons';const DEFAULT_SLOT='zzTop';const DEFAULT_ICON_THEME='default';const TYPE_LAYOUT='layout';const TYPE_PARTIAL='partial';const CASE_UPPER=MB_CASE_UPPER;const CASE_LOWER=MB_CASE_LOWER;private static $default_time_format='D, d M Y G:i:s e';private static $heading_level=1;private static $heading_section_level=1;private static $styles=array(array("name"=>'default',"type"=>'text/css'),);private static $units=array("information"=>array("B","kiB","MiB","GiB","TiB","PiB"),);public static function get_filename($name,$format=null,$lang=null){$format=='xhtml'&&$format='html';return $name.($lang?'.'.$lang.'.':'').($format?'.'.$format:'').'.php';}public static function get_name($name){$base=ROOT.self::PARTIALS_DIR.'/';$f='';file_exists($f=$base.self::get_filename($name,Output::get_format(),\System\Locales::get_lang()))||file_exists($f=$base.self::get_filename($name,Output::get_format()))||file_exists($f=$base.self::get_filename($name))||$f='';return $f;}public static function is_date($arg){return $arg instanceof \DateTime||is_numeric($arg)||is_null($arg);}public static function get_css_color($color){if($color instanceof ColorModel){$c=$color->get_color();}elseif(is_array($color)){$c=$color;}else{throw new \System\Error\Argument("Argument 0 must be instance of System\Model\Color or set of color composition");}return is_null($c[3])?'rgb('.$c[0].','.$c[1].','.$c[2].')':'rgba('.$c[0].','.$c[1].','.$c[2].','.str_replace(",",".",floatval($c[3])).')';}public static function get_color_container($color){if($color instanceof ColorModel){$c=$color->get_color();}elseif(is_array($color)){$c=$color;}else{throw new \System\Error\Argument("Argument 0 must be instance of System\Model\Color or set of color composition");}return '<span class="color-container" style="background-color:'.self::get_css_color($c).'"></span>';}static function convert_value($type,$value){switch($type){case 'information':$step=1024;break;default:$step=1000;break;}for($i=0;$value>=1024;$i++){$value/=1024;}return round($value,2)." ".self::$units[$type][$i];}static function get_icon_theme(){$theme=cfg('icons','theme');return $theme?$theme:self::DEFAULT_ICON_THEME;}public static function to_html(\System\Template\Renderer $ren,$value){if(is_object($value)&&method_exists($value,'to_html')){return $value->to_html($ren);}if(is_array($value)){$content=array();foreach($value as $val){$content[]=li(self::to_html($ren,$val));}return ul('plain inline',$content);}if($value instanceof \DateTime){return $ren->format_date($value,'human');}if(gettype($value)=='boolean'){return span($value=$value?'yes':'no',$ren->trans($value));}if(gettype($value)=='float'){return number_format($value,5);}if(gettype($value)=='string'){return htmlspecialchars_decode($value);}return $value;}public static function to_json($value,$encode=true){if(is_array($value)){$values=array();foreach($value as $key=>$item){$values[$key]=self::to_json($item,false);}return $encode?json_encode($values):$values;}else{if(is_object($value)&&method_exists($value,'to_json')){return $value->to_json(false);}if($value instanceof \DateTime){return $value->format('Y-m-d H:i:s');}return $value;}}public static function find($name,$type=self::TYPE_LAYOUT,$format=null,$locale=null){$base=ROOT;$temp=null;switch($type){case 'layout':$base.=self::DIR_TEMPLATE.'/';break;case 'partial':$base.=self::DIR_PARTIAL.'/';break;}file_exists($temp=$base.self::get_filename($name,$format,$locale))||file_exists($temp=$base.self::get_filename($name,$format))||file_exists($temp=$base.self::get_filename($name))||$temp=false;return $temp;}}} namespace System{abstract class Resource{const TYPE_SCRIPTS='scripts';const TYPE_STYLES='styles';const SYMBOL_NOESS='noess';const DIR_TMP='/var/cache';const SCRIPTS_DIR='/share/scripts';const SCRIPTS_STRING_NOT_FOUND='v("Jaffascript module not found: %s");';const STYLES_DIR='/share/styles';const STYLES_STRING_NOT_FOUND='/* Style module not found: %s */';const KEY_SUM='sum';const KEY_TYPE='type';const KEY_FOUND='found';const KEY_MISSING='missing';const KEY_DIR_FILES='modules';const KEY_DIR_CONTENT='content';const KEY_STRING_NOT_FOUND='not_found_string';const KEY_POSTFIXES='postfixes';const MAX_AGE=86400;private static $serial=null;private static $types=array(self::TYPE_SCRIPTS=>array(self::KEY_DIR_FILES=>self::SCRIPTS_DIR,self::KEY_STRING_NOT_FOUND=>self::SCRIPTS_STRING_NOT_FOUND,self::KEY_DIR_CONTENT=>'text/javascript',self::KEY_POSTFIXES=>array('js'),),self::TYPE_STYLES=>array(self::KEY_DIR_FILES=>self::STYLES_DIR,self::KEY_STRING_NOT_FOUND=>self::STYLES_STRING_NOT_FOUND,self::KEY_DIR_CONTENT=>'text/css',self::KEY_POSTFIXES=>array('css'),),);public static function request(){$request=\System\Http\Request::from_hit();$info=self::get_type_info($request->get('type'));$modules=self::get_module_list($info['type'],$request->get('modules'));if(any($modules)){$files=self::file_list($info[self::KEY_TYPE],$modules);$content=self::get_content($info,$files);self::send_header($info['type'],strlen($content));echo $content;}else throw new \System\Error\NotFound();}private static function get_content(array $info,array $files){try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if(!$debug&&file_exists($f=self::get_cache_path($info,$files[self::KEY_SUM]))){$content=\System\File::read($f);}else{ob_start();foreach($files[self::KEY_FOUND]as $file){include $file;}foreach($files[self::KEY_MISSING]as $file){echo sprintf($info[self::KEY_STRING_NOT_FOUND],$file);}$content=\System\Minifier::process($info['type'],ob_get_clean());\System\File::put(self::get_cache_path($info,$files[self::KEY_SUM]),$content);}return $content;}public static function file_list($type,array $modules=array()){$info=self::get_type_info($type);$found=array();$missing=array();if(is_dir(ROOT.$info[self::KEY_DIR_FILES])){foreach($modules as $module){if($module!==self::SYMBOL_NOESS){$mod_found=false;foreach($info[self::KEY_POSTFIXES]as $postfix){if(file_exists($p=ROOT.$info[self::KEY_DIR_FILES]."/".$module.'.list')){$list=self::file_list($type,array_map('trim',array_filter(explode("\n",\System\File::read($p)))));$found=array_merge($found,$list[self::KEY_FOUND]);$missing=array_merge($missing,$list[self::KEY_MISSING]);$mod_found=true;}elseif(file_exists($p=ROOT.$info[self::KEY_DIR_FILES]."/".$module.'.'.$postfix)){$found[]=$p;$mod_found=true;break;}}if(!$mod_found){$missing[]=$module;}}}}return array(self::KEY_FOUND=>$found,self::KEY_MISSING=>$missing,self::KEY_SUM=>self::get_module_sum_from_list($modules),);}private static function get_cache_name(array $info,$sum){return $info['type'].'/'.$sum.(any($info[self::KEY_POSTFIXES])?'.'.($info[self::KEY_POSTFIXES][0]):'');}private static function get_cache_path(array $info,$sum){return ROOT.self::DIR_TMP.'/'.self::get_cache_name($info,$sum);}private static function get_module_sum_from_list(array $modules){return self::get_module_sum(implode(':',$modules));}private static function get_module_sum($str){return md5($str);}public static function get_module_list($type,$name){if(strpos($name,':')===0){$content=array_filter(explode(':',$name));self::resource_list_save($type,$content);$name=self::get_resource_list_name($content);redirect_now('/share/'.$type.'/'.self::get_resource_list_wget_name($type,$name),\System\Http\Response::MOVED_PERMANENTLY);}else{if($list=\System\File::read($p=self::get_resource_list_path($type,self::strip_serial($name)),true)){return explode("\n",$list);}else return array();}}public static function get_type_info($type){if(array_key_exists($type,self::$types)){$info=self::$types[$type];$info[self::KEY_TYPE]=$type;return $info;}else throw new \System\Error\Argument('Resource of type "'.$type.'" does not exist.');}public static function send_header($type,$length){$info=self::get_type_info($type);header("HTTP/1.1 200 OK");header('Content-Type: '.$info['content']);header('Content-Length: '.$length);try{$debug=cfg('dev','debug');}catch(\System\Error $e){$debug=true;}if(!$debug){header("Pragma: public,max-age=".self::MAX_AGE);header('Cache-Control: public');header('Expires: '.date(\DateTime::RFC1123,time()+self::MAX_AGE+rand(0,60)));header('Age: 0');}}public static function filter_output_content($type,&$content){if(is_array($content)){if(any($content)){self::resource_list_save($type,$content);$name=self::get_resource_list_name($content);$content=self::get_resource_list_wget_name($type,$name);}else $content=null;}}private static function resource_list_save($type,&$content){$content=array_unique($content);$name=self::get_resource_list_name($content);$file=self::get_resource_list_path($type,$name);if(!file_exists($file)){\System\File::put($file,implode(NL,$content));}}public static function get_resource_list_wget_name($type,$name){$postfix=self::get_type_postfix($type);return $name.'.'.self::get_serial().($postfix?'.'.$postfix:'');}private static function get_type_postfix($type){if(isset(self::$types[$type][self::KEY_POSTFIXES])){return first(self::$types[$type][self::KEY_POSTFIXES]);}else return false;}public static function get_resource_list_name(array $content){return md5(implode(':',$content));}public static function get_resource_list_path($type,$name){return ROOT.self::DIR_TMP.'/'.$type.'/'.$name.'.list';}public static function get_serial(){if(is_null(self::$serial)){try{$debug=cfg('dev','debug')&&cfg('dev','disable','serial');}catch(\System\Error $e){$debug=true;}if($debug){self::$serial=rand(0,PHP_INT_MAX);}else{self::$serial=cfg('cache','resource','serial');}}return self::$serial;}public static function strip_serial($name){return first(explode('.',$name));}}} namespace System{class Migration extends Model\Database{const BASEDIR='/etc/database/migrations.d';static protected $attrs=array("seoname"=>array('varchar'),"name"=>array('varchar'),"desc"=>array('varchar'),"md5_sum"=>array('varchar'),"status"=>array('varchar'),"date"=>array('datetime'),);static function get_new(){try{$old_items=get_all("System\Migration")->fetch();}catch(\System\Error $e){$old_items=array();}$old=array();foreach($old_items as&$m){$old[]=$m->date->format('sql').'-'.$m->seoname;}$items=self::checkout_folder($old);if(any($items)){$sums=collect(array('attr','md5_sum'),$items,true);try{$old=get_all("\System\Migration",array("t0.md5_sum IN ('".implode("','",$sums)."')"))->fetch();}catch(\System\Error $e){$old=array();}}foreach($old as $mig){foreach($items as $key=>$nmig){if($mig->get_checksum()==$nmig->get_checksum()){if($mig->status=='ok'){unset($items[$key]);}else{$items[$key]=$mig;}}}}uasort($items,array('self','sort'));return $items;}public static function checkout_folder(array $old=array()){$dir=opendir(ROOT.self::BASEDIR);$items=array();while($file=readdir($dir)){if(preg_match("/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[a-zA-Z\_\-]*\.php$/",$file)){$fname=explode('-',$file);$date=new \Datetime(intval($fname[0]).'-'.intval($fname[1]).'-'.intval($fname[2]));$name=\System\File::remove_postfix($fname[3]);if(!in_array($date->format("Y-m-d").'-'.$name,$old)){$temp=&$items[];$temp=new self(array("file"=>$file,"date"=>$date,"seoname"=>$name,"status"=>'new',));$temp->get_meta();$temp->get_checksum();}}}usort($items,array("self","sort"));return $items;}static function run_all(&$items=null){if(!$items){$items=self::get_new();}foreach($items as&$m){if($m->run()->status!='ok'){return false;}}return true;}public function&run(){$this->sql("START TRANSACTION");include($p=ROOT.self::BASEDIR.'/'.$this->get_filename());$this->sql("COMMIT");$this->get_checksum();$this->status=empty($this->errors)?'ok':'failed';$this->save();return $this;}private function get_checksum(){if(!$this->md5_sum){$this->md5_sum=md5(\System\File::read($p=ROOT.self::BASEDIR.'/'.$this->get_filename()));}return $this->md5_sum;}private function sql($query){try{return Database::query($query);}catch(\System\Error $e){$this->status='failed';$this->errors[]=$e->getMessage();}}public function get_filename(){return $this->date->format('Y-m-d').'-'.$this->seoname.'.php';}public function get_meta(){if(file_exists($p=ROOT.self::BASEDIR.'/'.$this->get_filename())){$c=file($p);foreach($c as $line){if(strpos($line,'#[')===0){$this->name=self::cut_meta($line);if(strpos(next($c),'#[')===0){$this->desc=self::cut_meta($line);}break;}}}}static function cut_meta($line){return substr($line,2,strlen($line)-4);}private static function sort(self $a,self $b){if(($ta=$a->date->getTimestamp())==($tb=$b->date->getTimestamp())){return 0;}return($ta<$tb)?-1:1;}}} namespace System{abstract class Cache{const TTL_DEFAULT=3600;static private $driver;static private $enabled;static private $ready=false;static private $ttl=self::TTL_DEFAULT;public static function init(){if(!self::$ready){if(self::$enabled=cfg('cache','memory','enabled')){if(class_exists(self::get_cfg_driver())){self::$ready=self::setup_driver();}else throw new \System\Error\Config('Cache driver does not exist. Check your app settings',cfg('cache','memory'));}else{self::$ready=true;}}}public static function __callStatic($method,$args){if(self::is_enabled()){if(self::is_ready()){if(method_exists(self::get_driver(),$method)){return self::get_driver()->$method(def($args[0],null),def($args[1],null),def($args[2],null));}else throw new \System\Error\Wtf(sprintf('Cache driver method does not exist: %s',$method));}}else return null;}public static function fetch($path,&$var){if(self::is_enabled()){if(self::is_ready()){return self::get_driver()->fetch($path,$var);}}else return $var=null;}public static function is_ready(){return self::$ready;}public static function is_enabled(){return self::$enabled;}private static function setup_driver(){$drv_name=self::get_cfg_driver();self::$driver=new $drv_name();return true;}public static function get_cfg_driver(){return self::$driver="\\System\\Cache\\Driver\\".ucfirst(cfg('cache','memory','driver'));}public static function get_driver(){return self::$driver;}}} namespace System\Minifier{class Scripts{protected $input;protected $index=0;protected $a='';protected $b='';protected $c;protected $options;static protected $defaultOptions=array('flaggedComments'=>false);static protected $jshrink;static public function minify($js,$options=array()){try{ob_start();$currentOptions=array_merge(self::$defaultOptions,$options);if(!isset(self::$jshrink))self::$jshrink=new self();self::$jshrink->breakdownScript($js,$currentOptions);$content=ob_get_clean();return $content;}catch(Exception $e){if(isset(self::$jshrink))self::$jshrink->clean();ob_end_clean();throw $e;}}protected function breakdownScript($js,$currentOptions){$this->clean();$this->options=$currentOptions;$js=str_replace("\r\n","\n",$js);$this->input=str_replace("\r","\n",$js);$this->a=$this->getReal();while(strlen($this->a)>1){echo $this->a;$this->a=$this->getReal();}$this->b=$this->getReal();while($this->a!==false&&!is_null($this->a)&&$this->a!==''){if(strlen($this->b)>1){echo $this->a.$this->b;$this->a=$this->getReal();$this->b=$this->getReal();continue;}switch($this->a){case "\n":if(strpos('(-+{[@',$this->b)!==false){echo $this->a;$this->saveString();break;}if($this->b===' ')break;case ' ':if(self::isAlphaNumeric($this->b))echo $this->a;$this->saveString();break;default:switch($this->b){case "\n":if(strpos('}])+-"\'',$this->a)!==false){echo $this->a;$this->saveString();break;}else{if(self::isAlphaNumeric($this->a)){echo $this->a;$this->saveString();}}break;case ' ':if(!self::isAlphaNumeric($this->a))break;default:if($this->a=='/'&&($this->b=='\''||$this->b=='"')){$this->saveRegex();continue;}echo $this->a;$this->saveString();break;}}$this->b=$this->getReal();if(($this->b=='/'&&strpos('(,=:[!&|?',$this->a)!==false))$this->saveRegex();}$this->clean();}protected function getChar(){if(isset($this->c)){$char=$this->c;unset($this->c);}else{$tchar=substr($this->input,$this->index,1);if(isset($tchar)&&$tchar!==false){$char=$tchar;$this->index++;}else{return false;}}if($char!=="\n"&&ord($char)<32)return ' ';return $char;}protected function getReal(){$startIndex=$this->index;$char=$this->getChar();if($char=='/'){$this->c=$this->getChar();if($this->c=='/'){$thirdCommentString=substr($this->input,$this->index,1);$char=$this->getNext("\n");if($thirdCommentString=='@'){$endPoint=($this->index)-$startIndex;unset($this->c);$char="\n".substr($this->input,$startIndex,$endPoint);}else{$char=$this->getChar();$char=$this->getChar();}}elseif($this->c=='*'){$this->getChar();$thirdCommentString=$this->getChar();if($thirdCommentString=='@'){$this->index=$this->index-2;return '/';}elseif($this->getNext('*/')){$this->getChar();$this->getChar();$char=$this->getChar();if($this->options['flaggedComments']&&$thirdCommentString=='!'){$endPoint=($this->index-1)-$startIndex;echo "\n".substr($this->input,$startIndex,$endPoint)."\n";}}else{$char=false;}if($char===false)throw new \System\Error\Format('Stray comment. '.$this->index);if(isset($this->c))unset($this->c);}}return $char;}protected function getNext($string){$pos=strpos($this->input,$string,$this->index);if($pos===false)return false;$this->index=$pos;return substr($this->input,$this->index,1);}protected function saveString(){$this->a=$this->b;if($this->a=="'"||$this->a=='"'){$stringType=$this->a;while(1){echo $this->a;$this->a=$this->getChar();switch($this->a){case $stringType:break 2;case "\n":throw new \System\Error\Format('Unclosed string. '.$this->index);break;case '\\':echo $this->a;$this->a=$this->getChar();}}}}protected function saveRegex(){echo $this->a.$this->b;while(($this->a=$this->getChar())!==false){if($this->a=='/')break;if($this->a=='\\'){echo $this->a;$this->a=$this->getChar();}if($this->a=="\n")throw new \System\Error\Format('Stray regex pattern. '.$this->index);echo $this->a;}$this->b=$this->getReal();}protected function clean(){unset($this->input);$this->index=0;$this->a=$this->b='';unset($this->c);unset($this->options);}static protected function isAlphaNumeric($char){return preg_match('/^[\w\$]$/',$char)===1||$char=='/';}}} namespace System\Minifier{class Styles{public static function minify($css,$options=array()){$obj=new self($options);return $obj->_process($css);}protected $_options=null;protected $_inHack=false;private function __construct($options){$this->_options=$options;}protected function _process($css){$css=str_replace("\r\n","\n",$css);$css=preg_replace('@>/\\*\\s*\\*/@','>/*keep*/',$css);$css=preg_replace('@/\\*\\s*\\*/\\s*:@','/*keep*/:',$css);$css=preg_replace('@:\\s*/\\*\\s*\\*/@',':/*keep*/',$css);$css=preg_replace_callback('@\\s*/\\*([\\s\\S]*?)\\*/\\s*@',array($this,'_commentCB'),$css);$css=preg_replace('/\\s*{\\s*/','{',$css);$css=preg_replace('/;?\\s*}\\s*/','}',$css);$css=preg_replace('/\\s*;\\s*/',';',$css);$css=preg_replace('/url\\(\\s*([^\\)]+?)\\s*\\)/x','url($1)',$css);$css=preg_replace('/\\s*([{;])\\s*([\\*_]?[\\w\\-]+)\\s*:\\s*(\\b|[#\'"-])/x','$1$2:$3',$css);$css=preg_replace_callback('/(?:\\s*[^~>+,\\s]+\\s*[,>+~])+\\s*[^~>+,\\s]+{/x',array($this,'_selectorsCB'),$css);$css=preg_replace('/([^=])#([a-f\\d])\\2([a-f\\d])\\3([a-f\\d])\\4([\\s;\\}])/i','$1#$2$3$4$5',$css);$css=preg_replace_callback('/font-family:([^;}]+)([;}])/',array($this,'_fontFamilyCB'),$css);$css=preg_replace('/@import\\s+url/','@import url',$css);$css=preg_replace('/[ \\t]*\\n+\\s*/',"\n",$css);$css=preg_replace('/([\\w#\\.\\*]+)\\s+([\\w#\\.\\*]+){/',"$1\n$2{",$css);$css=preg_replace('/((?:padding|margin|border|outline):\\d+(?:px|em)?)\\s+/x',"$1\n",$css);$css=preg_replace('/:first-l(etter|ine)\\{/',':first-l$1 {',$css);$css=str_replace("\n",' ',$css);return trim($css);}protected function _selectorsCB($m){return preg_replace('/\\s*([,>+~])\\s*/','$1',$m[0]);}protected function _commentCB($m){$hasSurroundingWs=(trim($m[0])!==$m[1]);$m=$m[1];if($m==='keep')return '/**/';if($m==='" "'){return '/*" "*/';}if(preg_match('@";\\}\\s*\\}/\\*\\s+@',$m)){return '/*";}}/* */';}if($this->_inHack){if(preg_match('@^/\\s*(\\S[\\s\\S]+?)\\s*/\\*@x',$m,$n)){$this->_inHack=false;return"/*/{$n[1]}/**/";}}if(substr($m,-1)==='\\'){$this->_inHack=true;return '/*\\*/';}if($m!==''&&$m[0]==='/'){$this->_inHack=true;return '/*/*/';}if($this->_inHack){$this->_inHack=false;return '/**/';}return $hasSurroundingWs?' ':'';}protected function _fontFamilyCB($m){$pieces=preg_split('/(\'[^\']+\'|"[^"]+")/',$m[1],null,PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);$out='font-family:';while(null!==($piece=array_shift($pieces))){if($piece[0]!=='"'&&$piece[0]!=="'"){$piece=preg_replace('/\\s+/',' ',$piece);$piece=preg_replace('/\\s?,\\s?/',',',$piece);}$out.=$piece;}return $out.$m[2];}}} namespace System{class Location extends \System\Model\Database{protected static $attrs=array("name"=>array("varchar","is_unique"=>true),"addr"=>array("varchar"),"gps"=>array("point"),"desc"=>array("text","default"=>''),"site"=>array("url","default"=>''),"author"=>array('belongs_to',"model"=>'\System\User'),);public function map($w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return 'http://maps.googleapis.com/maps/api/staticmap?sensor=false&amp;zoom=14&amp;size='.$w.'x'.$h.'&amp;maptype='.$type.'&amp;markers='.$this->gps->gps();}public function map_link(){return 'http://maps.google.com/maps?q='.$this->gps->gps();}public function map_html(\System\Template\Renderer $ren,$w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return \Tag::a(array("output"=>false,"class"=>'location_map',"href"=>$this->map_link(),"content"=>$this->to_html($ren,$w,$h,$type)));}public function to_html(\System\Template\Renderer $ren,$w=\System\Gps::MAP_WIDTH_DEFAULT,$h=\System\Gps::MAP_HEIGHT_DEFAULT,$type=\System\Gps::GMAP_TYPE_ROADMAP){return $this->gps->to_html($ren,$w,$h,$type);}}} namespace System{class File extends Model\Attr{const DIR='/var/files';const TMP_DIR='/var/tmp';const FETCHED_SIGN='-FETCHED';const MOD_DEFAULT=0664;private static $operations=self::TMP_DIR;static protected $attrs=array("filename"=>array('varchar'),"dirpath"=>array('varchar'),"suffix"=>array('varchar'),"mime_type"=>array('varchar'),"tmp_name"=>array('varchar'),"size"=>array('int'),);public static function clear_tmp(){self::remove_directory(ROOT.self::TMP_DIR);mkdir(ROOT.self::TMP_DIR,0777,true);}public static function remove_directory($dir){if(strpos('..',$dir)===false){if(strpos($dir,ROOT.self::$operations)!==0)$dir=ROOT.self::$operations.$dir;if(is_dir($dir)){$dp=opendir($dir);while($f=readdir($dp)){if($f!='..'&&$f!='.'){!!(is_dir($dir.'/'.$f))?self::remove_directory($dir.'/'.$f):unlink($dir.'/'.$f);}}rmdir($dir);}}}static function fetch($url,$dir=null){$u=explode('/',$url);$name=end($u);$e=explode('.',$name);unset($e[0]);$suffix=implode('.',$e);$data=\System\Offcom\Request::get($url);if($data->ok()){if(!$dir){$dir=ROOT.self::TMP_DIR;}\System\Directory::check($dir);$magic=strtoupper(gen_random_string(10));$tmp_name=$dir.'/'.$magic.self::FETCHED_SIGN.'.'.$suffix;if(!file_put_contents($tmp_name,$data->content,LOCK_EX)){throw new \System\Error\File(sprintf('Could not temporarily save fetched file into "%s".',$tmp_name));}return new self(array("filename"=>$name,"dirpath"=>dirname($dir),"suffix"=>$suffix,"tmp_name"=>$tmp_name));}else throw new \System\Error\Connection('Couldn\'t fetch file',sprintf('HTTP error %s ',$data->status));}public function get_tmp_url(){return $this->__get('tmp_name');}public function move($where,$use_tmp=false){$op=$use_tmp?$this->__get('tmp_name'):$this->__get('dirpath').'/'.$this->__get('filename');$np=(dirname($where)==$where)?dirname($where).'/'.$this->filename:$where;if(file_exists($np)){unlink($np);}if(!rename($op,$np)){$this->errors[]='move-failed';}return $this;}public function remove(){unlink($this->tmp_name);return $this;}public function save($where){return $this->move($where,true);}public static function remove_postfix($name,$all=false){$temp=explode('.',$name);if(count($temp)>1){array_pop($temp);return $all?reset($temp):implode('.',$temp);}return $name;}public static function save_content($filepath,$content,$mode=self::MOD_DEFAULT){return self::put($filepath,$content,$mode);}public static function put($path,$content,$mode=null){if(\System\Directory::check($d=dirname($path))&&(($ex=file_exists($path))||is_writable($d))){if(!$ex||is_writable($path)){$write=file_put_contents($path,$content);$mod=true;if(!$ex&&is_null($mode)){chmod($path,self::MOD_DEFAULT);}if(!is_null($mode)){if(!$mod=@chmod($path,$mode)){throw new \System\Error\Permissions(sprintf('Failed to set %s permissions on file "%s".',$mode,$path));}}return $write&&$mod;}else throw new \System\Error\Permissions(sprintf('Failed to write data into file "%s". Check your permissions.',$path));}else throw new \System\Error\Permissions(sprintf('Failed to write data into file "%s". Parent directory is not writeable.',$path));return $action;}public static function read($path,$silent=false){if(\System\Directory::check(dirname($path),false)&&file_exists($path)){if(is_readable($path)){return file_get_contents($path);}else if(!$silent)throw new \System\Error\Permissions(sprintf('Failed to read file "%s". It is not readable.',$path));}else if(!$silent)throw new \System\Error\File(sprintf('Failed to read file "%s". It does not exist.',$path));return false;}}} namespace System\Santa{class Package extends \System\Model\Attr{const DIR_TMP='/var/tmp';const DIR_META='/etc/santa';const PATH_BIN='/www/bin';static protected $attrs=array("name"=>array('varchar'),"repo"=>array('varchar'),"category"=>array('varchar'),"project"=>array('varchar'),"desc"=>array('varchar'),"branch"=>array('varchar'),"homepage"=>array('varchar'),);private $versions=array();private $installed_meta=array();private $installed_version;public function is_installed(){return file_exists($this->get_version_file());}public function get_installed_version(){if($this->is_installed()&&empty($this->installed_version)){$meta=$this->get_installed_meta();$this->installed_version=$this->get_version($meta['origin'],$meta['version'],$meta['branch']);}return $this->installed_version;}public function get_installed_meta(){if($this->is_installed()&&empty($this->installed_meta)){$this->installed_meta=\System\Json::read($this->get_version_file());}return $this->installed_meta;}public function get_meta_dir(){return ROOT.self::DIR_META.'/'.$this->get_full_name();}public function get_version_file(){return $this->get_meta_dir().'/version';}public function get_version($repo,$ver,$branch){$v=new \System\Santa\Package\Version(array("repo"=>$repo,"name"=>$ver,"branch"=>$branch,"package"=>$this->get_full_name(),));$v->set_package($this);return $v;}public function add_version($repo,$ver,$branch){$str=$repo.'-'.$ver.'-'.$branch;if(empty($this->versions[$str])){$this->versions[$str]=new \System\Santa\Package\Version(array("repo"=>$repo,"name"=>$ver,"branch"=>$branch,"package"=>$this->get_full_name(),));$this->versions[$str]->set_package($this);}}public function get_full_name(){return $this->category.'/'.$this->name;}public function check(){$dir=$this->get_tmp_dir();if(file_exists($dir.'/checksum')){$bad=array();$sums=file($dir.'/checksum',FILE_SKIP_EMPTY_LINES);foreach($sums as $row){$temp=array_filter(explode('  ',str_replace("\n",null,trim($row))));list($sum,$file)=$temp;$file=str_replace('./',null,$file);if($file!='changelog'&&$sum!=md5(\System\File::read($dir.'/'.$file))){$bad[]=$file;}}return!!(empty($bad))?true:$bad;}else throw new \System\Error\Santa(sprintf('Could not find checksum file for package "%s%".',$this->get_package_name()));}public function get_available(){if(empty($this->versions)){if($data=\System\Santa::find($this->name,$this->category)){foreach($data as $repo=>$pkg){foreach($pkg['versions']as $ver){$this->add_version($repo,$ver['name'],$ver['branch']);}}}}return $this->versions;}public function add_available(array $versions){foreach($versions as $ver){$this->available[]=$ver['branch'].'/'.$ver['name'];}}public function is_available_for_update(){if($this->is_installed()){foreach($this->get_available()as $ver){if($ver->greater_than($this->get_installed_version())){return true;}}}return false;}public function get_latest_version(){$versions=$this->get_available();$latest=null;foreach($versions as $version){$greater=false;if(is_null($latest)||($greater=$version->greater_than($latest))){$latest=$version;}if(is_null($greater)&&$latest->branch){$latest=$version;}}return $latest;}public function remove(){if($this->is_installed()){$this->get_installed_version()->remove();}return!$this->is_installed();}}} namespace System\Santa{abstract class Cli{private static $branch_colors=array('stable'=>'light_green','master'=>'light_green','unstable'=>'yellow','testing'=>'light_red',);public static function get_branch_color($branch){return isset(self::$branch_colors[$branch])?self::$branch_colors[$branch]:'normal';}public static function get_branch_color_text($text,$branch){return \System\Cli::term_color($text,self::get_branch_color($branch));}}} namespace System\Santa\Package{class Version extends \System\Model\Attr{const PKG_FORMAT='tar.bz2';const DIR_META='/meta';protected static $attrs=array("name"=>array('varchar'),"repo"=>array('varchar'),"branch"=>array('varchar'),"package"=>array('varchar'),);public function is_installed(){$meta=$this->pkg()->get_installed_meta();return $this->pkg()->is_installed()&&(!isset($meta['origin'])||$meta['origin']==$this->repo)&&$meta['branch']==$this->branch&&$meta['version']==$this->name;}public function is_downloaded(){return file_exists($this->get_package_path());}public function is_extracted(){return is_dir($dir_tmp=$this->get_tmp_dir())&&file_exists($dir_tmp.'/meta/checksum');}public function set_package(\System\Santa\Package $pkg){$this->pkg=$pkg;}public function pkg(){return $this->pkg;}public function full_name(){return $this->repo.'/'.$this->pkg()->get_full_name().'-'.$this->short_name();}public function name(){return $this->repo.'/'.$this->short_name();}public function package_name(){return $this->pkg()->name.'-'.$this->short_name().'.'.self::PKG_FORMAT;}public function full_package_name(){return($this->repo?$this->repo.'-':'').$this->package_name();}public function short_name(){return $this->name.($this->branch!='stable'?'-'.$this->branch:'');}public function get_file_manifest(){if($this->is_installed()){$p=$this->pkg()->get_meta_dir();}else{!$this->is_extracted()&&$this->extract();$p=$this->get_tmp_dir().self::DIR_META;}$manifest=array();if(file_exists($f=$p.'/checksum')){$files=file($f);foreach($files as $file){$fp=explode('  ',trim($file));if(count($fp)===2){list($checksum,$path)=$fp;$manifest[]=array("checksum"=>$checksum,"path"=>'/'.$path,);}}}return $manifest;}public function install(){$this->extract();$bad=array();$tdir=$this->get_tmp_dir();$deprecated=array();if($ver=$this->pkg()->get_installed_version()){$deprecated=$this->get_deprecated_files($ver);}self::install_recursive($tdir.'/data',$tdir.'/data',$bad);\System\Directory::check($this->pkg()->get_meta_dir());rename($tdir.'/meta/checksum',$this->pkg()->get_meta_dir().'/checksum');rename($tdir.'/meta/changelog',$this->pkg()->get_meta_dir().'/changelog');\System\Json::put($this->pkg()->get_meta_dir().'/version',array("name"=>$this->pkg()->name,"project"=>$this->pkg()->project,"version"=>$this->name,"branch"=>$this->branch,"origin"=>$this->repo,));foreach($deprecated as $file){if(file_exists($p=ROOT.$file)){unlink($p);}}return!!(empty($bad))?true:$bad;}public function get_deprecated_files(self $ver){$manifest_this=$this->get_file_manifest();$manifest_other=$ver->get_file_manifest();$deprecated=array();$found=false;foreach($manifest_other as $file_other){foreach($manifest_this as $file_this){if($file_this['path']==$file_other['path']){$found=true;break;}}if(!$found){$deprecated[]=$file_other['path'];}}return $deprecated;}private static function install_recursive($dir,$root,&$bad){$dp=opendir($dir);while($f=readdir($dp)){if(strpos($f,'.')!==0){if(is_dir($dir.'/'.$f)){\System\Directory::check($newdir=str_replace($root,ROOT,$dir).'/'.$f);self::install_recursive($dir.'/'.$f,$root,$bad);}else{if(!copy($dir.'/'.$f,$nf=str_replace($root,ROOT,$dir).'/'.$f)){$bad[]=str_replace(ROOT,NULL,$nf);}}}}}public function greater_than(self $version){return self::greater_version_than($this->name,$version->name);}public static function greater_version_than($a,$b){if($a=='unknown')return false;if($b=='unknown')return true;$a=array_map('intval',explode('.',$a));$b=array_map('intval',explode('.',$b));foreach(array(0,1,2)as $key){!isset($a[$key])&&$a[$key]=0;!isset($b[$key])&&$b[$key]=0;if($a[$key]>$b[$key]){return true;}elseif($a[$key]<$b[$key]){return false;}}return null;}public function get_tmp_dir(){return ROOT.\System\Santa::DIR_TMP.'/'.$this->full_package_name().'-unpacked';}public function extract(){if(!$this->is_extracted()){$this->download();$ar=\System\Archive::from('bz2',$this->get_package_path(),true)->extract($this->get_tmp_dir());$this->extracted=true;}return $this->is_extracted();}public function download(){if(!$this->is_downloaded()){$data=\System\Offcom\Request::get($this->get_download_url());if($data->ok()){\System\File::put($this->get_package_path(),$data->content);}else throw new \System\Error\Connection('Fetching package',sprintf('HTTP error %s ',$data->status));}return $this->is_downloaded();}public function get_download_url(){$host=str_replace('/sync/','',cfg('santa','repositories',$this->repo));return $host.'/var/packages/'.$this->pkg()->category.'/'.$this->pkg()->name.'/'.$this->package_name();}public function get_package_path(){return ROOT.\System\Santa::DIR_TMP.'/'.$this->full_package_name();}public function get_meta(){if($this->is_installed()){return $this->pkg()->get_installed_meta();}else{$this->extract();$meta_path=$this->get_tmp_dir().self::DIR_META;$meta=array("version"=>\System\Json::read($meta_path.'/version'),"checksum"=>\System\File::read($meta_path.'/checksum'),"changelog"=>\System\File::read($meta_path.'/changelog'),);$meta['version']['origin']=$this->repo?$this->repo:'';return $meta;}}public function check_files(){$installed=self::get_all_installed();$my_files=$this->get_file_manifest();$blocks=array();foreach($installed as $pkg){if($pkg->name!=$this->name){$current_files=$pkg->get_file_manifest();foreach($my_files as $mf){foreach($current_files as $cf){if($mf['path']==$cf['path']){$blocks[]=array("path"=>$mf['path'],"old"=>$cf['checksum'],"new"=>$cf['checksum'],"package"=>$pkg->name.'-'.$pkg->version,);}}}}}return $blocks;}public function get_file_conflicts(array $packages){$result=array();foreach($packages as $ver){if($conflict=$this->get_file_conflicts_for($ver)){$result=array_merge($result,$conflict);}}return any($result)?$result:false;}public function get_file_conflicts_for(self $ver){$result=array();if($this->pkg()->get_full_name()!=$ver->pkg()->get_full_name()){$files_this=$this->get_file_manifest();$files_other=$ver->get_file_manifest();foreach($files_this as $file_this){foreach($files_other as $file_other){if($file_this['path']==$file_other['path']){$result[]=array("package"=>$ver->full_name(),"file"=>$file_this['path'],);}}}}return any($result)?$result:false;}public function clear_tmp(){\System\File::remove_directory($this->get_tmp_dir());unlink($this->get_package_path());}public function remove(){$manifest=$this->get_file_manifest();foreach($manifest as $file){if(file_exists($f=ROOT.$file['path'])){unlink($f);}}\System\Directory::remove($this->pkg()->get_meta_dir());return $this->is_installed();}}} namespace System{abstract class Router{const DIR_REWRITE='/etc/rewrite.d';const REWRITE_TARGET='/.htaccess';public static function get_domain($host){$domains=cfg('domains');try{if(cfg('domains',$host)){return $host;}}catch(\System\Error\Config $e){foreach($domains as $domain=>$config){if(isset($config['rules'])and isset($config['init'])){if(self::domain_match($host,$config)){return $domain;}}else{throw new \System\Error\Format(sprintf("Domain '%s' must have key 'rules' and 'init' defined!",$domain));}}}return false;}public static function get_path($host,$path,array&$args=array()){if($domain=self::get_domain($host)){try{$routes=cfg('routes',$domain);foreach($routes as $route){if(isset($route[0])){$route_urls=is_array($route[0])?$route[0]:array($route[0]);foreach($route_urls as $route_url){$matches=array();if(self::json_preg_match($route_url,$path,$args)){return $route;}}}}}catch(\System\Error $e){throw cfg('dev','debug')?new \System\Error\Config(sprintf("There are no routes for domain '%s'.",$domain),sprintf("Create file '%s.json' in '%s' and make some routes.",$domain,\System\Settings::DIR_CONF_ROUTES)):new \System\Error\NotFound();}}else{throw cfg('dev','debug')?new \System\Error\Config(sprintf("Domain '%s' was not found in domain config.",$host),sprintf("Add it to your global config in '%s/domains.json'.",\System\Settings::DIR_CONF_GLOBAL)):new \System\Error\NotFound();}return false;}public static function get_url($host,$name,array $args=array(),$variation=0){if($domain=self::get_domain($host)){$routes=cfg('routes',$domain);foreach($routes as $route){if(isset($route[0])&&isset($route[2])&&$name==$route[2]){if($variation>0){if(is_array($route[0])){$route_url=$route[0][$variation];}else throw new \System\Error\Argument(sprintf("Named route called '%s' does not have any variations.",$name));}else{$route_url=is_array($route[0])?$route[0][0]:$route[0];}$search='open';$route_args=array();$path=str_split($route_url,1);for($pos=0;$pos<count($path);$pos++){if($search=='open'){if($path[$pos]=='('){$arg=array($pos);$search='close';}}if($search=='close'){if($path[$pos]==')'){$arg[1]=$pos+1;$route_args[]=$arg;$search='open';}}}if(($c=count($route_args))<=count($args)){$str='';if($c>0){$num=0;foreach($args as $num=>$arg){$start=$num==0?0:$route_args[$num-1][1];for($letter=$start;$letter<$route_args[$num][0];$letter++){$str.=$path[$letter];}if(is_object($arg)){if($arg instanceof \System\Model\Database){$val=$arg->get_seoname();}else throw new \System\Error\Argument(sprintf("Argument '%s' passed to reverse build route '%s' must be string or instance of System::Model::Database",$num,$name),sprintf("Instance of '%s' was given.",get_class($arg)));}else $val=$arg;$str.=$val;}$start=$route_args[$num][1];for($letter=$start;$letter<count($path);$letter++){$str.=$path[$letter];}}else{$str=implode('',$path);}$str=str_replace(array('^','$'),'',$str);return $str;}else{throw new \System\Error\Argument(sprintf("Named route called '%s' accepts %s arguments. %s were given.",$name,count($route_args),count($args)));}$result=$route_url;foreach($args as $arg){$result=preg_replace($route_url,$arg,$result);}return $result;}}throw new \System\Error\Argument(sprintf("Named route called '%s' was not found for domain '%s'",$name,$host));}else{throw cfg('dev','debug')?new \System\Error\Config(sprintf("Domain '%s' was not found in domain config.",$domain),sprintf("Add it to your global config in '%s/domains.json'.",\System\Settings::DIR_CONF_GLOBAL)):new \System\Error\NotFound();}return false;}private static function domain_match($host,array $config){foreach($config['rules']as $rule){if(self::json_preg_match($rule,$host)){return true;}}return false;}public static function json_preg_match($regexp,$subject,array&$matches=array()){$matches_temp=array();$result=preg_match('/'.str_replace('/','\\/',$regexp).'/',$subject,$matches_temp);if($result){foreach($matches_temp as $key=>$match){if($key>0){$matches[]=$match;}}}return $result;}public static function generate_rewrite_rules(){$dir=ROOT.self::DIR_REWRITE;$od=opendir($dir);$files=array();while($file=readdir($od)){if(strpos($file,'.')!==0){$files[$file]=\System\File::read($dir.'/'.$file);}}ksort($files);return implode("\n",$files);}public static function update_rewrite(){return \System\File::put(ROOT.self::REWRITE_TARGET,self::generate_rewrite_rules());}public static function get_named_routes(){$all_routes=cfg('routes');$path_list=array();foreach($all_routes as $domain=>$routes){$path_list[$domain]=array();foreach($routes as $route){if(isset($route[0])&&isset($route[2])){$path_list[$domain][$route[2]]=$route[0];}}}return $path_list;}}} namespace System{class Module{const BASE_DIR='/lib/module';static private $instance_count=0;static private $array_forced_locals=array("conds","opts");private $id,$path,$locals,$slot,$parents,$request,$response,$flow;public function __construct($module,$locals=array(),$parents=array()){self::$instance_count++;$this->path='/'.$module;$this->locals=$locals;$this->parents=$parents;if(!empty($this->locals['module_id'])){$this->id=$this->locals['module_id'];}else{$this->id=self::get_new_id();}$this->slot=def($locals['slot'],Template::DEFAULT_SLOT);}public function get_path(){return $this->path;}public function get_id(){return $this->id;}public function accessible(){return $this->request()->user()->is_root()||$this->request()->user()->has_right('*')||$this->request()->user()->has_right(substr($this->get_path(),1));}public function exec(){$path=ROOT.self::BASE_DIR.$this->path.'.php';if(file_exists($path)){if(is_readable($path)){if($this->accessible()){if(!is_array($this->locals))$this->locals=array($this->locals);$locals=&$this->locals;def($locals['per_page'],20);def($locals['page'],intval($this->request()->get('page')));if(is_array($locals)){$propagated=array();if(any($this->parents)){$propagated=$this->dbus()->get_data($this->parents);$locals=array_merge($locals,$propagated);}foreach(self::$array_forced_locals as $var){if(isset($locals[$var])&&!is_array($locals[$var])){throw new \System\Error\Argument(sprintf('Local variable "$%s" must be an array for module "%s"',$var,$this->get_path()));}}foreach($locals as $key=>&$val){if(is_numeric($key)){$key='local_attr_'.$key;$locals[$key]=&$val;}else{$key=str_replace('-','_',$key);}$val==='#'&&$val=end($input);if(!is_object($val)&&!is_array($val)&&preg_match("/^\#\{[0-9]{1,3}\}$/",$val)){$temp=$this->response()->request()->args;$temp_key=intval(substr($val,2));if(isset($temp[$temp_key])){$val=$temp[$temp_key];}else throw new \System\Error\Argument(sprintf('Path variable #{%s} was not found.',$temp_key));}if(!is_object($val)&&!is_array($val)&&strpos($val,'#user{')===0){$val=soprintf(substr($val,5),$this->request()->user());}$$key=&$val;}}$module=$this;$response=$this->response();$renderer=$this->response()->renderer();$request=$this->response()->request();$flow=$this->response()->flow();$locales=$this->response()->locales();$ren=&$renderer;$required=require($path);return!!$required;}else throw new \System\Error\Permissions(sprintf('Cannot access module "%s". Permission denied.',$this->get_path()));}else throw new \System\Error\Permissions(sprintf('Cannot access module "%s". File is not readable.',$this->get_path()));}else throw new \System\Error\File(sprintf('Module not found: "%s", expected on path "%s".',$this->get_path(),$path));}private function propagate($name,$data){$this->dbus()->add_data($this,$name,$data);return $this;}public function req($var_name){if(isset($this->locals[$var_name])&&!is_null($this->locals[$var_name])){return $this->locals[$var_name];}else throw new \System\Error\Argument(sprintf('Local variable "%s" must be defined and not null for module "%s"!',$var_name,$this->get_path()));}public function partial($name,array $locals=array()){if($name instanceof \System\Form){$f=$name;$f->check_group_end();$f->check_tab_group_end();$f->check_inputs_end();$name=\System\Form::get_default_template();$locals+=array("f"=>$f);}$locals=array_merge($this->locals,$locals);$locals['module_id']=$this->id;$this->response()->renderer()->partial($name,$locals,def($locals['slot'],Template::DEFAULT_SLOT));}static public function get_new_id(){return 'noname-'.self::$instance_count;}public static function get_all($with_perms=false){$mods=array();$path=ROOT.self::BASE_DIR;\System\Directory::find_all_files($path,$mods,'/\.php$/');sort($mods);foreach($mods as&$mod){$mod=array("path"=>preg_replace('/\.php$/','',substr($mod,strlen($path)+1)));if($with_perms){$mod['perms']=get_all("\System\User\Perm",array("type"=>'module',"trigger"=>$mod['path'],))->fetch();}}return $mods;}public static function exists($mod){return file_exists(ROOT.self::BASE_DIR.'/'.$mod.'.php');}public static function eval_conds(array $conds){$result=true;foreach($conds as $cond_str){strpos($cond_str,',')===false&&$cond_str.=',';list($cond,$val)=explode(',',$cond_str,2);switch($cond){case 'logged-in':$result=$result&&$request->logged_in();break;case 'logged-out':$result=$result&&!$request->logged_in();break;}}return empty($conds)||$result;}public function bind_to_flow(\System\Module\Flow $flow){$this->response=$flow->response();$this->request=$flow->response()->request();$this->flow=$flow;$this->dbus=$flow->dbus();return $this;}public function response(){return $this->response;}public function request(){return $this->request;}public function dbus(){return $this->dbus;}}} namespace System\Module{class Flow{const REDIRECT_LATER=1;const REDIRECT_IMMEDIATELY=2;const REDIRECT_AFTER_MODULES=3;private $queue=array();private $redirect=array();private $start_time=0.0;private $stop_time=0.0;private $response;private $dbus;public function __construct(\System\Http\Response $response,array $modules=array()){$this->response=$response;$this->dbus=new \System\Module\DataBus($this);foreach($modules as $name=>$mod){if($mod instanceof \System\Module){$this->enqueue($mod);}else{$locals=isset($mod[1])?$mod[1]:array();if(!is_numeric($name)){$locals['module_id']=$name;}$this->add($mod[0],$locals,isset($mod[2])?$mod[2]:array());}}}public function add($module,array $locals=array(),array $parents=array()){if(empty($locals['mod-conds'])||(is_array($locals['mod-conds'])&&Module::eval_conds($locals['mod-conds']))){$this->enqueue(new \System\Module($module,$locals,$parents));}}public function enqueue(\System\Module $module){$this->queue[]=$module->bind_to_flow($this);}public function response(){return $this->response;}public function exec(){$this->start_time=microtime(true);while(!empty($this->queue)){$mod=array_shift($this->queue);$retval=$mod->exec();if(any($this->redirect[self::REDIRECT_LATER])){$r=&$this->redirect[self::REDIRECT_LATER];\System\Http\Response::redirect($r['url'],$r['code']);}}$this->stop_time=microtime(true);if(any($this->redirect[self::REDIRECT_AFTER_MODULES])){$r=&$this->redirect[self::REDIRECT_AFTER_MODULES];\System\Http\Response::redirect($r['url'],$r['code']);}}public function redirect($url,$code=\System\Http\Response::FOUND,$when=self::REDIRECT_AFTER_MODULES){$when===self::REDIRECT_IMMEDIATELY&&\System\Http\Response::redirect($url,$code);$this->redirect[$when]=array("url"=>$url,"code"=>$code);}public function get_exec_time(){return $this->stop_time-$this->start_time;}public function get_queue(){return $this->queue;}public function dbus(){return $this->dbus;}}} namespace System\Module{class DataBus{private $flow;private $data=array();private $modules=array();public function __construct(\System\Module\Flow $flow){$this->flow=$flow;}public function get_data(){$sources=func_get_args();if(is_array($sources[0])){$sources=$sources[0];}$ret=array();foreach($sources as $s){if(isset($this->data[$s])){$ret=array_merge($ret,(array) $this->data[$s]);}}return $ret;}public function add_data(\System\Module $module,$name,$data){if(!isset($this->data[$module->get_id()])){$this->data[$module->get_id()]=array();}$this->data[$module->get_id()][$name]=$data;return $this;}}} namespace System{class Image extends Model\Attr{const DIR='/var/images';const DIR_TMP='/var/tmp';const DIR_THUMBS='/var/thumbs';const FILE_BAD_THUMB='/share/pixmaps/pwf/bad_thumb.jpg';const IMG_JPEG_OLD=3;const WIDTH_DEFAULT=100;const HEIGHT_DEFAULT=100;private static $bad_thumb=null;public static $gd_formats=array(IMG_GIF=>"gif",IMG_JPG=>"jpg",self::IMG_JPEG_OLD=>"jpg",IMG_PNG=>"png",);static protected $attrs=array("width"=>array('int'),"height"=>array('int'),"file_size"=>array('int'),"file_path"=>array('varchar'),"file_name"=>array('varchar'),"file_hash"=>array('varchar'),"format"=>array('varchar'),"src"=>array('varchar'),"file"=>array('varchar'),"tmp"=>array('bool'),"bad"=>array('bool'),"cache"=>array('bool'),"allow_save"=>array('bool'),"to_be_deleted"=>array('bool'),);private function read_dimensions(){if(!$this->width||!$this->height||!$this->format||!$this->file_size){if(file_exists($p=$this->get_path(true))){$this->file_size=filesize($p);}if(($info=self::get_image_size($this->get_path(true)))!==false&&$info[0]!==false){$this->width=$info[0];$this->height=$info[1];$this->format=$info[2];}}}public function get_size(){$this->read_dimensions();return $this->width.'x'.$this->height;}public function get_format(){$this->read_dimensions();return $this->format;}public function is_image(){return!is_null($f=$this->get_format())&&$f;}public function thumb($width=null,$height=null,$crop=true,$transparent=false){if(is_null($width)&&is_null($height)){throw new \System\Error\Argument('You must pass width or height to \System\Image::thumb.');}if($this->check_thumb($width,$height,$crop,true,$transparent)){return $this->get_thumb_path($width,$height,$crop,$transparent);}else{if($this->bad){throw new \System\Error('Cannot generate thumb.');}else return self::gen_bad_thumb($width,$height);}}public function thumb_trans($width=null,$height=null,$crop=true){return $this->thumb($width,$height,$crop,true);}private function check_thumb($width=null,$height=null,$crop=true,$gen=true,$transparent=false){return file_exists(ROOT.$this->get_thumb_path($width,$height,$crop,$transparent))||($gen&&$this->make_thumb($width,$height,$crop,$transparent));}private function get_thumb_path($width=null,$height=null,$crop=true,$transparent=false){$name=$this->get_file_hash();return self::DIR_THUMBS.'/'.$width.'x'.$height.'/'.substr($name,0,5).'/'.$name.($crop?'-crop':'').($transparent?'.png':'.jpg');}private function get_file_hash(){if(!$this->file_hash&&file_exists($this->get_path(true))){$this->file_hash=md5(\System\File::read($this->get_path(true)));}return $this->file_hash;}private function make_thumb($width,$height,$crop=true,$transparent=false){if(extension_loaded('imagemagick')){$im=new ImageMagick($this->get_path(true));$im->resampleImage($width,$height);return $im->writeImage(ROOT.$this->get_thumb_path($width,$height,$crop));}else{return self::gen_thumb($this,$width,$height,$crop,$transparent);}}public static function get_image_size($path){return (array)@getimagesize($path);}public static function from_json($json){return new self(\System\Json::decode($json));}public static function from_path($path){if(file_exists($path)||file_exists($path=ROOT.$path)){return new self(array("src"=>'copy',"tmp_name"=>$path,"file_path"=>str_replace(ROOT,'',$path),"file_name"=>basename($path),"tmp"=>false,));}return false;}public static function from_scratch(){return new Image(array());}public function to_json($encode=true){$data=array("file_path"=>$this->get_path(),"file_name"=>$this->file_name,"file_size"=>$this->file_size,"file_hash"=>$this->get_file_hash(),"width"=>$this->width,"height"=>$this->height,);return $encode?json_encode($data):$data;}public function save($path=null){if($this->cache&&$this->allow_save){if(!$path){$new_name=$this->gen_name();$dir=ROOT.self::DIR.'/'.substr($new_name,0,4);$path=$dir.'/'.$new_name;\System\Directory::check($dir);}\System\Directory::check(dirname($this->get_path(true)));if(($this->src=='copy'&&$ok=copy($this->get_path(true),$path))||$ok=rename($this->get_path(true),$path)){$this->file_path=$path;$this->file_name=basename($this->get_path(true));$this->cache=false;$this->tmp=false;$this->allow_save=false;chmod($this->file_path,0644);}return $ok;}}private function gen_name(){return md5(\System\File::read($this->get_path(true),false,NULL,-1,2048).'-'.intval($this->file_size).'-'.intval($this->width).'x'.intval($this->height)).'.'.self::get_suffix($this->format);}public static function get_suffix($gd_format){if(isset(self::$gd_formats[$gd_format])){return self::$gd_formats[$gd_format];}else throw new \System\Error\Argument('Unknown image format.');}private static function gen_bad_thumb($width=null,$height=null){if(is_null(self::$bad_thumb)){self::$bad_thumb=self::from_path(ROOT.self::FILE_BAD_THUMB);self::$bad_thumb->tmp=true;self::$bad_thumb->bad=true;}return self::$bad_thumb->thumb($width,$height);}public static function gen_thumb(self $obj,$w_new,$h_new,$crop=true,$transparent=false){$path=$obj->get_path(true);if(($w_new&&!is_numeric($w_new))||($h_new&&!is_numeric($h_new))){throw new \System\Error\Argument("Width and height must be integer.");}if($path!=ROOT&&file_exists($path)){$obj->read_dimensions();$w_org=intval($obj->width);$h_org=intval($obj->height);$tpth=ROOT.$obj->get_thumb_path($w_new,$h_new,$crop,$transparent);\System\Directory::check(dirname($tpth));if($w_new<$w_org||$h_new<$h_org){list($w_new,$h_new,$xw,$xh,$dst_x,$dst_y)=self::calc_thumb_coords($w_org,$h_org,$w_new,$h_new,$crop);$im=self::get_image_resource($path,$obj->get_format());$th=imagecreatetruecolor($w_new,$h_new);if(!$transparent){$wh=imagecolorallocate($th,255,255,255);imagefill($th,0,0,$wh);}else{$transparent=imagecolorallocatealpha($th,0,0,0,127);imagefill($th,0,0,$transparent);}imagecopyresampled($th,$im,intval($dst_x),intval($dst_y),0,0,intval($xw),intval($xh),$w_org,$h_org);if(file_exists($tpth)){unlink($tpth);}if($transparent){imagealphablending($th,false);imagesavealpha($th,true);return imagepng($th,$tpth);}else{return imagejpeg($th,$tpth,99);}imagedestroy($th);}else{return copy($path,$tpth);}}return false;}public static function get_image_resource($path,$format){$im=null;switch($format){case 1:$im=imagecreatefromgif($path);break;case 2:$im=imagecreatefromjpeg($path);break;case 3:$im=imagecreatefrompng($path);break;}if(!is_resource($im)){throw new \System\Error\File(sprintf('Failed to open image "%s". File is not readable or format "%s" is not supported.',$path,self::get_suffix($format)));}return $im;}public static function calc_thumb_coords($w_org,$h_org,$w_new=null,$h_new=null,$crop=false){$refit=false;if($w_new<=0&&$h_new){$w_new=round(($w_org*$h_new)/$h_org);$refit=true;}if($h_new<=0&&$w_new){$h_new=round(($h_org*$w_new)/$w_org);$refit=true;}if($crop&&!$refit){if($w_org/$h_org<$w_new/$h_new){$xw=$w_new;$xh=round($h_org/$w_org*$w_new);$dst_x=0;$dst_y=round(($xh>$h_new)?(-1*abs($h_new-$xh)/2):(abs($h_new-$xh)/2));}else{$xh=$h_new;$xw=round($w_org/$h_org*$h_new);$dst_x=round(($xw>$w_new)?(-1*abs($w_new-$xw)/2):(abs($w_new-$xw)/2));$dst_y=0;}}else{$xw=$w_new;$xh=$h_new;$dst_x=$dst_y=0;}return array($w_new,$h_new,$xw,$xh,$dst_x,$dst_y);}public function allow_save(){return $this->allow_save;}public function is_to_be_deleted(){return $this->to_be_deleted;}public function get_path($with_root=false){$path=str_replace(ROOT,'',$this->file_path);return $with_root?($this->tmp&&!$this->bad?'':ROOT).$path:$path;}public function update_attrs(array $dataray){parent::update_attrs($dataray);!isset($dataray['src'])&&$dataray['src']='';$this->allow_save=$this->src=='upload'||$this->src=='copy'||$this->src=='migration';if(!($this->to_be_deleted=$dataray['src']=='none')){if(isset($dataray['tmp_name'])&&empty($dataray['error'])){$this->tmp=$dataray['src']=='upload';if(is_uploaded_file($dataray['tmp_name'])||file_exists($dataray['tmp_name'])){$this->file_path=$dataray['tmp_name'];$this->file_name=basename($this->get_path(true));$this->read_dimensions();}else throw new \System\Error\File(sprintf('Image "%s" could not be saved!',$dataray['tmp_name']));}}return $this;}public function cache(){if($this->is_image()){$tmp_path=ROOT.self::DIR_TMP.'/'.$this->get_file_hash().'.'.self::get_suffix($this->get_format());if(@copy($this->get_path(true),$tmp_path)){$this->file_path=str_replace(ROOT,'',$tmp_path);$this->tmp=false;$this->cache=true;}else throw new \System\Error\File(sprintf('Copying image from "%s" to "%s" failed while caching!',$this->get_path(true),$tmp_path),'Please check your permissions and disk space');}return $this;}public function to_html(\System\Template\Renderer $ren,$w=self::WIDTH_DEFAULT,$h=null,$crop=true,$transparent=null){$path=((is_null($transparent)||$transparent)&&$this->get_format()==3)?$this->thumb_trans($w,$h,$crop):$this->thumb($w,$h,$crop);return \Stag::img(array("src"=>$path,"alt"=>''));}public static function from_form($value){if(any($value['file'])){$img=new self(array("file_path"=>$value['file']['tmp_name'],"file_name"=>$value['file']['name'],"tmp"=>true,"src"=>'upload',));return $img->cache();}else{return null;}}}} namespace System{abstract class Santa{const CACHE_MAX=2592000;const DIR_TREE='/var/cache/santa';const DIR_TMP='/var/tmp/santa';static private $tree=array();public static function get_repo_list(){return cfg('santa','repositories');}public static function sync(){foreach(self::get_repo_list()as $repo=>$url){self::sync_from($repo);}}public static function sync_from($repo){$url=cfg('santa','repositories',$repo);$data=\System\Offcom\Request::get($url);if($data->ok()){$tmp=\System\Json::decode($data->content,true);self::$tree[$repo]=$tmp['tree'];\System\Directory::check(ROOT.self::DIR_TREE);\System\File::put(self::get_repo_file($repo),json_encode(self::$tree[$repo]));}else throw new \System\Error\Connection('Fetching recent tree data failed',sprintf('HTTP error %s ',$data->status));}public static function get_repo_file($repo){return ROOT.self::DIR_TREE.'/'.$repo.'.json';}public static function get_tree(){empty(self::$tree)&&self::load_tree();return self::$tree;}public static function load_tree(){self::$tree=array();foreach(self::get_repo_list()as $repo=>$url){self::$tree[$repo]=\System\Json::read(self::get_repo_file($repo));}}public static function get_all($from_category=null){$packages=array();$tree=self::get_tree();foreach($tree as $repo=>$pkg_list){foreach($pkg_list as $cname=>$category){if(is_null($from_category)||$from_category==$cname){foreach($category as $package_name=>$pkg_data){$str=$cname.'/'.$package_name;if(any($packages[$str])){$pkg=&$packages[$str];}else{$pkg=new \System\Santa\Package(array("name"=>$package_name,"repo"=>$repo,"category"=>$cname,"project"=>$pkg_data['project'],"desc"=>$pkg_data['desc'],"homepage"=>isset($pkg_data['homepage'])?$pkg_data['homepage']:'',"available"=>array(),));}foreach($pkg_data['versions']as $ver){$pkg->add_version($repo,$ver['name'],$ver['branch']);}$packages[$str]=$pkg;}}}}return $packages;}public static function search(array $params){$packages=array();$all=self::get_all();foreach($all as $pkg){foreach($params as $param){$pass=preg_match('/'.$param.'/',$pkg->name)||preg_match('/'.$param.'/',$pkg->desc);if(!$pass){break;}}if($pass){$packages[]=$pkg;}}return $packages;}public static function get_all_installed(){$packages=array();foreach(self::get_all()as $pkg){if($pkg->is_installed()){$packages[]=$pkg;}}return $packages;}public static function get_update_list(){$old=self::get_all_installed();$up=array();foreach($old as $pkg){if($pkg->is_available_for_update()){$up[]=$pkg;}}return $up;}public static function find($name){$packages=self::get_all();$catg='';if(strpos($name,'/')!==false){list($catg,$name)=explode('/',$name);}foreach($packages as $pkg){$match_name=empty($name)||strpos($pkg->name,$name)!==false;$match_catg=empty($catg)||strpos($pkg->category,$catg)!==false;if($match_name&&$match_catg&&(any($name)||any($catg))){return $pkg;}}}public static function from_metadir($path){if(is_dir($path)&&file_exists($path.'/version')){$category_tmp=explode('/',$path);array_pop($category_tmp);$cfg=explode("\n",\System\File::read($path.'/version'));$pkg=new self(array('category'=>array_pop($category_tmp),'name_short'=>$cfg[0],'desc'=>$cfg[1],'version'=>$cfg[2],'name'=>$cfg[3],'branch'=>any($cfg[4])?$cfg[4]:'stable',));return $pkg;}else throw new \System\Error\File(sprintf('Cannot load package metadata from directory "%s"',$path));}public static function exists($name){self::load_tree();$category='';if(strpos($name,'/')>0){list($category,$name)=explode('/',$name,2);}foreach(self::$tree as $branch){if($category&&any($branch[$name])){return true;}else{foreach($branch as $category){if(any($category[$name])){return true;}}}}return false;}public static function get_all_installed_files(){$packages=self::get_all_installed();$files=array();foreach($packages as $pkg){$files=array_merge($files,$pkg->get_installed_version()->get_file_manifest());}return $files;}private static function check_tree_dir(){return is_dir(ROOT.self::DIR_TMP_TREE)?true:mkdir(ROOT.self::DIR_TMP_TREE,0775,true);}public static function get_branch_list(){self::load_tree();return array_keys(self::$tree);}public static function sort_packages_version_helper($a,$b){$a=explode('-',$a);$b=explode('-',$b);$a=$a[0];$b=$b[0];return \System\Santa\Package\Version::greater_version_than($b,$a);}public static function get_all_installed_versions(){$packages=self::get_all_installed();$versions=array();foreach($packages as $pkg){$versions[]=$pkg->get_installed_version();}return $versions;}}} namespace System\Video{class Youtube{const URL_HOST='youtube.com';const URL_WATCH='watch?v={id}';const URL_EMBED='embed/{id}';const URL_PARSE='/^watch.*v\=([0-9a-zA-Z\-]+)/';const ID_PARSE='/^[0-9a-zA-Z\-]+$/';private $id;private function __construct($id){$this->id=$id;}public static function from_url($url){if(($s=strpos($url,self::URL_HOST))!==false){$url=substr($url,$s+strlen(self::URL_HOST)+1);$matches=array();if(preg_match(self::URL_PARSE,$url,$matches)&&isset($matches[1])){return self::from_id($matches[1]);}}return false;}public static function from_id($id){if(preg_match(self::ID_PARSE,$id)){return new self($id);}return false;}public function get_data(){return array("id"=>$this->id);}public function get_url(){return 'http://'.self::URL_HOST.'/'.stprintf(self::URL_WATCH,$this->get_data());}public function get_embed_url(){return 'http://'.self::URL_HOST.'/'.stprintf(self::URL_EMBED,$this->get_data());}public function embed(){return \Tag::iframe(array("class"=>'video video_yt',"src"=>$this->get_embed_url(),"frameborder"=>0,"allowfullscreen"=>true,"output"=>false,"close"=>true,));}public function to_sql(){return $this->id;}}} namespace System\User{class Contact extends \System\Model\Database{const ALLOW_RELATION_DELETE=true;const STD_EMAIL=1;const STD_MOBILE=2;const STD_WEBSITE=3;const STD_PHONE=4;const IM_XMPP_JABBER=5;const IM_XMPP_GTALK=6;const IM_AIM=7;const IM_ICQ=8;const IM_MSN=9;const IM_YAHOO=10;const SOCIAL_FACEBOOK=11;const SOCIAL_TWITTER=12;const SOCIAL_GOOGLE_PLUS=13;protected static $attrs=array("user"=>array('belongs_to',"model"=>'System\User'),"type"=>array('int',"is_unsigned"=>true,"options"=>array(self::STD_EMAIL=>'contact_type_email',self::STD_MOBILE=>'contact_type_mobile',self::STD_WEBSITE=>'contact_type_website',self::STD_PHONE=>'contact_type_phone',self::IM_XMPP_JABBER=>'contact_type_xmpp_jabber',self::IM_XMPP_GTALK=>'contact_type_xmpp_gtalk',self::IM_AIM=>'contact_type_aim',self::IM_ICQ=>'contact_type_icq',self::IM_MSN=>'contact_type_msn',self::IM_YAHOO=>'contact_type_yahoo',self::SOCIAL_FACEBOOK=>'contact_type_facebook',self::SOCIAL_TWITTER=>'contact_type_twitter',self::SOCIAL_GOOGLE_PLUS=>'contact_type_google_plus',)),"ident"=>array('varchar'),"name"=>array('varchar'),"visible"=>array('bool'),"public"=>array('bool'),);private static $internal_types=array('email'=>self::STD_EMAIL,'mobile'=>self::STD_MOBILE,);public static function get_type_options(){return self::get_model_attr_options('\System\User\Contact','type');}public function get_type_name($trans=false){$opts=self::get_type_options();return str_replace('contact_type_','',$opts[$this->type]);}public function to_html(\System\Template\Renderer $ren){return $this->name?sprintf('%s (%s): %s',$ren->locales()->trans($this->get_type_name()),$this->name,$this->ident):sprintf('%s: %s',$ren->locales()->trans($this->get_type_name()),$this->ident);}}} namespace System\User{class Group extends \System\Model\Database{static protected $attrs=array("name"=>array('varchar'),"users"=>array('has_many',"model"=>'\System\User',"is_bilinear"=>true),"rights"=>array('has_many',"model"=>'\System\User\Perm'),);public function count_users(){return $this->users->count();}public function to_html(\System\Template\Renderer $ren){return $this->name;}}} namespace System\User{class Perm extends \System\Model\Database{static protected $attrs=array("group"=>array('belongs_to',"model"=>'\System\User\Group'),"type"=>array('varchar'),"trigger"=>array('varchar'),"public"=>array('bool'),);}} namespace System{class Url{public static function gen_seoname($str){$str=strtolower(strip_tags(iconv('UTF-8','US-ASCII//TRANSLIT',$str)));$str=preg_replace('/\s/','-',$str);$str=preg_replace('/[^a-zA-Z_-]/','',$str);return $str;}public static function gen_id($str){return str_replace('-','_',self::gen_seoname($str));}public static function get_seoid($str){$str=explode('-',$str);return (int) end($str);}}}namespace{define('YAWF_PACKED', true); define("NL","\n");define("TAB","\t"); function __autoload($class_name){$found=false;$file=\System\Loader::get_class_file_name($class_name,true);$helper_pos=strpos(\System\Loader::get_link_from_class($class_name),'helper');$is_helper=$helper_pos!==false&&$helper_pos<=1;if(!$is_helper&&file_exists($f=ROOT."/lib/class/".$file)){$found=include_once($f);}if(!$found&&$is_helper){$file=explode('/',$file);unset($file[0]);$file=implode('/',$file);if(file_exists($f=ROOT."/lib/helper/".$file)){$found=include_once($f);}}$cname=ucfirsts(members_to_path(explode('\\',$class_name)),'::','::');if($found){method_exists($class_name,'autoinit')&&$class_name::autoinit();}else{throw new System\Error\File(sprintf('Class or interface "%s" was not found. Expected on path "%s"',$cname,$f));}if(!class_exists($class_name)&&!interface_exists($class_name)){throw new System\Error(sprintf('Class or interface "%s" was expected in "%s" but not found.',$cname,$file));}}} namespace{function any(&$var){return!empty($var);}function first(array $array){return reset($array);}function last(array $array){return $array[count($array)-1];}function first_key(array $array){$keys=array_keys($array);return reset($keys);}function clear_url($url){if(!is_array($url))$url=explode('/',$url);return implode('/',$url);}function clear_this_url(&$url){$url=clear_url($url);}function members_to_path(array $members){return strtolower(is_array($members)?implode('::',$members):$members);}function v(){$trace=debug_backtrace();foreach(func_get_args()as $var){$path='';if(isset($trace[0]['file'])){$path.=basename($trace[0]['file']);if(isset($trace[0]['line'])){$path.=":".$trace[0]['line'];}$path.=", ";}if(isset($trace[0]['class'])){$path.=$trace[0]['class'].'::'.$trace[0]['function']."()";}elseif(isset($trace[0]['function'])){$path.=$trace[0]['function']."()";}echo '<div class="debug dump"><b>'.$path."</b><pre>";function_exists('var_export')&&!is_string($var)?var_dump($var):print_r($var);echo '</pre></div>';}}function gen_random_string($length=64){$str=md5(intval(strval(rand(1,1000)*rand(1,1000)/rand(1,1000)*rand(1,1000))));if(strlen($str)>$length)$str=substr($str,0,$length-1);return $str;}function collect($func,$array,$dont_assoc=false){if(is_array($func)){if($func[0]=='this'){$names=array();array_shift($func);foreach($array as $key=>&$obj){$f=implode('::',$func);if($dont_assoc){$names[]=$obj->$f();}else{$names[$key]=$obj->$f();}}return $names;}elseif($func[0]=='attr'){$names=array();foreach($array as&$obj){if(is_object($obj)){if($dont_assoc){$names[]=$obj->$func[1];}else{$names[$obj->id]=$obj->$func[1];}}elseif(is_array($obj)){$names[]=$obj[$func[1]];}else $names[]=$obj;}return $names;}else{return array_map($func,$array);}}elseif(is_callable($func)){foreach($array as&$item){$item=$func($item);}}else{$names=array();foreach($array as $item){$names[]=$item[$func];}return $names;}return $array;}function collect_pair($func_keys,$func_data,array $data){$keys=collect($func_keys,$data,true);$data=collect($func_data,$data,true);return empty($keys)?array():array_combine($keys,$data);}function def(&$var,$def_val=null){return is_null($var)?($var=$def_val):$var;}function stprintf($str,array $data=array(),$strict=true,$prefix=null){if($str===null)return null;$keys=array('\{','\}');$vals=array('','');foreach($data as $k=>$v){if(is_object($v)){$v='{object}';}elseif(is_array($v)){$v=implode(', ',$v);}$keys[]='{'.($prefix?$prefix.'_':'').$k.'}';$vals[]=$v;}$str=str_replace($keys,$vals,$str);return $strict?preg_replace("/\{[a-zA-Z\-\_]\}/","",$str):$str;}function soprintf($str,System\Model\Attr $object,$strict=true,$prefix=null){$data=array_merge($object->get_opts(),$object->get_data());if($object instanceof System\Model\Database){$data[System\Model\Database::get_id_col(get_class($object))]=$object->id;}if(!$object->has_attr('seoname')){$data['seoname']=$object->get_seoname();}return stprintf($str,$data,$strict,$prefix);}function ucfirsts($str,$separator='-',$replacement=' '){$temp=explode($separator,$str);foreach($temp as&$part){$part=cflc($part);}return implode($replacement,$temp);}function cflc($str,$case=System\Template::CASE_UPPER){if(is_array($str)){foreach($str as&$s){$s=cflc($s);}}else{$str=mb_convert_case(mb_substr($str,0,1),$case).mb_substr($str,1);}return $str;}function read_dir_contents($dir,array&$files=array(),array&$directories=array(),array&$used=array()){$od=opendir($dir);while($f=readdir($od)){if($f!='.'&&$f!='..'){$fp=$dir.'/'.$f;if(is_dir($fp)){read_dir_contents($fp,$files,$directories,$used);if(!in_array($fp,$used)){$directories[]=$fp;$used[]=$fp;}}else{if(!in_array($fp,$used)){$files[]=$fp;$used[]=$fp;}}}}closedir($od);}function hash_passwd($str){return sha1(cfg('site','password','shield').md5($str));}function collect_ids(array $list){return collect(array('attr','id'),$list);}function collect_names(array $list){return collect(array('this','get_name'),$list);}function args(){return array("args"=>func_get_args());}function get_model($obj){if(is_object($obj)){$model=get_class($obj);}else if(is_string($obj)){$model=strpos($obj,'\\')===0?$obj:('\\'.$obj);}return $model;}} namespace{class Tag extends System\Template\Tag{}class Stag extends Tag{public static function __callStatic($name,$args){$attrs=&$args[0];$attrs['output']=false;return parent::tag($name,$attrs);}}function close($tagname){return Tag::close($tagname);}function introduce(){return \System\Status::introduce();}function doctype(){return Tag::doctype();}function footer($class=null,$content=null){return Tag::tag('footer',array("class"=>$class,"content"=>$content,"output"=>false,));}function htmlheader($class=null,$content=null){return Tag::tag('header',array("class"=>$class,"content"=>$content,"output"=>false,));}function body($class=null,$content=null){return Tag::tag('div',array("class"=>$class,"content"=>$content,"output"=>false,));}function div($class=null,$content=null,$id=null){return Tag::tag('div',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function span($class,$content=null,$id=null){return Tag::tag('span',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function ul($class,$content=null,$id=null){return Tag::tag('ul',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function menu($class,$content=null,$id=null){return Tag::tag('menu',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function li($content=null,$class=null,$id=null){return Tag::tag('li',array("class"=>$class,"content"=>$content,"id"=>$id,"output"=>false,));}function img($src,$alt='',$class=null,$id=null){return Tag::tag('img',array("class"=>$class,"src"=>$src,"alt"=>$alt,"id"=>$id,"output"=>false,));}function html($lang,$class=null){return Tag::tag('html',array("class"=>$class,"lang"=>$lang,"output"=>false,));}function head($content=null){return Tag::tag('html',array("content"=>$content,"output"=>false,));}function get_all($model,array $conds=array(),array $opts=array(),array $joins=array()){return System\Model\Database::get_all($model,$conds,$opts,$joins);}function get_first($model,array $conds=array(),array $opts=array(),array $joins=array()){return System\Model\Database::get_first($model,$conds,$opts,$joins);}function count_all($model,array $conds=array(),array $opts=array(),array $joins=array()){return System\Model\Database::count_all($model,$conds,$opts,$joins);}function find($model,$ids=array(),$force_array=false){return System\Model\Database::find($model,$ids,$force_array);}function create($model,array $attrs){return System\Model\Database::create($model,$attrs);}function redirect_now($url,$code=\System\Http\Response::FOUND){return System\Http\Response::redirect($url,$code);}function get_css_color($color){return System\Template::get_css_color($color);}function get_color_container($color){return System\Template::get_color_container($color);}function strlen_binary($str){return System\Locales::strlen_binary($str);}function cfg(){return System\Settings::get(func_get_args());}function cfgs(array $path,$value){return System\Settings::set($path,$value);}function to_json($value,$encode=true){return \System\Template::to_json($value,$encode);}function to_html(\System\Template\Renderer $ren,$value){return \System\Template::to_html($ren,$value);}}